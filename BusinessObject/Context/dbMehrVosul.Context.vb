'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated from a template.
'
'     Manual changes to this file may cause unexpected behavior in your application.
'     Manual changes to this file will be overwritten if the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Data.Entity
Imports System.Data.Entity.Infrastructure
Imports System.Data.Entity.Core.Objects
Imports System.Linq

Partial Public Class dbMehrVosulEntities1
    Inherits DbContext

    Public Sub New()
        MyBase.New("name=dbMehrVosulEntities1")
    End Sub

    Protected Overrides Sub OnModelCreating(modelBuilder As DbModelBuilder)
        Throw New UnintentionalCodeFirstException()
    End Sub

    Public Overridable Property tbl_Accessgroup() As DbSet(Of tbl_Accessgroup)
    Public Overridable Property tbl_AccessgroupMenu() As DbSet(Of tbl_AccessgroupMenu)
    Public Overridable Property tbl_AccessgroupUser() As DbSet(Of tbl_AccessgroupUser)
    Public Overridable Property tbl_Menu() As DbSet(Of tbl_Menu)
    Public Overridable Property tbl_SelfReport() As DbSet(Of tbl_SelfReport)
    Public Overridable Property tbl_User() As DbSet(Of tbl_User)
    Public Overridable Property tbl_SystemSetting() As DbSet(Of tbl_SystemSetting)
    Public Overridable Property sysdiagrams() As DbSet(Of sysdiagram)
    Public Overridable Property tbl_ErrorLog() As DbSet(Of tbl_ErrorLog)
    Public Overridable Property tbl_Deposits() As DbSet(Of tbl_Deposits)
    Public Overridable Property tbl_DepositType() As DbSet(Of tbl_DepositType)
    Public Overridable Property tbl_HadiDraftText() As DbSet(Of tbl_HadiDraftText)
    Public Overridable Property tbl_HadiLogCurrentLCStatus_H() As DbSet(Of tbl_HadiLogCurrentLCStatus_H)
    Public Overridable Property tbl_HadiLogLoanStatus() As DbSet(Of tbl_HadiLogLoanStatus)
    Public Overridable Property tbl_HadiOperation_Deposit() As DbSet(Of tbl_HadiOperation_Deposit)
    Public Overridable Property tbl_HadiOperation_Loan() As DbSet(Of tbl_HadiOperation_Loan)
    Public Overridable Property tbl_HadiWarningIntervals() As DbSet(Of tbl_HadiWarningIntervals)
    Public Overridable Property tbl_HadiWarningIntervalsBranch() As DbSet(Of tbl_HadiWarningIntervalsBranch)
    Public Overridable Property tbl_HadiWarningIntervalsDeposit() As DbSet(Of tbl_HadiWarningIntervalsDeposit)
    Public Overridable Property tbl_HadiWarningIntervalsException() As DbSet(Of tbl_HadiWarningIntervalsException)
    Public Overridable Property tbl_HadiWarningIntervalsExceptionBranch() As DbSet(Of tbl_HadiWarningIntervalsExceptionBranch)
    Public Overridable Property tbl_HadiWarningIntervalsExceptionDeposit() As DbSet(Of tbl_HadiWarningIntervalsExceptionDeposit)
    Public Overridable Property tbl_HadiWarningIntervalsLoan() As DbSet(Of tbl_HadiWarningIntervalsLoan)
    Public Overridable Property tbl_HadiWarningNotificationLog() As DbSet(Of tbl_HadiWarningNotificationLog)
    Public Overridable Property tbl_HadiWarningNotificationLogDetail() As DbSet(Of tbl_HadiWarningNotificationLogDetail)
    Public Overridable Property tbl_Date() As DbSet(Of tbl_Date)
    Public Overridable Property tbl_WarnatyType() As DbSet(Of tbl_WarnatyType)
    Public Overridable Property tbl_AlcatelLog() As DbSet(Of tbl_AlcatelLog)
    Public Overridable Property tbl_Branch() As DbSet(Of tbl_Branch)
    Public Overridable Property tbl_Commitment_Active() As DbSet(Of tbl_Commitment_Active)
    Public Overridable Property tbl_Commitment_Archive() As DbSet(Of tbl_Commitment_Archive)
    Public Overridable Property tbl_CurrentLCStatus() As DbSet(Of tbl_CurrentLCStatus)
    Public Overridable Property tbl_DraftText() As DbSet(Of tbl_DraftText)
    Public Overridable Property tbl_File() As DbSet(Of tbl_File)
    Public Overridable Property tbl_HandyFollow() As DbSet(Of tbl_HandyFollow)
    Public Overridable Property tbl_Loan() As DbSet(Of tbl_Loan)
    Public Overridable Property tbl_LoanSponsor() As DbSet(Of tbl_LoanSponsor)
    Public Overridable Property tbl_LoanSponsor_WarantyType() As DbSet(Of tbl_LoanSponsor_WarantyType)
    Public Overridable Property tbl_LoanType() As DbSet(Of tbl_LoanType)
    Public Overridable Property tbl_LogCurrentLCStatus_H() As DbSet(Of tbl_LogCurrentLCStatus_H)
    Public Overridable Property tbl_NotificationTarif() As DbSet(Of tbl_NotificationTarif)
    Public Overridable Property tbl_PreDraftText() As DbSet(Of tbl_PreDraftText)
    Public Overridable Property tbl_PreNotifiyCurrentLCStatus() As DbSet(Of tbl_PreNotifiyCurrentLCStatus)
    Public Overridable Property tbl_PreWarningIntervals() As DbSet(Of tbl_PreWarningIntervals)
    Public Overridable Property tbl_PreWarningIntervalsBranch() As DbSet(Of tbl_PreWarningIntervalsBranch)
    Public Overridable Property tbl_PreWarningIntervalsLoanType() As DbSet(Of tbl_PreWarningIntervalsLoanType)
    Public Overridable Property tbl_PreWarningLogCurrentStatus_H() As DbSet(Of tbl_PreWarningLogCurrentStatus_H)
    Public Overridable Property tbl_Province() As DbSet(Of tbl_Province)
    Public Overridable Property tbl_SMSCountLog() As DbSet(Of tbl_SMSCountLog)
    Public Overridable Property tbl_Sponsor_List_Log() As DbSet(Of tbl_Sponsor_List_Log)
    Public Overridable Property tbl_Sponsors_List() As DbSet(Of tbl_Sponsors_List)
    Public Overridable Property tbl_SystemLoginLog() As DbSet(Of tbl_SystemLoginLog)
    Public Overridable Property tbl_VoiceRecords() As DbSet(Of tbl_VoiceRecords)
    Public Overridable Property tbl_VoiceSMS_Report_Log() As DbSet(Of tbl_VoiceSMS_Report_Log)
    Public Overridable Property tbl_WarningIntervals() As DbSet(Of tbl_WarningIntervals)
    Public Overridable Property tbl_WarningIntervalsBranch() As DbSet(Of tbl_WarningIntervalsBranch)
    Public Overridable Property tbl_WarningIntervalsException() As DbSet(Of tbl_WarningIntervalsException)
    Public Overridable Property tbl_WarningIntervalsExceptionBranch() As DbSet(Of tbl_WarningIntervalsExceptionBranch)
    Public Overridable Property tbl_WarningIntervalsExceptionLoanType() As DbSet(Of tbl_WarningIntervalsExceptionLoanType)
    Public Overridable Property tbl_WarningIntervalsLoanType() As DbSet(Of tbl_WarningIntervalsLoanType)
    Public Overridable Property tbl_WarningNotificationLog() As DbSet(Of tbl_WarningNotificationLog)
    Public Overridable Property tbl_WarningNotificationLogDetail() As DbSet(Of tbl_WarningNotificationLogDetail)

    <DbFunction("dbMehrVosulEntities1", "fnc_Menu_Childs")>
    Public Overridable Function fnc_Menu_Childs(parentID As Nullable(Of Integer)) As IQueryable(Of fnc_Menu_Childs_Result)
        Dim parentIDParameter As ObjectParameter = If(parentID.HasValue, New ObjectParameter("ParentID", parentID), New ObjectParameter("ParentID", GetType(Integer)))

         Return DirectCast(Me, IObjectContextAdapter).ObjectContext.CreateQuery(Of fnc_Menu_Childs_Result)("[dbMehrVosulEntities1].[fnc_Menu_Childs](@ParentID)", parentIDParameter)
    End Function

    <DbFunction("dbMehrVosulEntities1", "fnc_Menu_Parents")>
    Public Overridable Function fnc_Menu_Parents(child As Nullable(Of Integer)) As IQueryable(Of fnc_Menu_Parents_Result)
        Dim childParameter As ObjectParameter = If(child.HasValue, New ObjectParameter("Child", child), New ObjectParameter("Child", GetType(Integer)))

         Return DirectCast(Me, IObjectContextAdapter).ObjectContext.CreateQuery(Of fnc_Menu_Parents_Result)("[dbMehrVosulEntities1].[fnc_Menu_Parents](@Child)", childParameter)
    End Function

    Public Overridable Function sp_alterdiagram(diagramname As String, owner_id As Nullable(Of Integer), version As Nullable(Of Integer), definition As Byte()) As Integer
        Dim diagramnameParameter As ObjectParameter = If(diagramname IsNot Nothing, New ObjectParameter("diagramname", diagramname), New ObjectParameter("diagramname", GetType(String)))

        Dim owner_idParameter As ObjectParameter = If(owner_id.HasValue, New ObjectParameter("owner_id", owner_id), New ObjectParameter("owner_id", GetType(Integer)))

        Dim versionParameter As ObjectParameter = If(version.HasValue, New ObjectParameter("version", version), New ObjectParameter("version", GetType(Integer)))

        Dim definitionParameter As ObjectParameter = If(definition IsNot Nothing, New ObjectParameter("definition", definition), New ObjectParameter("definition", GetType(Byte())))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter)
    End Function

    Public Overridable Function sp_creatediagram(diagramname As String, owner_id As Nullable(Of Integer), version As Nullable(Of Integer), definition As Byte()) As Integer
        Dim diagramnameParameter As ObjectParameter = If(diagramname IsNot Nothing, New ObjectParameter("diagramname", diagramname), New ObjectParameter("diagramname", GetType(String)))

        Dim owner_idParameter As ObjectParameter = If(owner_id.HasValue, New ObjectParameter("owner_id", owner_id), New ObjectParameter("owner_id", GetType(Integer)))

        Dim versionParameter As ObjectParameter = If(version.HasValue, New ObjectParameter("version", version), New ObjectParameter("version", GetType(Integer)))

        Dim definitionParameter As ObjectParameter = If(definition IsNot Nothing, New ObjectParameter("definition", definition), New ObjectParameter("definition", GetType(Byte())))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter)
    End Function

    Public Overridable Function sp_dropdiagram(diagramname As String, owner_id As Nullable(Of Integer)) As Integer
        Dim diagramnameParameter As ObjectParameter = If(diagramname IsNot Nothing, New ObjectParameter("diagramname", diagramname), New ObjectParameter("diagramname", GetType(String)))

        Dim owner_idParameter As ObjectParameter = If(owner_id.HasValue, New ObjectParameter("owner_id", owner_id), New ObjectParameter("owner_id", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter)
    End Function

    Public Overridable Function sp_helpdiagramdefinition(diagramname As String, owner_id As Nullable(Of Integer)) As ObjectResult(Of sp_helpdiagramdefinition_Result)
        Dim diagramnameParameter As ObjectParameter = If(diagramname IsNot Nothing, New ObjectParameter("diagramname", diagramname), New ObjectParameter("diagramname", GetType(String)))

        Dim owner_idParameter As ObjectParameter = If(owner_id.HasValue, New ObjectParameter("owner_id", owner_id), New ObjectParameter("owner_id", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of sp_helpdiagramdefinition_Result)("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter)
    End Function

    Public Overridable Function sp_helpdiagrams(diagramname As String, owner_id As Nullable(Of Integer)) As ObjectResult(Of sp_helpdiagrams_Result)
        Dim diagramnameParameter As ObjectParameter = If(diagramname IsNot Nothing, New ObjectParameter("diagramname", diagramname), New ObjectParameter("diagramname", GetType(String)))

        Dim owner_idParameter As ObjectParameter = If(owner_id.HasValue, New ObjectParameter("owner_id", owner_id), New ObjectParameter("owner_id", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of sp_helpdiagrams_Result)("sp_helpdiagrams", diagramnameParameter, owner_idParameter)
    End Function

    Public Overridable Function sp_renamediagram(diagramname As String, owner_id As Nullable(Of Integer), new_diagramname As String) As Integer
        Dim diagramnameParameter As ObjectParameter = If(diagramname IsNot Nothing, New ObjectParameter("diagramname", diagramname), New ObjectParameter("diagramname", GetType(String)))

        Dim owner_idParameter As ObjectParameter = If(owner_id.HasValue, New ObjectParameter("owner_id", owner_id), New ObjectParameter("owner_id", GetType(Integer)))

        Dim new_diagramnameParameter As ObjectParameter = If(new_diagramname IsNot Nothing, New ObjectParameter("new_diagramname", new_diagramname), New ObjectParameter("new_diagramname", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter)
    End Function

    Public Overridable Function sp_upgraddiagrams() As Integer
        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("sp_upgraddiagrams")
    End Function

    Public Overridable Function spr__WarningNotificationLogDetail_ShowDetail_Select(action As Nullable(Of Integer), fileID As Nullable(Of Integer), from As Nullable(Of Date), [to] As Nullable(Of Date), notificationTypeID As Nullable(Of Byte)) As ObjectResult(Of spr__WarningNotificationLogDetail_ShowDetail_Select_Result)
        Dim actionParameter As ObjectParameter = If(action.HasValue, New ObjectParameter("Action", action), New ObjectParameter("Action", GetType(Integer)))

        Dim fileIDParameter As ObjectParameter = If(fileID.HasValue, New ObjectParameter("FileID", fileID), New ObjectParameter("FileID", GetType(Integer)))

        Dim fromParameter As ObjectParameter = If(from.HasValue, New ObjectParameter("From", from), New ObjectParameter("From", GetType(Date)))

        Dim toParameter As ObjectParameter = If([to].HasValue, New ObjectParameter("To", [to]), New ObjectParameter("To", GetType(Date)))

        Dim notificationTypeIDParameter As ObjectParameter = If(notificationTypeID.HasValue, New ObjectParameter("NotificationTypeID", notificationTypeID), New ObjectParameter("NotificationTypeID", GetType(Byte)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr__WarningNotificationLogDetail_ShowDetail_Select_Result)("spr__WarningNotificationLogDetail_ShowDetail_Select", actionParameter, fileIDParameter, fromParameter, toParameter, notificationTypeIDParameter)
    End Function

    Public Overridable Function spr_Accessgroup_Count_Select(action As Nullable(Of Integer), sEARCHSTR As String) As ObjectResult(Of Nullable(Of Integer))
        Dim actionParameter As ObjectParameter = If(action.HasValue, New ObjectParameter("Action", action), New ObjectParameter("Action", GetType(Integer)))

        Dim sEARCHSTRParameter As ObjectParameter = If(sEARCHSTR IsNot Nothing, New ObjectParameter("SEARCHSTR", sEARCHSTR), New ObjectParameter("SEARCHSTR", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of Nullable(Of Integer))("spr_Accessgroup_Count_Select", actionParameter, sEARCHSTRParameter)
    End Function

    Public Overridable Function spr_Accessgroup_Delete(iD As Nullable(Of Integer)) As Integer
        Dim iDParameter As ObjectParameter = If(iD.HasValue, New ObjectParameter("ID", iD), New ObjectParameter("ID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_Accessgroup_Delete", iDParameter)
    End Function

    Public Overridable Function spr_Accessgroup_Insert(desp As String, sTime As Nullable(Of Date), fK_UserID As Nullable(Of Integer), visiblity As Nullable(Of Boolean)) As ObjectResult(Of Nullable(Of Decimal))
        Dim despParameter As ObjectParameter = If(desp IsNot Nothing, New ObjectParameter("Desp", desp), New ObjectParameter("Desp", GetType(String)))

        Dim sTimeParameter As ObjectParameter = If(sTime.HasValue, New ObjectParameter("STime", sTime), New ObjectParameter("STime", GetType(Date)))

        Dim fK_UserIDParameter As ObjectParameter = If(fK_UserID.HasValue, New ObjectParameter("FK_UserID", fK_UserID), New ObjectParameter("FK_UserID", GetType(Integer)))

        Dim visiblityParameter As ObjectParameter = If(visiblity.HasValue, New ObjectParameter("Visiblity", visiblity), New ObjectParameter("Visiblity", GetType(Boolean)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of Nullable(Of Decimal))("spr_Accessgroup_Insert", despParameter, sTimeParameter, fK_UserIDParameter, visiblityParameter)
    End Function

    Public Overridable Function spr_Accessgroup_List_Select(action As Nullable(Of Integer), userID As Nullable(Of Integer)) As ObjectResult(Of spr_Accessgroup_List_Select_Result)
        Dim actionParameter As ObjectParameter = If(action.HasValue, New ObjectParameter("Action", action), New ObjectParameter("Action", GetType(Integer)))

        Dim userIDParameter As ObjectParameter = If(userID.HasValue, New ObjectParameter("UserID", userID), New ObjectParameter("UserID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_Accessgroup_List_Select_Result)("spr_Accessgroup_List_Select", actionParameter, userIDParameter)
    End Function

    Public Overridable Function spr_Accessgroup_Management_Select(action As Nullable(Of Integer), fromIndex As Nullable(Of Integer), toIndex As Nullable(Of Integer), sEARCHSTR As String) As ObjectResult(Of spr_Accessgroup_Management_Select_Result)
        Dim actionParameter As ObjectParameter = If(action.HasValue, New ObjectParameter("Action", action), New ObjectParameter("Action", GetType(Integer)))

        Dim fromIndexParameter As ObjectParameter = If(fromIndex.HasValue, New ObjectParameter("FromIndex", fromIndex), New ObjectParameter("FromIndex", GetType(Integer)))

        Dim toIndexParameter As ObjectParameter = If(toIndex.HasValue, New ObjectParameter("ToIndex", toIndex), New ObjectParameter("ToIndex", GetType(Integer)))

        Dim sEARCHSTRParameter As ObjectParameter = If(sEARCHSTR IsNot Nothing, New ObjectParameter("SEARCHSTR", sEARCHSTR), New ObjectParameter("SEARCHSTR", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_Accessgroup_Management_Select_Result)("spr_Accessgroup_Management_Select", actionParameter, fromIndexParameter, toIndexParameter, sEARCHSTRParameter)
    End Function

    Public Overridable Function spr_Accessgroup_Select(iD As Nullable(Of Integer)) As ObjectResult(Of spr_Accessgroup_Select_Result)
        Dim iDParameter As ObjectParameter = If(iD.HasValue, New ObjectParameter("ID", iD), New ObjectParameter("ID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_Accessgroup_Select_Result)("spr_Accessgroup_Select", iDParameter)
    End Function

    Public Overridable Function spr_Accessgroup_Update(iD As Nullable(Of Integer), desp As String, sTime As Nullable(Of Date), fK_UserID As Nullable(Of Integer), visiblity As Nullable(Of Boolean)) As Integer
        Dim iDParameter As ObjectParameter = If(iD.HasValue, New ObjectParameter("ID", iD), New ObjectParameter("ID", GetType(Integer)))

        Dim despParameter As ObjectParameter = If(desp IsNot Nothing, New ObjectParameter("Desp", desp), New ObjectParameter("Desp", GetType(String)))

        Dim sTimeParameter As ObjectParameter = If(sTime.HasValue, New ObjectParameter("STime", sTime), New ObjectParameter("STime", GetType(Date)))

        Dim fK_UserIDParameter As ObjectParameter = If(fK_UserID.HasValue, New ObjectParameter("FK_UserID", fK_UserID), New ObjectParameter("FK_UserID", GetType(Integer)))

        Dim visiblityParameter As ObjectParameter = If(visiblity.HasValue, New ObjectParameter("Visiblity", visiblity), New ObjectParameter("Visiblity", GetType(Boolean)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_Accessgroup_Update", iDParameter, despParameter, sTimeParameter, fK_UserIDParameter, visiblityParameter)
    End Function

    Public Overridable Function spr_AccessgroupMenu_Accessgroup_Delete(fK_AccessGroupID As Nullable(Of Integer)) As Integer
        Dim fK_AccessGroupIDParameter As ObjectParameter = If(fK_AccessGroupID.HasValue, New ObjectParameter("FK_AccessGroupID", fK_AccessGroupID), New ObjectParameter("FK_AccessGroupID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_AccessgroupMenu_Accessgroup_Delete", fK_AccessGroupIDParameter)
    End Function

    Public Overridable Function spr_AccessgroupMenu_AccessGroup_Select(accessgroupID As Nullable(Of Integer)) As ObjectResult(Of Nullable(Of Integer))
        Dim accessgroupIDParameter As ObjectParameter = If(accessgroupID.HasValue, New ObjectParameter("AccessgroupID", accessgroupID), New ObjectParameter("AccessgroupID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of Nullable(Of Integer))("spr_AccessgroupMenu_AccessGroup_Select", accessgroupIDParameter)
    End Function

    Public Overridable Function spr_AccessgroupMenu_Insert(fK_AccessGroupID As Nullable(Of Integer), fK_MenuID As Nullable(Of Integer)) As Integer
        Dim fK_AccessGroupIDParameter As ObjectParameter = If(fK_AccessGroupID.HasValue, New ObjectParameter("FK_AccessGroupID", fK_AccessGroupID), New ObjectParameter("FK_AccessGroupID", GetType(Integer)))

        Dim fK_MenuIDParameter As ObjectParameter = If(fK_MenuID.HasValue, New ObjectParameter("FK_MenuID", fK_MenuID), New ObjectParameter("FK_MenuID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_AccessgroupMenu_Insert", fK_AccessGroupIDParameter, fK_MenuIDParameter)
    End Function

    Public Overridable Function spr_AccessgroupUser_Insert(fK_UserID As Nullable(Of Integer), fK_AccessGroupID As Nullable(Of Integer)) As Integer
        Dim fK_UserIDParameter As ObjectParameter = If(fK_UserID.HasValue, New ObjectParameter("FK_UserID", fK_UserID), New ObjectParameter("FK_UserID", GetType(Integer)))

        Dim fK_AccessGroupIDParameter As ObjectParameter = If(fK_AccessGroupID.HasValue, New ObjectParameter("FK_AccessGroupID", fK_AccessGroupID), New ObjectParameter("FK_AccessGroupID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_AccessgroupUser_Insert", fK_UserIDParameter, fK_AccessGroupIDParameter)
    End Function

    Public Overridable Function spr_AccessgroupUser_List_Select(userID As Nullable(Of Integer)) As ObjectResult(Of Nullable(Of Integer))
        Dim userIDParameter As ObjectParameter = If(userID.HasValue, New ObjectParameter("UserID", userID), New ObjectParameter("UserID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of Nullable(Of Integer))("spr_AccessgroupUser_List_Select", userIDParameter)
    End Function

    Public Overridable Function spr_AccessgroupUser_Select(userID As Nullable(Of Integer)) As ObjectResult(Of spr_AccessgroupUser_Select_Result)
        Dim userIDParameter As ObjectParameter = If(userID.HasValue, New ObjectParameter("UserID", userID), New ObjectParameter("UserID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_AccessgroupUser_Select_Result)("spr_AccessgroupUser_Select", userIDParameter)
    End Function

    Public Overridable Function spr_AccessgroupUser_User_Delete(fK_UserID As Nullable(Of Integer)) As Integer
        Dim fK_UserIDParameter As ObjectParameter = If(fK_UserID.HasValue, New ObjectParameter("FK_UserID", fK_UserID), New ObjectParameter("FK_UserID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_AccessgroupUser_User_Delete", fK_UserIDParameter)
    End Function

    Public Overridable Function spr_Agent_List_Select() As Integer
        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_Agent_List_Select")
    End Function

    Public Overridable Function spr_Branch_ByCode_Select(barnchCode As String) As ObjectResult(Of spr_Branch_ByCode_Select_Result)
        Dim barnchCodeParameter As ObjectParameter = If(barnchCode IsNot Nothing, New ObjectParameter("BarnchCode", barnchCode), New ObjectParameter("BarnchCode", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_Branch_ByCode_Select_Result)("spr_Branch_ByCode_Select", barnchCodeParameter)
    End Function

    Public Overridable Function spr_Branch_Count_Select(action As Nullable(Of Integer), sEARCHSTR As String) As ObjectResult(Of Nullable(Of Integer))
        Dim actionParameter As ObjectParameter = If(action.HasValue, New ObjectParameter("Action", action), New ObjectParameter("Action", GetType(Integer)))

        Dim sEARCHSTRParameter As ObjectParameter = If(sEARCHSTR IsNot Nothing, New ObjectParameter("SEARCHSTR", sEARCHSTR), New ObjectParameter("SEARCHSTR", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of Nullable(Of Integer))("spr_Branch_Count_Select", actionParameter, sEARCHSTRParameter)
    End Function

    Public Overridable Function spr_Branch_Delete(iD As Nullable(Of Integer)) As Integer
        Dim iDParameter As ObjectParameter = If(iD.HasValue, New ObjectParameter("ID", iD), New ObjectParameter("ID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_Branch_Delete", iDParameter)
    End Function

    Public Overridable Function spr_Branch_Insert(brnachCode As String, branchName As String, branchAddress As String, fK_CUserID As Nullable(Of Integer), branchIP As String, telephone As String, fk_ProvinceID As Nullable(Of Integer)) As ObjectResult(Of Nullable(Of Decimal))
        Dim brnachCodeParameter As ObjectParameter = If(brnachCode IsNot Nothing, New ObjectParameter("BrnachCode", brnachCode), New ObjectParameter("BrnachCode", GetType(String)))

        Dim branchNameParameter As ObjectParameter = If(branchName IsNot Nothing, New ObjectParameter("BranchName", branchName), New ObjectParameter("BranchName", GetType(String)))

        Dim branchAddressParameter As ObjectParameter = If(branchAddress IsNot Nothing, New ObjectParameter("BranchAddress", branchAddress), New ObjectParameter("BranchAddress", GetType(String)))

        Dim fK_CUserIDParameter As ObjectParameter = If(fK_CUserID.HasValue, New ObjectParameter("FK_CUserID", fK_CUserID), New ObjectParameter("FK_CUserID", GetType(Integer)))

        Dim branchIPParameter As ObjectParameter = If(branchIP IsNot Nothing, New ObjectParameter("BranchIP", branchIP), New ObjectParameter("BranchIP", GetType(String)))

        Dim telephoneParameter As ObjectParameter = If(telephone IsNot Nothing, New ObjectParameter("Telephone", telephone), New ObjectParameter("Telephone", GetType(String)))

        Dim fk_ProvinceIDParameter As ObjectParameter = If(fk_ProvinceID.HasValue, New ObjectParameter("Fk_ProvinceID", fk_ProvinceID), New ObjectParameter("Fk_ProvinceID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of Nullable(Of Decimal))("spr_Branch_Insert", brnachCodeParameter, branchNameParameter, branchAddressParameter, fK_CUserIDParameter, branchIPParameter, telephoneParameter, fk_ProvinceIDParameter)
    End Function

    Public Overridable Function spr_Branch_List_Select(action As Nullable(Of Integer), provinceID As Nullable(Of Integer)) As ObjectResult(Of spr_Branch_List_Select_Result)
        Dim actionParameter As ObjectParameter = If(action.HasValue, New ObjectParameter("Action", action), New ObjectParameter("Action", GetType(Integer)))

        Dim provinceIDParameter As ObjectParameter = If(provinceID.HasValue, New ObjectParameter("ProvinceID", provinceID), New ObjectParameter("ProvinceID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_Branch_List_Select_Result)("spr_Branch_List_Select", actionParameter, provinceIDParameter)
    End Function

    Public Overridable Function spr_Branch_Management_Select(action As Nullable(Of Integer), fromIndex As Nullable(Of Integer), toIndex As Nullable(Of Integer), sEARCHSTR As String) As ObjectResult(Of spr_Branch_Management_Select_Result)
        Dim actionParameter As ObjectParameter = If(action.HasValue, New ObjectParameter("Action", action), New ObjectParameter("Action", GetType(Integer)))

        Dim fromIndexParameter As ObjectParameter = If(fromIndex.HasValue, New ObjectParameter("FromIndex", fromIndex), New ObjectParameter("FromIndex", GetType(Integer)))

        Dim toIndexParameter As ObjectParameter = If(toIndex.HasValue, New ObjectParameter("ToIndex", toIndex), New ObjectParameter("ToIndex", GetType(Integer)))

        Dim sEARCHSTRParameter As ObjectParameter = If(sEARCHSTR IsNot Nothing, New ObjectParameter("SEARCHSTR", sEARCHSTR), New ObjectParameter("SEARCHSTR", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_Branch_Management_Select_Result)("spr_Branch_Management_Select", actionParameter, fromIndexParameter, toIndexParameter, sEARCHSTRParameter)
    End Function

    Public Overridable Function spr_Branch_Select(iD As Nullable(Of Integer)) As ObjectResult(Of spr_Branch_Select_Result)
        Dim iDParameter As ObjectParameter = If(iD.HasValue, New ObjectParameter("ID", iD), New ObjectParameter("ID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_Branch_Select_Result)("spr_Branch_Select", iDParameter)
    End Function

    Public Overridable Function spr_Branch_Update(iD As Nullable(Of Integer), brnachCode As String, branchName As String, branchAddress As String, fK_CUserID As Nullable(Of Integer), branchIP As String, telephone As String, fk_ProvinceID As Nullable(Of Integer)) As Integer
        Dim iDParameter As ObjectParameter = If(iD.HasValue, New ObjectParameter("ID", iD), New ObjectParameter("ID", GetType(Integer)))

        Dim brnachCodeParameter As ObjectParameter = If(brnachCode IsNot Nothing, New ObjectParameter("BrnachCode", brnachCode), New ObjectParameter("BrnachCode", GetType(String)))

        Dim branchNameParameter As ObjectParameter = If(branchName IsNot Nothing, New ObjectParameter("BranchName", branchName), New ObjectParameter("BranchName", GetType(String)))

        Dim branchAddressParameter As ObjectParameter = If(branchAddress IsNot Nothing, New ObjectParameter("BranchAddress", branchAddress), New ObjectParameter("BranchAddress", GetType(String)))

        Dim fK_CUserIDParameter As ObjectParameter = If(fK_CUserID.HasValue, New ObjectParameter("FK_CUserID", fK_CUserID), New ObjectParameter("FK_CUserID", GetType(Integer)))

        Dim branchIPParameter As ObjectParameter = If(branchIP IsNot Nothing, New ObjectParameter("BranchIP", branchIP), New ObjectParameter("BranchIP", GetType(String)))

        Dim telephoneParameter As ObjectParameter = If(telephone IsNot Nothing, New ObjectParameter("Telephone", telephone), New ObjectParameter("Telephone", GetType(String)))

        Dim fk_ProvinceIDParameter As ObjectParameter = If(fk_ProvinceID.HasValue, New ObjectParameter("Fk_ProvinceID", fk_ProvinceID), New ObjectParameter("Fk_ProvinceID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_Branch_Update", iDParameter, brnachCodeParameter, branchNameParameter, branchAddressParameter, fK_CUserIDParameter, branchIPParameter, telephoneParameter, fk_ProvinceIDParameter)
    End Function

    Public Overridable Function spr_BranchIP_Update(iD As Nullable(Of Integer), branchIP As String) As Integer
        Dim iDParameter As ObjectParameter = If(iD.HasValue, New ObjectParameter("ID", iD), New ObjectParameter("ID", GetType(Integer)))

        Dim branchIPParameter As ObjectParameter = If(branchIP IsNot Nothing, New ObjectParameter("BranchIP", branchIP), New ObjectParameter("BranchIP", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_BranchIP_Update", iDParameter, branchIPParameter)
    End Function

    Public Overridable Function spr_Commitment_Count_Select(action As Nullable(Of Integer), sEARCHSTR As String, fK_LoanID As Nullable(Of Integer)) As ObjectResult(Of Nullable(Of Integer))
        Dim actionParameter As ObjectParameter = If(action.HasValue, New ObjectParameter("Action", action), New ObjectParameter("Action", GetType(Integer)))

        Dim sEARCHSTRParameter As ObjectParameter = If(sEARCHSTR IsNot Nothing, New ObjectParameter("SEARCHSTR", sEARCHSTR), New ObjectParameter("SEARCHSTR", GetType(String)))

        Dim fK_LoanIDParameter As ObjectParameter = If(fK_LoanID.HasValue, New ObjectParameter("FK_LoanID", fK_LoanID), New ObjectParameter("FK_LoanID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of Nullable(Of Integer))("spr_Commitment_Count_Select", actionParameter, sEARCHSTRParameter, fK_LoanIDParameter)
    End Function

    Public Overridable Function spr_CommitmentActive_Delete(iD As Nullable(Of Integer)) As Integer
        Dim iDParameter As ObjectParameter = If(iD.HasValue, New ObjectParameter("ID", iD), New ObjectParameter("ID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_CommitmentActive_Delete", iDParameter)
    End Function

    Public Overridable Function spr_CommitmentActive_Insert(fK_FileID As Nullable(Of Integer), fK_LoanID As Nullable(Of Integer), remarks As String, fK_UserID As Nullable(Of Integer), expireAt As Nullable(Of Date)) As Integer
        Dim fK_FileIDParameter As ObjectParameter = If(fK_FileID.HasValue, New ObjectParameter("FK_FileID", fK_FileID), New ObjectParameter("FK_FileID", GetType(Integer)))

        Dim fK_LoanIDParameter As ObjectParameter = If(fK_LoanID.HasValue, New ObjectParameter("FK_LoanID", fK_LoanID), New ObjectParameter("FK_LoanID", GetType(Integer)))

        Dim remarksParameter As ObjectParameter = If(remarks IsNot Nothing, New ObjectParameter("Remarks", remarks), New ObjectParameter("Remarks", GetType(String)))

        Dim fK_UserIDParameter As ObjectParameter = If(fK_UserID.HasValue, New ObjectParameter("FK_UserID", fK_UserID), New ObjectParameter("FK_UserID", GetType(Integer)))

        Dim expireAtParameter As ObjectParameter = If(expireAt.HasValue, New ObjectParameter("ExpireAt", expireAt), New ObjectParameter("ExpireAt", GetType(Date)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_CommitmentActive_Insert", fK_FileIDParameter, fK_LoanIDParameter, remarksParameter, fK_UserIDParameter, expireAtParameter)
    End Function

    Public Overridable Function spr_CommitmentActive_Select(action As Nullable(Of Integer), iD As Nullable(Of Integer), fileID As Nullable(Of Integer), loanID As Nullable(Of Integer)) As ObjectResult(Of spr_CommitmentActive_Select_Result)
        Dim actionParameter As ObjectParameter = If(action.HasValue, New ObjectParameter("Action", action), New ObjectParameter("Action", GetType(Integer)))

        Dim iDParameter As ObjectParameter = If(iD.HasValue, New ObjectParameter("ID", iD), New ObjectParameter("ID", GetType(Integer)))

        Dim fileIDParameter As ObjectParameter = If(fileID.HasValue, New ObjectParameter("FileID", fileID), New ObjectParameter("FileID", GetType(Integer)))

        Dim loanIDParameter As ObjectParameter = If(loanID.HasValue, New ObjectParameter("LoanID", loanID), New ObjectParameter("LoanID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_CommitmentActive_Select_Result)("spr_CommitmentActive_Select", actionParameter, iDParameter, fileIDParameter, loanIDParameter)
    End Function

    Public Overridable Function spr_CommitmentManagement_Select(action As Nullable(Of Integer), fromIndex As Nullable(Of Integer), toIndex As Nullable(Of Integer), sEARCHSTR As String, fK_LoanID As Nullable(Of Integer)) As ObjectResult(Of spr_CommitmentManagement_Select_Result)
        Dim actionParameter As ObjectParameter = If(action.HasValue, New ObjectParameter("Action", action), New ObjectParameter("Action", GetType(Integer)))

        Dim fromIndexParameter As ObjectParameter = If(fromIndex.HasValue, New ObjectParameter("FromIndex", fromIndex), New ObjectParameter("FromIndex", GetType(Integer)))

        Dim toIndexParameter As ObjectParameter = If(toIndex.HasValue, New ObjectParameter("ToIndex", toIndex), New ObjectParameter("ToIndex", GetType(Integer)))

        Dim sEARCHSTRParameter As ObjectParameter = If(sEARCHSTR IsNot Nothing, New ObjectParameter("SEARCHSTR", sEARCHSTR), New ObjectParameter("SEARCHSTR", GetType(String)))

        Dim fK_LoanIDParameter As ObjectParameter = If(fK_LoanID.HasValue, New ObjectParameter("FK_LoanID", fK_LoanID), New ObjectParameter("FK_LoanID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_CommitmentManagement_Select_Result)("spr_CommitmentManagement_Select", actionParameter, fromIndexParameter, toIndexParameter, sEARCHSTRParameter, fK_LoanIDParameter)
    End Function

    Public Overridable Function spr_Country_List_Select() As Integer
        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_Country_List_Select")
    End Function

    Public Overridable Function spr_CurrentLCStatus_Bulk_Insert(selectStatement As String) As Integer
        Dim selectStatementParameter As ObjectParameter = If(selectStatement IsNot Nothing, New ObjectParameter("SelectStatement", selectStatement), New ObjectParameter("SelectStatement", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_CurrentLCStatus_Bulk_Insert", selectStatementParameter)
    End Function

    Public Overridable Function spr_CurrentLCStatus_Delete() As Integer
        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_CurrentLCStatus_Delete")
    End Function

    Public Overridable Function spr_CurrentLCStatus_Insert(date_P As Nullable(Of Date), lCProfit As Nullable(Of Decimal), lCAmountPaid As Nullable(Of Decimal), amounDefferd As Nullable(Of Decimal), status As String, notPiadDurationDay As Nullable(Of Integer), lCBalance As Nullable(Of Decimal), amount_MustPay As Nullable(Of Integer), fK_FileID As Nullable(Of Integer), fK_LoanID As Nullable(Of Integer)) As Integer
        Dim date_PParameter As ObjectParameter = If(date_P.HasValue, New ObjectParameter("Date_P", date_P), New ObjectParameter("Date_P", GetType(Date)))

        Dim lCProfitParameter As ObjectParameter = If(lCProfit.HasValue, New ObjectParameter("LCProfit", lCProfit), New ObjectParameter("LCProfit", GetType(Decimal)))

        Dim lCAmountPaidParameter As ObjectParameter = If(lCAmountPaid.HasValue, New ObjectParameter("LCAmountPaid", lCAmountPaid), New ObjectParameter("LCAmountPaid", GetType(Decimal)))

        Dim amounDefferdParameter As ObjectParameter = If(amounDefferd.HasValue, New ObjectParameter("AmounDefferd", amounDefferd), New ObjectParameter("AmounDefferd", GetType(Decimal)))

        Dim statusParameter As ObjectParameter = If(status IsNot Nothing, New ObjectParameter("Status", status), New ObjectParameter("Status", GetType(String)))

        Dim notPiadDurationDayParameter As ObjectParameter = If(notPiadDurationDay.HasValue, New ObjectParameter("NotPiadDurationDay", notPiadDurationDay), New ObjectParameter("NotPiadDurationDay", GetType(Integer)))

        Dim lCBalanceParameter As ObjectParameter = If(lCBalance.HasValue, New ObjectParameter("LCBalance", lCBalance), New ObjectParameter("LCBalance", GetType(Decimal)))

        Dim amount_MustPayParameter As ObjectParameter = If(amount_MustPay.HasValue, New ObjectParameter("Amount_MustPay", amount_MustPay), New ObjectParameter("Amount_MustPay", GetType(Integer)))

        Dim fK_FileIDParameter As ObjectParameter = If(fK_FileID.HasValue, New ObjectParameter("FK_FileID", fK_FileID), New ObjectParameter("FK_FileID", GetType(Integer)))

        Dim fK_LoanIDParameter As ObjectParameter = If(fK_LoanID.HasValue, New ObjectParameter("FK_LoanID", fK_LoanID), New ObjectParameter("FK_LoanID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_CurrentLCStatus_Insert", date_PParameter, lCProfitParameter, lCAmountPaidParameter, amounDefferdParameter, statusParameter, notPiadDurationDayParameter, lCBalanceParameter, amount_MustPayParameter, fK_FileIDParameter, fK_LoanIDParameter)
    End Function

    Public Overridable Function spr_CurrentLCStatus_List_Select() As ObjectResult(Of spr_CurrentLCStatus_List_Select_Result)
        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_CurrentLCStatus_List_Select_Result)("spr_CurrentLCStatus_List_Select")
    End Function

    Public Overridable Function spr_CurrentLCStatus_Process_Update(fromID As Nullable(Of Integer), toID As Nullable(Of Integer)) As Integer
        Dim fromIDParameter As ObjectParameter = If(fromID.HasValue, New ObjectParameter("FromID", fromID), New ObjectParameter("FromID", GetType(Integer)))

        Dim toIDParameter As ObjectParameter = If(toID.HasValue, New ObjectParameter("ToID", toID), New ObjectParameter("ToID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_CurrentLCStatus_Process_Update", fromIDParameter, toIDParameter)
    End Function

    Public Overridable Function spr_CurrentLCStatus_Select(iD As Nullable(Of Integer)) As ObjectResult(Of spr_CurrentLCStatus_Select_Result)
        Dim iDParameter As ObjectParameter = If(iD.HasValue, New ObjectParameter("ID", iD), New ObjectParameter("ID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_CurrentLCStatus_Select_Result)("spr_CurrentLCStatus_Select", iDParameter)
    End Function

    Public Overridable Function spr_Deposits_ByDepositNumber_Select(depositNumber As String, fileID As Nullable(Of Integer)) As ObjectResult(Of spr_Deposits_ByDepositNumber_Select_Result)
        Dim depositNumberParameter As ObjectParameter = If(depositNumber IsNot Nothing, New ObjectParameter("DepositNumber", depositNumber), New ObjectParameter("DepositNumber", GetType(String)))

        Dim fileIDParameter As ObjectParameter = If(fileID.HasValue, New ObjectParameter("FileID", fileID), New ObjectParameter("FileID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_Deposits_ByDepositNumber_Select_Result)("spr_Deposits_ByDepositNumber_Select", depositNumberParameter, fileIDParameter)
    End Function

    Public Overridable Function spr_Deposits_Insert(fK_FileID As Nullable(Of Integer), fK_DepositTypeID As Nullable(Of Integer), depositAmount As Nullable(Of Double), fK_BranchID As Nullable(Of Integer), depositNumber As String, depositOpenDate As Nullable(Of Date)) As ObjectResult(Of Nullable(Of Decimal))
        Dim fK_FileIDParameter As ObjectParameter = If(fK_FileID.HasValue, New ObjectParameter("FK_FileID", fK_FileID), New ObjectParameter("FK_FileID", GetType(Integer)))

        Dim fK_DepositTypeIDParameter As ObjectParameter = If(fK_DepositTypeID.HasValue, New ObjectParameter("FK_DepositTypeID", fK_DepositTypeID), New ObjectParameter("FK_DepositTypeID", GetType(Integer)))

        Dim depositAmountParameter As ObjectParameter = If(depositAmount.HasValue, New ObjectParameter("DepositAmount", depositAmount), New ObjectParameter("DepositAmount", GetType(Double)))

        Dim fK_BranchIDParameter As ObjectParameter = If(fK_BranchID.HasValue, New ObjectParameter("FK_BranchID", fK_BranchID), New ObjectParameter("FK_BranchID", GetType(Integer)))

        Dim depositNumberParameter As ObjectParameter = If(depositNumber IsNot Nothing, New ObjectParameter("DepositNumber", depositNumber), New ObjectParameter("DepositNumber", GetType(String)))

        Dim depositOpenDateParameter As ObjectParameter = If(depositOpenDate.HasValue, New ObjectParameter("DepositOpenDate", depositOpenDate), New ObjectParameter("DepositOpenDate", GetType(Date)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of Nullable(Of Decimal))("spr_Deposits_Insert", fK_FileIDParameter, fK_DepositTypeIDParameter, depositAmountParameter, fK_BranchIDParameter, depositNumberParameter, depositOpenDateParameter)
    End Function

    Public Overridable Function spr_Deposits_Select(action As Nullable(Of Integer), iD As Nullable(Of Integer), fileID As Nullable(Of Integer), branchID As Nullable(Of Integer)) As ObjectResult(Of spr_Deposits_Select_Result)
        Dim actionParameter As ObjectParameter = If(action.HasValue, New ObjectParameter("Action", action), New ObjectParameter("Action", GetType(Integer)))

        Dim iDParameter As ObjectParameter = If(iD.HasValue, New ObjectParameter("ID", iD), New ObjectParameter("ID", GetType(Integer)))

        Dim fileIDParameter As ObjectParameter = If(fileID.HasValue, New ObjectParameter("FileID", fileID), New ObjectParameter("FileID", GetType(Integer)))

        Dim branchIDParameter As ObjectParameter = If(branchID.HasValue, New ObjectParameter("BranchID", branchID), New ObjectParameter("BranchID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_Deposits_Select_Result)("spr_Deposits_Select", actionParameter, iDParameter, fileIDParameter, branchIDParameter)
    End Function

    Public Overridable Function spr_DepositType_byCode_Select(depositTypeCode As String) As ObjectResult(Of spr_DepositType_byCode_Select_Result)
        Dim depositTypeCodeParameter As ObjectParameter = If(depositTypeCode IsNot Nothing, New ObjectParameter("DepositTypeCode", depositTypeCode), New ObjectParameter("DepositTypeCode", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_DepositType_byCode_Select_Result)("spr_DepositType_byCode_Select", depositTypeCodeParameter)
    End Function

    Public Overridable Function spr_DepositType_Count_Select(action As Nullable(Of Integer), sEARCHSTR As String) As ObjectResult(Of Nullable(Of Integer))
        Dim actionParameter As ObjectParameter = If(action.HasValue, New ObjectParameter("Action", action), New ObjectParameter("Action", GetType(Integer)))

        Dim sEARCHSTRParameter As ObjectParameter = If(sEARCHSTR IsNot Nothing, New ObjectParameter("SEARCHSTR", sEARCHSTR), New ObjectParameter("SEARCHSTR", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of Nullable(Of Integer))("spr_DepositType_Count_Select", actionParameter, sEARCHSTRParameter)
    End Function

    Public Overridable Function spr_DepositType_Delete(iD As Nullable(Of Integer)) As Integer
        Dim iDParameter As ObjectParameter = If(iD.HasValue, New ObjectParameter("ID", iD), New ObjectParameter("ID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_DepositType_Delete", iDParameter)
    End Function

    Public Overridable Function spr_DepositType_Insert(depositCode As String, depositName As String, fK_CUserID As Nullable(Of Integer)) As ObjectResult(Of Nullable(Of Decimal))
        Dim depositCodeParameter As ObjectParameter = If(depositCode IsNot Nothing, New ObjectParameter("DepositCode", depositCode), New ObjectParameter("DepositCode", GetType(String)))

        Dim depositNameParameter As ObjectParameter = If(depositName IsNot Nothing, New ObjectParameter("DepositName", depositName), New ObjectParameter("DepositName", GetType(String)))

        Dim fK_CUserIDParameter As ObjectParameter = If(fK_CUserID.HasValue, New ObjectParameter("FK_CUserID", fK_CUserID), New ObjectParameter("FK_CUserID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of Nullable(Of Decimal))("spr_DepositType_Insert", depositCodeParameter, depositNameParameter, fK_CUserIDParameter)
    End Function

    Public Overridable Function spr_DepositType_List_Select() As ObjectResult(Of spr_DepositType_List_Select_Result)
        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_DepositType_List_Select_Result)("spr_DepositType_List_Select")
    End Function

    Public Overridable Function spr_DepositType_Management_Select(action As Nullable(Of Integer), fromIndex As Nullable(Of Integer), toIndex As Nullable(Of Integer), sEARCHSTR As String) As ObjectResult(Of spr_DepositType_Management_Select_Result)
        Dim actionParameter As ObjectParameter = If(action.HasValue, New ObjectParameter("Action", action), New ObjectParameter("Action", GetType(Integer)))

        Dim fromIndexParameter As ObjectParameter = If(fromIndex.HasValue, New ObjectParameter("FromIndex", fromIndex), New ObjectParameter("FromIndex", GetType(Integer)))

        Dim toIndexParameter As ObjectParameter = If(toIndex.HasValue, New ObjectParameter("ToIndex", toIndex), New ObjectParameter("ToIndex", GetType(Integer)))

        Dim sEARCHSTRParameter As ObjectParameter = If(sEARCHSTR IsNot Nothing, New ObjectParameter("SEARCHSTR", sEARCHSTR), New ObjectParameter("SEARCHSTR", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_DepositType_Management_Select_Result)("spr_DepositType_Management_Select", actionParameter, fromIndexParameter, toIndexParameter, sEARCHSTRParameter)
    End Function

    Public Overridable Function spr_DepositType_Select(action As Nullable(Of Integer), iD As Nullable(Of Integer)) As ObjectResult(Of spr_DepositType_Select_Result)
        Dim actionParameter As ObjectParameter = If(action.HasValue, New ObjectParameter("Action", action), New ObjectParameter("Action", GetType(Integer)))

        Dim iDParameter As ObjectParameter = If(iD.HasValue, New ObjectParameter("ID", iD), New ObjectParameter("ID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_DepositType_Select_Result)("spr_DepositType_Select", actionParameter, iDParameter)
    End Function

    Public Overridable Function spr_DepositType_Update(iD As Nullable(Of Integer), depositCode As String, depositName As String, fK_CUserID As Nullable(Of Integer)) As Integer
        Dim iDParameter As ObjectParameter = If(iD.HasValue, New ObjectParameter("ID", iD), New ObjectParameter("ID", GetType(Integer)))

        Dim depositCodeParameter As ObjectParameter = If(depositCode IsNot Nothing, New ObjectParameter("DepositCode", depositCode), New ObjectParameter("DepositCode", GetType(String)))

        Dim depositNameParameter As ObjectParameter = If(depositName IsNot Nothing, New ObjectParameter("DepositName", depositName), New ObjectParameter("DepositName", GetType(String)))

        Dim fK_CUserIDParameter As ObjectParameter = If(fK_CUserID.HasValue, New ObjectParameter("FK_CUserID", fK_CUserID), New ObjectParameter("FK_CUserID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_DepositType_Update", iDParameter, depositCodeParameter, depositNameParameter, fK_CUserIDParameter)
    End Function

    Public Overridable Function spr_DraftText_Delete(fK_WarningIntervalsID As Nullable(Of Integer), draftType As Nullable(Of Byte), toSponsor As Nullable(Of Boolean)) As Integer
        Dim fK_WarningIntervalsIDParameter As ObjectParameter = If(fK_WarningIntervalsID.HasValue, New ObjectParameter("FK_WarningIntervalsID", fK_WarningIntervalsID), New ObjectParameter("FK_WarningIntervalsID", GetType(Integer)))

        Dim draftTypeParameter As ObjectParameter = If(draftType.HasValue, New ObjectParameter("DraftType", draftType), New ObjectParameter("DraftType", GetType(Byte)))

        Dim toSponsorParameter As ObjectParameter = If(toSponsor.HasValue, New ObjectParameter("ToSponsor", toSponsor), New ObjectParameter("ToSponsor", GetType(Boolean)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_DraftText_Delete", fK_WarningIntervalsIDParameter, draftTypeParameter, toSponsorParameter)
    End Function

    Public Overridable Function spr_DraftText_Insert(orderInLevel As Nullable(Of Integer), warningIntervalsID As Nullable(Of Integer), draftText As String, isDynamic As Nullable(Of Boolean), draftType As Nullable(Of Byte), toSpnsor As Nullable(Of Boolean), fK_VoiceRecordID As Nullable(Of Integer)) As Integer
        Dim orderInLevelParameter As ObjectParameter = If(orderInLevel.HasValue, New ObjectParameter("OrderInLevel", orderInLevel), New ObjectParameter("OrderInLevel", GetType(Integer)))

        Dim warningIntervalsIDParameter As ObjectParameter = If(warningIntervalsID.HasValue, New ObjectParameter("WarningIntervalsID", warningIntervalsID), New ObjectParameter("WarningIntervalsID", GetType(Integer)))

        Dim draftTextParameter As ObjectParameter = If(draftText IsNot Nothing, New ObjectParameter("DraftText", draftText), New ObjectParameter("DraftText", GetType(String)))

        Dim isDynamicParameter As ObjectParameter = If(isDynamic.HasValue, New ObjectParameter("IsDynamic", isDynamic), New ObjectParameter("IsDynamic", GetType(Boolean)))

        Dim draftTypeParameter As ObjectParameter = If(draftType.HasValue, New ObjectParameter("DraftType", draftType), New ObjectParameter("DraftType", GetType(Byte)))

        Dim toSpnsorParameter As ObjectParameter = If(toSpnsor.HasValue, New ObjectParameter("ToSpnsor", toSpnsor), New ObjectParameter("ToSpnsor", GetType(Boolean)))

        Dim fK_VoiceRecordIDParameter As ObjectParameter = If(fK_VoiceRecordID.HasValue, New ObjectParameter("FK_VoiceRecordID", fK_VoiceRecordID), New ObjectParameter("FK_VoiceRecordID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_DraftText_Insert", orderInLevelParameter, warningIntervalsIDParameter, draftTextParameter, isDynamicParameter, draftTypeParameter, toSpnsorParameter, fK_VoiceRecordIDParameter)
    End Function

    Public Overridable Function spr_DraftText_List_Select(draftTypeID As Nullable(Of Integer), toSponsor As Nullable(Of Boolean), warningIntervalID As Nullable(Of Integer)) As ObjectResult(Of spr_DraftText_List_Select_Result)
        Dim draftTypeIDParameter As ObjectParameter = If(draftTypeID.HasValue, New ObjectParameter("DraftTypeID", draftTypeID), New ObjectParameter("DraftTypeID", GetType(Integer)))

        Dim toSponsorParameter As ObjectParameter = If(toSponsor.HasValue, New ObjectParameter("ToSponsor", toSponsor), New ObjectParameter("ToSponsor", GetType(Boolean)))

        Dim warningIntervalIDParameter As ObjectParameter = If(warningIntervalID.HasValue, New ObjectParameter("WarningIntervalID", warningIntervalID), New ObjectParameter("WarningIntervalID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_DraftText_List_Select_Result)("spr_DraftText_List_Select", draftTypeIDParameter, toSponsorParameter, warningIntervalIDParameter)
    End Function

    Public Overridable Function spr_DraftText_Select(action As Nullable(Of Integer), iD As Nullable(Of Integer), draftType As Nullable(Of Byte), warningIntervalsID As Nullable(Of Integer), toSponsor As Nullable(Of Boolean)) As ObjectResult(Of spr_DraftText_Select_Result)
        Dim actionParameter As ObjectParameter = If(action.HasValue, New ObjectParameter("Action", action), New ObjectParameter("Action", GetType(Integer)))

        Dim iDParameter As ObjectParameter = If(iD.HasValue, New ObjectParameter("ID", iD), New ObjectParameter("ID", GetType(Integer)))

        Dim draftTypeParameter As ObjectParameter = If(draftType.HasValue, New ObjectParameter("DraftType", draftType), New ObjectParameter("DraftType", GetType(Byte)))

        Dim warningIntervalsIDParameter As ObjectParameter = If(warningIntervalsID.HasValue, New ObjectParameter("WarningIntervalsID", warningIntervalsID), New ObjectParameter("WarningIntervalsID", GetType(Integer)))

        Dim toSponsorParameter As ObjectParameter = If(toSponsor.HasValue, New ObjectParameter("ToSponsor", toSponsor), New ObjectParameter("ToSponsor", GetType(Boolean)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_DraftText_Select_Result)("spr_DraftText_Select", actionParameter, iDParameter, draftTypeParameter, warningIntervalsIDParameter, toSponsorParameter)
    End Function

    Public Overridable Function spr_DraftText_Update(iD As Nullable(Of Integer), warningIntervalsID As Nullable(Of Integer), orderInLevel As Nullable(Of Integer), draftText As String, isDynamic As Nullable(Of Boolean), draftType As Nullable(Of Byte), toSponsor As Nullable(Of Boolean), fK_VoiceRecordID As Nullable(Of Integer)) As Integer
        Dim iDParameter As ObjectParameter = If(iD.HasValue, New ObjectParameter("ID", iD), New ObjectParameter("ID", GetType(Integer)))

        Dim warningIntervalsIDParameter As ObjectParameter = If(warningIntervalsID.HasValue, New ObjectParameter("WarningIntervalsID", warningIntervalsID), New ObjectParameter("WarningIntervalsID", GetType(Integer)))

        Dim orderInLevelParameter As ObjectParameter = If(orderInLevel.HasValue, New ObjectParameter("OrderInLevel", orderInLevel), New ObjectParameter("OrderInLevel", GetType(Integer)))

        Dim draftTextParameter As ObjectParameter = If(draftText IsNot Nothing, New ObjectParameter("DraftText", draftText), New ObjectParameter("DraftText", GetType(String)))

        Dim isDynamicParameter As ObjectParameter = If(isDynamic.HasValue, New ObjectParameter("IsDynamic", isDynamic), New ObjectParameter("IsDynamic", GetType(Boolean)))

        Dim draftTypeParameter As ObjectParameter = If(draftType.HasValue, New ObjectParameter("DraftType", draftType), New ObjectParameter("DraftType", GetType(Byte)))

        Dim toSponsorParameter As ObjectParameter = If(toSponsor.HasValue, New ObjectParameter("ToSponsor", toSponsor), New ObjectParameter("ToSponsor", GetType(Boolean)))

        Dim fK_VoiceRecordIDParameter As ObjectParameter = If(fK_VoiceRecordID.HasValue, New ObjectParameter("FK_VoiceRecordID", fK_VoiceRecordID), New ObjectParameter("FK_VoiceRecordID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_DraftText_Update", iDParameter, warningIntervalsIDParameter, orderInLevelParameter, draftTextParameter, isDynamicParameter, draftTypeParameter, toSponsorParameter, fK_VoiceRecordIDParameter)
    End Function

    Public Overridable Function spr_ErrorLog_Insert(errorMessage As String, errorType As Nullable(Of Byte), errorName As String) As Integer
        Dim errorMessageParameter As ObjectParameter = If(errorMessage IsNot Nothing, New ObjectParameter("ErrorMessage", errorMessage), New ObjectParameter("ErrorMessage", GetType(String)))

        Dim errorTypeParameter As ObjectParameter = If(errorType.HasValue, New ObjectParameter("ErrorType", errorType), New ObjectParameter("ErrorType", GetType(Byte)))

        Dim errorNameParameter As ObjectParameter = If(errorName IsNot Nothing, New ObjectParameter("ErrorName", errorName), New ObjectParameter("ErrorName", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_ErrorLog_Insert", errorMessageParameter, errorTypeParameter, errorNameParameter)
    End Function

    Public Overridable Function spr_File_Count_Select(action As Nullable(Of Integer), sEARCHSTR As String, branchID As Nullable(Of Integer), provinceID As Nullable(Of Integer)) As ObjectResult(Of Nullable(Of Integer))
        Dim actionParameter As ObjectParameter = If(action.HasValue, New ObjectParameter("Action", action), New ObjectParameter("Action", GetType(Integer)))

        Dim sEARCHSTRParameter As ObjectParameter = If(sEARCHSTR IsNot Nothing, New ObjectParameter("SEARCHSTR", sEARCHSTR), New ObjectParameter("SEARCHSTR", GetType(String)))

        Dim branchIDParameter As ObjectParameter = If(branchID.HasValue, New ObjectParameter("BranchID", branchID), New ObjectParameter("BranchID", GetType(Integer)))

        Dim provinceIDParameter As ObjectParameter = If(provinceID.HasValue, New ObjectParameter("ProvinceID", provinceID), New ObjectParameter("ProvinceID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of Nullable(Of Integer))("spr_File_Count_Select", actionParameter, sEARCHSTRParameter, branchIDParameter, provinceIDParameter)
    End Function

    Public Overridable Function spr_File_CustomerNo_Select(customerNo As String) As ObjectResult(Of spr_File_CustomerNo_Select_Result)
        Dim customerNoParameter As ObjectParameter = If(customerNo IsNot Nothing, New ObjectParameter("CustomerNo", customerNo), New ObjectParameter("CustomerNo", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_File_CustomerNo_Select_Result)("spr_File_CustomerNo_Select", customerNoParameter)
    End Function

    Public Overridable Function spr_File_Delete(iD As Nullable(Of Integer)) As Integer
        Dim iDParameter As ObjectParameter = If(iD.HasValue, New ObjectParameter("ID", iD), New ObjectParameter("ID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_File_Delete", iDParameter)
    End Function

    Public Overridable Function spr_File_Insert(customerNo As String, fName As String, lName As String, fatherName As String, mobileNo As String, nationalID As String, iDNumber As String, email As String, address As String, telephoneHome As String, telephoneWork As String, isMale As Nullable(Of Boolean), fK_CUserID As Nullable(Of Integer), state As Nullable(Of Byte), fK_OriginalFileID As Nullable(Of Integer), fK_RequestUserID As Nullable(Of Integer)) As ObjectResult(Of Nullable(Of Decimal))
        Dim customerNoParameter As ObjectParameter = If(customerNo IsNot Nothing, New ObjectParameter("CustomerNo", customerNo), New ObjectParameter("CustomerNo", GetType(String)))

        Dim fNameParameter As ObjectParameter = If(fName IsNot Nothing, New ObjectParameter("FName", fName), New ObjectParameter("FName", GetType(String)))

        Dim lNameParameter As ObjectParameter = If(lName IsNot Nothing, New ObjectParameter("LName", lName), New ObjectParameter("LName", GetType(String)))

        Dim fatherNameParameter As ObjectParameter = If(fatherName IsNot Nothing, New ObjectParameter("FatherName", fatherName), New ObjectParameter("FatherName", GetType(String)))

        Dim mobileNoParameter As ObjectParameter = If(mobileNo IsNot Nothing, New ObjectParameter("MobileNo", mobileNo), New ObjectParameter("MobileNo", GetType(String)))

        Dim nationalIDParameter As ObjectParameter = If(nationalID IsNot Nothing, New ObjectParameter("NationalID", nationalID), New ObjectParameter("NationalID", GetType(String)))

        Dim iDNumberParameter As ObjectParameter = If(iDNumber IsNot Nothing, New ObjectParameter("IDNumber", iDNumber), New ObjectParameter("IDNumber", GetType(String)))

        Dim emailParameter As ObjectParameter = If(email IsNot Nothing, New ObjectParameter("Email", email), New ObjectParameter("Email", GetType(String)))

        Dim addressParameter As ObjectParameter = If(address IsNot Nothing, New ObjectParameter("Address", address), New ObjectParameter("Address", GetType(String)))

        Dim telephoneHomeParameter As ObjectParameter = If(telephoneHome IsNot Nothing, New ObjectParameter("TelephoneHome", telephoneHome), New ObjectParameter("TelephoneHome", GetType(String)))

        Dim telephoneWorkParameter As ObjectParameter = If(telephoneWork IsNot Nothing, New ObjectParameter("TelephoneWork", telephoneWork), New ObjectParameter("TelephoneWork", GetType(String)))

        Dim isMaleParameter As ObjectParameter = If(isMale.HasValue, New ObjectParameter("IsMale", isMale), New ObjectParameter("IsMale", GetType(Boolean)))

        Dim fK_CUserIDParameter As ObjectParameter = If(fK_CUserID.HasValue, New ObjectParameter("FK_CUserID", fK_CUserID), New ObjectParameter("FK_CUserID", GetType(Integer)))

        Dim stateParameter As ObjectParameter = If(state.HasValue, New ObjectParameter("State", state), New ObjectParameter("State", GetType(Byte)))

        Dim fK_OriginalFileIDParameter As ObjectParameter = If(fK_OriginalFileID.HasValue, New ObjectParameter("FK_OriginalFileID", fK_OriginalFileID), New ObjectParameter("FK_OriginalFileID", GetType(Integer)))

        Dim fK_RequestUserIDParameter As ObjectParameter = If(fK_RequestUserID.HasValue, New ObjectParameter("FK_RequestUserID", fK_RequestUserID), New ObjectParameter("FK_RequestUserID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of Nullable(Of Decimal))("spr_File_Insert", customerNoParameter, fNameParameter, lNameParameter, fatherNameParameter, mobileNoParameter, nationalIDParameter, iDNumberParameter, emailParameter, addressParameter, telephoneHomeParameter, telephoneWorkParameter, isMaleParameter, fK_CUserIDParameter, stateParameter, fK_OriginalFileIDParameter, fK_RequestUserIDParameter)
    End Function

    Public Overridable Function spr_File_List_Select() As ObjectResult(Of spr_File_List_Select_Result)
        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_File_List_Select_Result)("spr_File_List_Select")
    End Function

    Public Overridable Function spr_File_Management_Select(action As Nullable(Of Integer), fromIndex As Nullable(Of Integer), toIndex As Nullable(Of Integer), sEARCHSTR As String, branchID As Nullable(Of Integer), provinceID As Nullable(Of Integer)) As ObjectResult(Of spr_File_Management_Select_Result)
        Dim actionParameter As ObjectParameter = If(action.HasValue, New ObjectParameter("Action", action), New ObjectParameter("Action", GetType(Integer)))

        Dim fromIndexParameter As ObjectParameter = If(fromIndex.HasValue, New ObjectParameter("FromIndex", fromIndex), New ObjectParameter("FromIndex", GetType(Integer)))

        Dim toIndexParameter As ObjectParameter = If(toIndex.HasValue, New ObjectParameter("ToIndex", toIndex), New ObjectParameter("ToIndex", GetType(Integer)))

        Dim sEARCHSTRParameter As ObjectParameter = If(sEARCHSTR IsNot Nothing, New ObjectParameter("SEARCHSTR", sEARCHSTR), New ObjectParameter("SEARCHSTR", GetType(String)))

        Dim branchIDParameter As ObjectParameter = If(branchID.HasValue, New ObjectParameter("BranchID", branchID), New ObjectParameter("BranchID", GetType(Integer)))

        Dim provinceIDParameter As ObjectParameter = If(provinceID.HasValue, New ObjectParameter("ProvinceID", provinceID), New ObjectParameter("ProvinceID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_File_Management_Select_Result)("spr_File_Management_Select", actionParameter, fromIndexParameter, toIndexParameter, sEARCHSTRParameter, branchIDParameter, provinceIDParameter)
    End Function

    Public Overridable Function spr_File_MAT_Update(iD As Nullable(Of Integer), mobileNo As String, address As String, telHome As String, telWork As String, fName As String, lName As String, fatherName As String, isMale As Nullable(Of Boolean)) As Integer
        Dim iDParameter As ObjectParameter = If(iD.HasValue, New ObjectParameter("ID", iD), New ObjectParameter("ID", GetType(Integer)))

        Dim mobileNoParameter As ObjectParameter = If(mobileNo IsNot Nothing, New ObjectParameter("MobileNo", mobileNo), New ObjectParameter("MobileNo", GetType(String)))

        Dim addressParameter As ObjectParameter = If(address IsNot Nothing, New ObjectParameter("Address", address), New ObjectParameter("Address", GetType(String)))

        Dim telHomeParameter As ObjectParameter = If(telHome IsNot Nothing, New ObjectParameter("TelHome", telHome), New ObjectParameter("TelHome", GetType(String)))

        Dim telWorkParameter As ObjectParameter = If(telWork IsNot Nothing, New ObjectParameter("TelWork", telWork), New ObjectParameter("TelWork", GetType(String)))

        Dim fNameParameter As ObjectParameter = If(fName IsNot Nothing, New ObjectParameter("FName", fName), New ObjectParameter("FName", GetType(String)))

        Dim lNameParameter As ObjectParameter = If(lName IsNot Nothing, New ObjectParameter("LName", lName), New ObjectParameter("LName", GetType(String)))

        Dim fatherNameParameter As ObjectParameter = If(fatherName IsNot Nothing, New ObjectParameter("FatherName", fatherName), New ObjectParameter("FatherName", GetType(String)))

        Dim isMaleParameter As ObjectParameter = If(isMale.HasValue, New ObjectParameter("IsMale", isMale), New ObjectParameter("IsMale", GetType(Boolean)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_File_MAT_Update", iDParameter, mobileNoParameter, addressParameter, telHomeParameter, telWorkParameter, fNameParameter, lNameParameter, fatherNameParameter, isMaleParameter)
    End Function

    Public Overridable Function spr_File_Select(action As Nullable(Of Integer), iD As Nullable(Of Integer)) As ObjectResult(Of spr_File_Select_Result)
        Dim actionParameter As ObjectParameter = If(action.HasValue, New ObjectParameter("Action", action), New ObjectParameter("Action", GetType(Integer)))

        Dim iDParameter As ObjectParameter = If(iD.HasValue, New ObjectParameter("ID", iD), New ObjectParameter("ID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_File_Select_Result)("spr_File_Select", actionParameter, iDParameter)
    End Function

    Public Overridable Function spr_File_Update(iD As Nullable(Of Integer), customerNo As String, fName As String, lName As String, fatherName As String, mobileNo As String, nationalID As String, iDNumber As String, email As String, address As String, telephoneHome As String, telephoneWork As String, isMale As Nullable(Of Boolean), fK_EUserID As Nullable(Of Integer), state As Nullable(Of Byte)) As Integer
        Dim iDParameter As ObjectParameter = If(iD.HasValue, New ObjectParameter("ID", iD), New ObjectParameter("ID", GetType(Integer)))

        Dim customerNoParameter As ObjectParameter = If(customerNo IsNot Nothing, New ObjectParameter("CustomerNo", customerNo), New ObjectParameter("CustomerNo", GetType(String)))

        Dim fNameParameter As ObjectParameter = If(fName IsNot Nothing, New ObjectParameter("FName", fName), New ObjectParameter("FName", GetType(String)))

        Dim lNameParameter As ObjectParameter = If(lName IsNot Nothing, New ObjectParameter("LName", lName), New ObjectParameter("LName", GetType(String)))

        Dim fatherNameParameter As ObjectParameter = If(fatherName IsNot Nothing, New ObjectParameter("FatherName", fatherName), New ObjectParameter("FatherName", GetType(String)))

        Dim mobileNoParameter As ObjectParameter = If(mobileNo IsNot Nothing, New ObjectParameter("MobileNo", mobileNo), New ObjectParameter("MobileNo", GetType(String)))

        Dim nationalIDParameter As ObjectParameter = If(nationalID IsNot Nothing, New ObjectParameter("NationalID", nationalID), New ObjectParameter("NationalID", GetType(String)))

        Dim iDNumberParameter As ObjectParameter = If(iDNumber IsNot Nothing, New ObjectParameter("IDNumber", iDNumber), New ObjectParameter("IDNumber", GetType(String)))

        Dim emailParameter As ObjectParameter = If(email IsNot Nothing, New ObjectParameter("Email", email), New ObjectParameter("Email", GetType(String)))

        Dim addressParameter As ObjectParameter = If(address IsNot Nothing, New ObjectParameter("Address", address), New ObjectParameter("Address", GetType(String)))

        Dim telephoneHomeParameter As ObjectParameter = If(telephoneHome IsNot Nothing, New ObjectParameter("TelephoneHome", telephoneHome), New ObjectParameter("TelephoneHome", GetType(String)))

        Dim telephoneWorkParameter As ObjectParameter = If(telephoneWork IsNot Nothing, New ObjectParameter("TelephoneWork", telephoneWork), New ObjectParameter("TelephoneWork", GetType(String)))

        Dim isMaleParameter As ObjectParameter = If(isMale.HasValue, New ObjectParameter("IsMale", isMale), New ObjectParameter("IsMale", GetType(Boolean)))

        Dim fK_EUserIDParameter As ObjectParameter = If(fK_EUserID.HasValue, New ObjectParameter("FK_EUserID", fK_EUserID), New ObjectParameter("FK_EUserID", GetType(Integer)))

        Dim stateParameter As ObjectParameter = If(state.HasValue, New ObjectParameter("State", state), New ObjectParameter("State", GetType(Byte)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_File_Update", iDParameter, customerNoParameter, fNameParameter, lNameParameter, fatherNameParameter, mobileNoParameter, nationalIDParameter, iDNumberParameter, emailParameter, addressParameter, telephoneHomeParameter, telephoneWorkParameter, isMaleParameter, fK_EUserIDParameter, stateParameter)
    End Function

    Public Overridable Function spr_File_UpdateOrginalFile(fileID As Nullable(Of Integer)) As Integer
        Dim fileIDParameter As ObjectParameter = If(fileID.HasValue, New ObjectParameter("FileID", fileID), New ObjectParameter("FileID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_File_UpdateOrginalFile", fileIDParameter)
    End Function

    Public Overridable Function spr_FileChanges_Report(action As Nullable(Of Integer), from As Nullable(Of Date), [to] As Nullable(Of Date), parameter As String) As ObjectResult(Of spr_FileChanges_Report_Result)
        Dim actionParameter As ObjectParameter = If(action.HasValue, New ObjectParameter("Action", action), New ObjectParameter("Action", GetType(Integer)))

        Dim fromParameter As ObjectParameter = If(from.HasValue, New ObjectParameter("From", from), New ObjectParameter("From", GetType(Date)))

        Dim toParameter As ObjectParameter = If([to].HasValue, New ObjectParameter("To", [to]), New ObjectParameter("To", GetType(Date)))

        Dim parameterParameter As ObjectParameter = If(parameter IsNot Nothing, New ObjectParameter("Parameter", parameter), New ObjectParameter("Parameter", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_FileChanges_Report_Result)("spr_FileChanges_Report", actionParameter, fromParameter, toParameter, parameterParameter)
    End Function

    Public Overridable Function spr_FileRequests_Count_Select(action As Nullable(Of Integer), sEARCHSTR As String, branchID As Nullable(Of Integer), provinceID As Nullable(Of Integer)) As ObjectResult(Of Nullable(Of Integer))
        Dim actionParameter As ObjectParameter = If(action.HasValue, New ObjectParameter("Action", action), New ObjectParameter("Action", GetType(Integer)))

        Dim sEARCHSTRParameter As ObjectParameter = If(sEARCHSTR IsNot Nothing, New ObjectParameter("SEARCHSTR", sEARCHSTR), New ObjectParameter("SEARCHSTR", GetType(String)))

        Dim branchIDParameter As ObjectParameter = If(branchID.HasValue, New ObjectParameter("BranchID", branchID), New ObjectParameter("BranchID", GetType(Integer)))

        Dim provinceIDParameter As ObjectParameter = If(provinceID.HasValue, New ObjectParameter("ProvinceID", provinceID), New ObjectParameter("ProvinceID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of Nullable(Of Integer))("spr_FileRequests_Count_Select", actionParameter, sEARCHSTRParameter, branchIDParameter, provinceIDParameter)
    End Function

    Public Overridable Function spr_FileRequests_Management_Select(action As Nullable(Of Integer), fromIndex As Nullable(Of Integer), toIndex As Nullable(Of Integer), sEARCHSTR As String, branchID As Nullable(Of Integer), provinceID As Nullable(Of Integer)) As ObjectResult(Of spr_FileRequests_Management_Select_Result)
        Dim actionParameter As ObjectParameter = If(action.HasValue, New ObjectParameter("Action", action), New ObjectParameter("Action", GetType(Integer)))

        Dim fromIndexParameter As ObjectParameter = If(fromIndex.HasValue, New ObjectParameter("FromIndex", fromIndex), New ObjectParameter("FromIndex", GetType(Integer)))

        Dim toIndexParameter As ObjectParameter = If(toIndex.HasValue, New ObjectParameter("ToIndex", toIndex), New ObjectParameter("ToIndex", GetType(Integer)))

        Dim sEARCHSTRParameter As ObjectParameter = If(sEARCHSTR IsNot Nothing, New ObjectParameter("SEARCHSTR", sEARCHSTR), New ObjectParameter("SEARCHSTR", GetType(String)))

        Dim branchIDParameter As ObjectParameter = If(branchID.HasValue, New ObjectParameter("BranchID", branchID), New ObjectParameter("BranchID", GetType(Integer)))

        Dim provinceIDParameter As ObjectParameter = If(provinceID.HasValue, New ObjectParameter("ProvinceID", provinceID), New ObjectParameter("ProvinceID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_FileRequests_Management_Select_Result)("spr_FileRequests_Management_Select", actionParameter, fromIndexParameter, toIndexParameter, sEARCHSTRParameter, branchIDParameter, provinceIDParameter)
    End Function

    Public Overridable Function spr_FileState_Update(iD As Nullable(Of Integer), fK_EUserID As Nullable(Of Integer), state As Nullable(Of Byte), fK_OriginalFileID As Nullable(Of Integer)) As Integer
        Dim iDParameter As ObjectParameter = If(iD.HasValue, New ObjectParameter("ID", iD), New ObjectParameter("ID", GetType(Integer)))

        Dim fK_EUserIDParameter As ObjectParameter = If(fK_EUserID.HasValue, New ObjectParameter("FK_EUserID", fK_EUserID), New ObjectParameter("FK_EUserID", GetType(Integer)))

        Dim stateParameter As ObjectParameter = If(state.HasValue, New ObjectParameter("State", state), New ObjectParameter("State", GetType(Byte)))

        Dim fK_OriginalFileIDParameter As ObjectParameter = If(fK_OriginalFileID.HasValue, New ObjectParameter("FK_OriginalFileID", fK_OriginalFileID), New ObjectParameter("FK_OriginalFileID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_FileState_Update", iDParameter, fK_EUserIDParameter, stateParameter, fK_OriginalFileIDParameter)
    End Function

    Public Overridable Function spr_HadiDraftText_Delete(fK_HadiWarningIntervalsID As Nullable(Of Integer)) As Integer
        Dim fK_HadiWarningIntervalsIDParameter As ObjectParameter = If(fK_HadiWarningIntervalsID.HasValue, New ObjectParameter("FK_HadiWarningIntervalsID", fK_HadiWarningIntervalsID), New ObjectParameter("FK_HadiWarningIntervalsID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_HadiDraftText_Delete", fK_HadiWarningIntervalsIDParameter)
    End Function

    Public Overridable Function spr_HadiDraftText_Insert(orderInLevel As Nullable(Of Integer), hadiWarningIntervalsID As Nullable(Of Integer), draftText As String, isDynamic As Nullable(Of Boolean), fK_VoiceRecordID As Nullable(Of Integer)) As Integer
        Dim orderInLevelParameter As ObjectParameter = If(orderInLevel.HasValue, New ObjectParameter("OrderInLevel", orderInLevel), New ObjectParameter("OrderInLevel", GetType(Integer)))

        Dim hadiWarningIntervalsIDParameter As ObjectParameter = If(hadiWarningIntervalsID.HasValue, New ObjectParameter("HadiWarningIntervalsID", hadiWarningIntervalsID), New ObjectParameter("HadiWarningIntervalsID", GetType(Integer)))

        Dim draftTextParameter As ObjectParameter = If(draftText IsNot Nothing, New ObjectParameter("DraftText", draftText), New ObjectParameter("DraftText", GetType(String)))

        Dim isDynamicParameter As ObjectParameter = If(isDynamic.HasValue, New ObjectParameter("IsDynamic", isDynamic), New ObjectParameter("IsDynamic", GetType(Boolean)))

        Dim fK_VoiceRecordIDParameter As ObjectParameter = If(fK_VoiceRecordID.HasValue, New ObjectParameter("FK_VoiceRecordID", fK_VoiceRecordID), New ObjectParameter("FK_VoiceRecordID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_HadiDraftText_Insert", orderInLevelParameter, hadiWarningIntervalsIDParameter, draftTextParameter, isDynamicParameter, fK_VoiceRecordIDParameter)
    End Function

    Public Overridable Function spr_HadiDraftText_List_Select(hadiWarningIntervalID As Nullable(Of Integer)) As ObjectResult(Of spr_HadiDraftText_List_Select_Result)
        Dim hadiWarningIntervalIDParameter As ObjectParameter = If(hadiWarningIntervalID.HasValue, New ObjectParameter("HadiWarningIntervalID", hadiWarningIntervalID), New ObjectParameter("HadiWarningIntervalID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_HadiDraftText_List_Select_Result)("spr_HadiDraftText_List_Select", hadiWarningIntervalIDParameter)
    End Function

    Public Overridable Function spr_HadiDraftText_Select(action As Nullable(Of Integer), iD As Nullable(Of Integer), hadiWarningIntervalsID As Nullable(Of Integer)) As ObjectResult(Of spr_HadiDraftText_Select_Result)
        Dim actionParameter As ObjectParameter = If(action.HasValue, New ObjectParameter("Action", action), New ObjectParameter("Action", GetType(Integer)))

        Dim iDParameter As ObjectParameter = If(iD.HasValue, New ObjectParameter("ID", iD), New ObjectParameter("ID", GetType(Integer)))

        Dim hadiWarningIntervalsIDParameter As ObjectParameter = If(hadiWarningIntervalsID.HasValue, New ObjectParameter("HadiWarningIntervalsID", hadiWarningIntervalsID), New ObjectParameter("HadiWarningIntervalsID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_HadiDraftText_Select_Result)("spr_HadiDraftText_Select", actionParameter, iDParameter, hadiWarningIntervalsIDParameter)
    End Function

    Public Overridable Function spr_HadiDraftText_Update(iD As Nullable(Of Integer), hadiWarningIntervalsID As Nullable(Of Integer), orderInLevel As Nullable(Of Integer), draftText As String, isDynamic As Nullable(Of Boolean), fK_VoiceRecordID As Nullable(Of Integer)) As Integer
        Dim iDParameter As ObjectParameter = If(iD.HasValue, New ObjectParameter("ID", iD), New ObjectParameter("ID", GetType(Integer)))

        Dim hadiWarningIntervalsIDParameter As ObjectParameter = If(hadiWarningIntervalsID.HasValue, New ObjectParameter("HadiWarningIntervalsID", hadiWarningIntervalsID), New ObjectParameter("HadiWarningIntervalsID", GetType(Integer)))

        Dim orderInLevelParameter As ObjectParameter = If(orderInLevel.HasValue, New ObjectParameter("OrderInLevel", orderInLevel), New ObjectParameter("OrderInLevel", GetType(Integer)))

        Dim draftTextParameter As ObjectParameter = If(draftText IsNot Nothing, New ObjectParameter("DraftText", draftText), New ObjectParameter("DraftText", GetType(String)))

        Dim isDynamicParameter As ObjectParameter = If(isDynamic.HasValue, New ObjectParameter("IsDynamic", isDynamic), New ObjectParameter("IsDynamic", GetType(Boolean)))

        Dim fK_VoiceRecordIDParameter As ObjectParameter = If(fK_VoiceRecordID.HasValue, New ObjectParameter("FK_VoiceRecordID", fK_VoiceRecordID), New ObjectParameter("FK_VoiceRecordID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_HadiDraftText_Update", iDParameter, hadiWarningIntervalsIDParameter, orderInLevelParameter, draftTextParameter, isDynamicParameter, fK_VoiceRecordIDParameter)
    End Function

    Public Overridable Function spr_HadiLogCurrentLCStatus_H_ForDate_Select([date] As Nullable(Of Date)) As ObjectResult(Of spr_HadiLogCurrentLCStatus_H_ForDate_Select_Result)
        Dim dateParameter As ObjectParameter = If([date].HasValue, New ObjectParameter("Date", [date]), New ObjectParameter("Date", GetType(Date)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_HadiLogCurrentLCStatus_H_ForDate_Select_Result)("spr_HadiLogCurrentLCStatus_H_ForDate_Select", dateParameter)
    End Function

    Public Overridable Function spr_HadiLogCurrentLCStatus_H_Insert([date] As Nullable(Of Date), sTime As Nullable(Of Date), success As Nullable(Of Boolean), remarks As String, tryTime As Nullable(Of Integer)) As ObjectResult(Of Nullable(Of Decimal))
        Dim dateParameter As ObjectParameter = If([date].HasValue, New ObjectParameter("Date", [date]), New ObjectParameter("Date", GetType(Date)))

        Dim sTimeParameter As ObjectParameter = If(sTime.HasValue, New ObjectParameter("STime", sTime), New ObjectParameter("STime", GetType(Date)))

        Dim successParameter As ObjectParameter = If(success.HasValue, New ObjectParameter("Success", success), New ObjectParameter("Success", GetType(Boolean)))

        Dim remarksParameter As ObjectParameter = If(remarks IsNot Nothing, New ObjectParameter("Remarks", remarks), New ObjectParameter("Remarks", GetType(String)))

        Dim tryTimeParameter As ObjectParameter = If(tryTime.HasValue, New ObjectParameter("tryTime", tryTime), New ObjectParameter("tryTime", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of Nullable(Of Decimal))("spr_HadiLogCurrentLCStatus_H_Insert", dateParameter, sTimeParameter, successParameter, remarksParameter, tryTimeParameter)
    End Function

    Public Overridable Function spr_HadiLogLoanStatus_ForDate_Select([date] As Nullable(Of Date)) As ObjectResult(Of spr_HadiLogLoanStatus_ForDate_Select_Result)
        Dim dateParameter As ObjectParameter = If([date].HasValue, New ObjectParameter("Date", [date]), New ObjectParameter("Date", GetType(Date)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_HadiLogLoanStatus_ForDate_Select_Result)("spr_HadiLogLoanStatus_ForDate_Select", dateParameter)
    End Function

    Public Overridable Function spr_HadiLogLoanStatus_Insert([date] As Nullable(Of Date), sTime As Nullable(Of Date), success As Nullable(Of Boolean), remarks As String, tryTime As Nullable(Of Integer)) As ObjectResult(Of Nullable(Of Decimal))
        Dim dateParameter As ObjectParameter = If([date].HasValue, New ObjectParameter("Date", [date]), New ObjectParameter("Date", GetType(Date)))

        Dim sTimeParameter As ObjectParameter = If(sTime.HasValue, New ObjectParameter("STime", sTime), New ObjectParameter("STime", GetType(Date)))

        Dim successParameter As ObjectParameter = If(success.HasValue, New ObjectParameter("Success", success), New ObjectParameter("Success", GetType(Boolean)))

        Dim remarksParameter As ObjectParameter = If(remarks IsNot Nothing, New ObjectParameter("Remarks", remarks), New ObjectParameter("Remarks", GetType(String)))

        Dim tryTimeParameter As ObjectParameter = If(tryTime.HasValue, New ObjectParameter("tryTime", tryTime), New ObjectParameter("tryTime", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of Nullable(Of Decimal))("spr_HadiLogLoanStatus_Insert", dateParameter, sTimeParameter, successParameter, remarksParameter, tryTimeParameter)
    End Function

    Public Overridable Function spr_HadiOperation_Deposit_Bulk_Insert(selectStatement As String) As Integer
        Dim selectStatementParameter As ObjectParameter = If(selectStatement IsNot Nothing, New ObjectParameter("SelectStatement", selectStatement), New ObjectParameter("SelectStatement", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_HadiOperation_Deposit_Bulk_Insert", selectStatementParameter)
    End Function

    Public Overridable Function spr_HadiOperation_Deposit_Delete() As Integer
        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_HadiOperation_Deposit_Delete")
    End Function

    Public Overridable Function spr_HadiOperation_Deposit_Insert(date_p As Nullable(Of Date), fK_FileID As Nullable(Of Integer), cFCRDate As Nullable(Of Date), fK_BranchID As Nullable(Of Integer), depositNO As String, fK_DepositTypeID As Nullable(Of Integer), fK_DepositID As Nullable(Of Integer), process As Nullable(Of Boolean)) As Integer
        Dim date_pParameter As ObjectParameter = If(date_p.HasValue, New ObjectParameter("Date_p", date_p), New ObjectParameter("Date_p", GetType(Date)))

        Dim fK_FileIDParameter As ObjectParameter = If(fK_FileID.HasValue, New ObjectParameter("FK_FileID", fK_FileID), New ObjectParameter("FK_FileID", GetType(Integer)))

        Dim cFCRDateParameter As ObjectParameter = If(cFCRDate.HasValue, New ObjectParameter("CFCRDate", cFCRDate), New ObjectParameter("CFCRDate", GetType(Date)))

        Dim fK_BranchIDParameter As ObjectParameter = If(fK_BranchID.HasValue, New ObjectParameter("FK_BranchID", fK_BranchID), New ObjectParameter("FK_BranchID", GetType(Integer)))

        Dim depositNOParameter As ObjectParameter = If(depositNO IsNot Nothing, New ObjectParameter("DepositNO", depositNO), New ObjectParameter("DepositNO", GetType(String)))

        Dim fK_DepositTypeIDParameter As ObjectParameter = If(fK_DepositTypeID.HasValue, New ObjectParameter("FK_DepositTypeID", fK_DepositTypeID), New ObjectParameter("FK_DepositTypeID", GetType(Integer)))

        Dim fK_DepositIDParameter As ObjectParameter = If(fK_DepositID.HasValue, New ObjectParameter("FK_DepositID", fK_DepositID), New ObjectParameter("FK_DepositID", GetType(Integer)))

        Dim processParameter As ObjectParameter = If(process.HasValue, New ObjectParameter("Process", process), New ObjectParameter("Process", GetType(Boolean)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_HadiOperation_Deposit_Insert", date_pParameter, fK_FileIDParameter, cFCRDateParameter, fK_BranchIDParameter, depositNOParameter, fK_DepositTypeIDParameter, fK_DepositIDParameter, processParameter)
    End Function

    Public Overridable Function spr_HadiOperation_Laon_Insert(date_P As Nullable(Of Date), lCProfit As Nullable(Of Decimal), lCAmountPaid As Nullable(Of Decimal), amounDefferd As Nullable(Of Decimal), status As String, notPiadDurationDay As Nullable(Of Integer), lCBalance As Nullable(Of Decimal), amount_MustPay As Nullable(Of Integer), fK_FileID As Nullable(Of Integer), fK_LoanTypeID As Nullable(Of Integer), process As Nullable(Of Boolean), fK_BranchID As Nullable(Of Integer)) As Integer
        Dim date_PParameter As ObjectParameter = If(date_P.HasValue, New ObjectParameter("Date_P", date_P), New ObjectParameter("Date_P", GetType(Date)))

        Dim lCProfitParameter As ObjectParameter = If(lCProfit.HasValue, New ObjectParameter("LCProfit", lCProfit), New ObjectParameter("LCProfit", GetType(Decimal)))

        Dim lCAmountPaidParameter As ObjectParameter = If(lCAmountPaid.HasValue, New ObjectParameter("LCAmountPaid", lCAmountPaid), New ObjectParameter("LCAmountPaid", GetType(Decimal)))

        Dim amounDefferdParameter As ObjectParameter = If(amounDefferd.HasValue, New ObjectParameter("AmounDefferd", amounDefferd), New ObjectParameter("AmounDefferd", GetType(Decimal)))

        Dim statusParameter As ObjectParameter = If(status IsNot Nothing, New ObjectParameter("Status", status), New ObjectParameter("Status", GetType(String)))

        Dim notPiadDurationDayParameter As ObjectParameter = If(notPiadDurationDay.HasValue, New ObjectParameter("NotPiadDurationDay", notPiadDurationDay), New ObjectParameter("NotPiadDurationDay", GetType(Integer)))

        Dim lCBalanceParameter As ObjectParameter = If(lCBalance.HasValue, New ObjectParameter("LCBalance", lCBalance), New ObjectParameter("LCBalance", GetType(Decimal)))

        Dim amount_MustPayParameter As ObjectParameter = If(amount_MustPay.HasValue, New ObjectParameter("Amount_MustPay", amount_MustPay), New ObjectParameter("Amount_MustPay", GetType(Integer)))

        Dim fK_FileIDParameter As ObjectParameter = If(fK_FileID.HasValue, New ObjectParameter("FK_FileID", fK_FileID), New ObjectParameter("FK_FileID", GetType(Integer)))

        Dim fK_LoanTypeIDParameter As ObjectParameter = If(fK_LoanTypeID.HasValue, New ObjectParameter("FK_LoanTypeID", fK_LoanTypeID), New ObjectParameter("FK_LoanTypeID", GetType(Integer)))

        Dim processParameter As ObjectParameter = If(process.HasValue, New ObjectParameter("Process", process), New ObjectParameter("Process", GetType(Boolean)))

        Dim fK_BranchIDParameter As ObjectParameter = If(fK_BranchID.HasValue, New ObjectParameter("FK_BranchID", fK_BranchID), New ObjectParameter("FK_BranchID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_HadiOperation_Laon_Insert", date_PParameter, lCProfitParameter, lCAmountPaidParameter, amounDefferdParameter, statusParameter, notPiadDurationDayParameter, lCBalanceParameter, amount_MustPayParameter, fK_FileIDParameter, fK_LoanTypeIDParameter, processParameter, fK_BranchIDParameter)
    End Function

    Public Overridable Function spr_HadiOperation_Loan_Bulk_Insert(selectStatement As String) As Integer
        Dim selectStatementParameter As ObjectParameter = If(selectStatement IsNot Nothing, New ObjectParameter("SelectStatement", selectStatement), New ObjectParameter("SelectStatement", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_HadiOperation_Loan_Bulk_Insert", selectStatementParameter)
    End Function

    Public Overridable Function spr_HadiOperation_Loan_Delete() As Integer
        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_HadiOperation_Loan_Delete")
    End Function

    Public Overridable Function spr_HadiOperationDeposit_List_Select() As ObjectResult(Of spr_HadiOperationDeposit_List_Select_Result)
        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_HadiOperationDeposit_List_Select_Result)("spr_HadiOperationDeposit_List_Select")
    End Function

    Public Overridable Function spr_HadiOperationDeposit_Process_Update(fromID As Nullable(Of Integer), toID As Nullable(Of Integer)) As Integer
        Dim fromIDParameter As ObjectParameter = If(fromID.HasValue, New ObjectParameter("FromID", fromID), New ObjectParameter("FromID", GetType(Integer)))

        Dim toIDParameter As ObjectParameter = If(toID.HasValue, New ObjectParameter("ToID", toID), New ObjectParameter("ToID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_HadiOperationDeposit_Process_Update", fromIDParameter, toIDParameter)
    End Function

    Public Overridable Function spr_HadiOperationDeposit_Select(iD As Nullable(Of Integer)) As ObjectResult(Of spr_HadiOperationDeposit_Select_Result)
        Dim iDParameter As ObjectParameter = If(iD.HasValue, New ObjectParameter("ID", iD), New ObjectParameter("ID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_HadiOperationDeposit_Select_Result)("spr_HadiOperationDeposit_Select", iDParameter)
    End Function

    Public Overridable Function spr_HadiOperationDeposit_SelectByFileID(fileID As Nullable(Of Integer)) As ObjectResult(Of Nullable(Of Integer))
        Dim fileIDParameter As ObjectParameter = If(fileID.HasValue, New ObjectParameter("FileID", fileID), New ObjectParameter("FileID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of Nullable(Of Integer))("spr_HadiOperationDeposit_SelectByFileID", fileIDParameter)
    End Function

    Public Overridable Function spr_HadiOperationLoan_List_Select() As Integer
        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_HadiOperationLoan_List_Select")
    End Function

    Public Overridable Function spr_HadiOperationLoan_Process_Update(fromID As Nullable(Of Integer), toID As Nullable(Of Integer)) As Integer
        Dim fromIDParameter As ObjectParameter = If(fromID.HasValue, New ObjectParameter("FromID", fromID), New ObjectParameter("FromID", GetType(Integer)))

        Dim toIDParameter As ObjectParameter = If(toID.HasValue, New ObjectParameter("ToID", toID), New ObjectParameter("ToID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_HadiOperationLoan_Process_Update", fromIDParameter, toIDParameter)
    End Function

    Public Overridable Function spr_HadiOperationLoan_Select(iD As Nullable(Of Integer)) As Integer
        Dim iDParameter As ObjectParameter = If(iD.HasValue, New ObjectParameter("ID", iD), New ObjectParameter("ID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_HadiOperationLoan_Select", iDParameter)
    End Function

    Public Overridable Function spr_HadiWarningIntervals_Check_Select(action As Nullable(Of Integer), fK_DepositID As Nullable(Of Integer), nPDuration As Nullable(Of Integer), branchID As Nullable(Of Integer)) As ObjectResult(Of spr_HadiWarningIntervals_Check_Select_Result)
        Dim actionParameter As ObjectParameter = If(action.HasValue, New ObjectParameter("Action", action), New ObjectParameter("Action", GetType(Integer)))

        Dim fK_DepositIDParameter As ObjectParameter = If(fK_DepositID.HasValue, New ObjectParameter("FK_DepositID", fK_DepositID), New ObjectParameter("FK_DepositID", GetType(Integer)))

        Dim nPDurationParameter As ObjectParameter = If(nPDuration.HasValue, New ObjectParameter("NPDuration", nPDuration), New ObjectParameter("NPDuration", GetType(Integer)))

        Dim branchIDParameter As ObjectParameter = If(branchID.HasValue, New ObjectParameter("BranchID", branchID), New ObjectParameter("BranchID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_HadiWarningIntervals_Check_Select_Result)("spr_HadiWarningIntervals_Check_Select", actionParameter, fK_DepositIDParameter, nPDurationParameter, branchIDParameter)
    End Function

    Public Overridable Function spr_HadiWarningIntervals_CheckOverlap_Select(action As Nullable(Of Integer), hadiWarningIntervalsID As Nullable(Of Integer), depositID As Nullable(Of Integer), fromDay As Nullable(Of Integer), toDay As Nullable(Of Integer), branchID As Nullable(Of Integer)) As ObjectResult(Of spr_HadiWarningIntervals_CheckOverlap_Select_Result)
        Dim actionParameter As ObjectParameter = If(action.HasValue, New ObjectParameter("Action", action), New ObjectParameter("Action", GetType(Integer)))

        Dim hadiWarningIntervalsIDParameter As ObjectParameter = If(hadiWarningIntervalsID.HasValue, New ObjectParameter("HadiWarningIntervalsID", hadiWarningIntervalsID), New ObjectParameter("HadiWarningIntervalsID", GetType(Integer)))

        Dim depositIDParameter As ObjectParameter = If(depositID.HasValue, New ObjectParameter("DepositID", depositID), New ObjectParameter("DepositID", GetType(Integer)))

        Dim fromDayParameter As ObjectParameter = If(fromDay.HasValue, New ObjectParameter("FromDay", fromDay), New ObjectParameter("FromDay", GetType(Integer)))

        Dim toDayParameter As ObjectParameter = If(toDay.HasValue, New ObjectParameter("ToDay", toDay), New ObjectParameter("ToDay", GetType(Integer)))

        Dim branchIDParameter As ObjectParameter = If(branchID.HasValue, New ObjectParameter("BranchID", branchID), New ObjectParameter("BranchID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_HadiWarningIntervals_CheckOverlap_Select_Result)("spr_HadiWarningIntervals_CheckOverlap_Select", actionParameter, hadiWarningIntervalsIDParameter, depositIDParameter, fromDayParameter, toDayParameter, branchIDParameter)
    End Function

    Public Overridable Function spr_HadiWarningIntervals_Count_Select(action As Nullable(Of Integer), sEARCHSTR As String, branchID As Nullable(Of Integer), provinceID As Nullable(Of Integer)) As ObjectResult(Of Nullable(Of Integer))
        Dim actionParameter As ObjectParameter = If(action.HasValue, New ObjectParameter("Action", action), New ObjectParameter("Action", GetType(Integer)))

        Dim sEARCHSTRParameter As ObjectParameter = If(sEARCHSTR IsNot Nothing, New ObjectParameter("SEARCHSTR", sEARCHSTR), New ObjectParameter("SEARCHSTR", GetType(String)))

        Dim branchIDParameter As ObjectParameter = If(branchID.HasValue, New ObjectParameter("BranchID", branchID), New ObjectParameter("BranchID", GetType(Integer)))

        Dim provinceIDParameter As ObjectParameter = If(provinceID.HasValue, New ObjectParameter("provinceID", provinceID), New ObjectParameter("provinceID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of Nullable(Of Integer))("spr_HadiWarningIntervals_Count_Select", actionParameter, sEARCHSTRParameter, branchIDParameter, provinceIDParameter)
    End Function

    Public Overridable Function spr_HadiWarningIntervals_Delete(iD As Nullable(Of Integer)) As Integer
        Dim iDParameter As ObjectParameter = If(iD.HasValue, New ObjectParameter("ID", iD), New ObjectParameter("ID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_HadiWarningIntervals_Delete", iDParameter)
    End Function

    Public Overridable Function spr_HadiWarningIntervals_Inerval_List_Select(action As Nullable(Of Byte)) As ObjectResult(Of spr_HadiWarningIntervals_Inerval_List_Select_Result)
        Dim actionParameter As ObjectParameter = If(action.HasValue, New ObjectParameter("Action", action), New ObjectParameter("Action", GetType(Byte)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_HadiWarningIntervals_Inerval_List_Select_Result)("spr_HadiWarningIntervals_Inerval_List_Select", actionParameter)
    End Function

    Public Overridable Function spr_HadiWarningIntervals_Insert(fromDay As Nullable(Of Integer), toDay As Nullable(Of Integer), warniningTitle As String, frequencyInDay As Nullable(Of Integer), startTime As Nullable(Of System.TimeSpan), frequencyPeriodHour As Nullable(Of Integer), sendSMS As Nullable(Of Boolean), callTelephone As Nullable(Of Boolean), voiceMessage As Nullable(Of Boolean), forDeposit As Nullable(Of Boolean), fK_CUserID As Nullable(Of Integer), iSActive As Nullable(Of Boolean)) As ObjectResult(Of Nullable(Of Decimal))
        Dim fromDayParameter As ObjectParameter = If(fromDay.HasValue, New ObjectParameter("FromDay", fromDay), New ObjectParameter("FromDay", GetType(Integer)))

        Dim toDayParameter As ObjectParameter = If(toDay.HasValue, New ObjectParameter("ToDay", toDay), New ObjectParameter("ToDay", GetType(Integer)))

        Dim warniningTitleParameter As ObjectParameter = If(warniningTitle IsNot Nothing, New ObjectParameter("WarniningTitle", warniningTitle), New ObjectParameter("WarniningTitle", GetType(String)))

        Dim frequencyInDayParameter As ObjectParameter = If(frequencyInDay.HasValue, New ObjectParameter("FrequencyInDay", frequencyInDay), New ObjectParameter("FrequencyInDay", GetType(Integer)))

        Dim startTimeParameter As ObjectParameter = If(startTime.HasValue, New ObjectParameter("StartTime", startTime), New ObjectParameter("StartTime", GetType(System.TimeSpan)))

        Dim frequencyPeriodHourParameter As ObjectParameter = If(frequencyPeriodHour.HasValue, New ObjectParameter("FrequencyPeriodHour", frequencyPeriodHour), New ObjectParameter("FrequencyPeriodHour", GetType(Integer)))

        Dim sendSMSParameter As ObjectParameter = If(sendSMS.HasValue, New ObjectParameter("SendSMS", sendSMS), New ObjectParameter("SendSMS", GetType(Boolean)))

        Dim callTelephoneParameter As ObjectParameter = If(callTelephone.HasValue, New ObjectParameter("CallTelephone", callTelephone), New ObjectParameter("CallTelephone", GetType(Boolean)))

        Dim voiceMessageParameter As ObjectParameter = If(voiceMessage.HasValue, New ObjectParameter("VoiceMessage", voiceMessage), New ObjectParameter("VoiceMessage", GetType(Boolean)))

        Dim forDepositParameter As ObjectParameter = If(forDeposit.HasValue, New ObjectParameter("ForDeposit", forDeposit), New ObjectParameter("ForDeposit", GetType(Boolean)))

        Dim fK_CUserIDParameter As ObjectParameter = If(fK_CUserID.HasValue, New ObjectParameter("FK_CUserID", fK_CUserID), New ObjectParameter("FK_CUserID", GetType(Integer)))

        Dim iSActiveParameter As ObjectParameter = If(iSActive.HasValue, New ObjectParameter("ISActive", iSActive), New ObjectParameter("ISActive", GetType(Boolean)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of Nullable(Of Decimal))("spr_HadiWarningIntervals_Insert", fromDayParameter, toDayParameter, warniningTitleParameter, frequencyInDayParameter, startTimeParameter, frequencyPeriodHourParameter, sendSMSParameter, callTelephoneParameter, voiceMessageParameter, forDepositParameter, fK_CUserIDParameter, iSActiveParameter)
    End Function

    Public Overridable Function spr_HadiWarningIntervals_List_Select(fKCUserID As Nullable(Of Integer)) As ObjectResult(Of spr_HadiWarningIntervals_List_Select_Result)
        Dim fKCUserIDParameter As ObjectParameter = If(fKCUserID.HasValue, New ObjectParameter("FKCUserID", fKCUserID), New ObjectParameter("FKCUserID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_HadiWarningIntervals_List_Select_Result)("spr_HadiWarningIntervals_List_Select", fKCUserIDParameter)
    End Function

    Public Overridable Function spr_HadiWarningIntervals_Management_Select(action As Nullable(Of Integer), fromIndex As Nullable(Of Integer), toIndex As Nullable(Of Integer), sEARCHSTR As String, branchID As Nullable(Of Integer), provinceID As Nullable(Of Integer)) As ObjectResult(Of spr_HadiWarningIntervals_Management_Select_Result)
        Dim actionParameter As ObjectParameter = If(action.HasValue, New ObjectParameter("Action", action), New ObjectParameter("Action", GetType(Integer)))

        Dim fromIndexParameter As ObjectParameter = If(fromIndex.HasValue, New ObjectParameter("FromIndex", fromIndex), New ObjectParameter("FromIndex", GetType(Integer)))

        Dim toIndexParameter As ObjectParameter = If(toIndex.HasValue, New ObjectParameter("ToIndex", toIndex), New ObjectParameter("ToIndex", GetType(Integer)))

        Dim sEARCHSTRParameter As ObjectParameter = If(sEARCHSTR IsNot Nothing, New ObjectParameter("SEARCHSTR", sEARCHSTR), New ObjectParameter("SEARCHSTR", GetType(String)))

        Dim branchIDParameter As ObjectParameter = If(branchID.HasValue, New ObjectParameter("BranchID", branchID), New ObjectParameter("BranchID", GetType(Integer)))

        Dim provinceIDParameter As ObjectParameter = If(provinceID.HasValue, New ObjectParameter("ProvinceID", provinceID), New ObjectParameter("ProvinceID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_HadiWarningIntervals_Management_Select_Result)("spr_HadiWarningIntervals_Management_Select", actionParameter, fromIndexParameter, toIndexParameter, sEARCHSTRParameter, branchIDParameter, provinceIDParameter)
    End Function

    Public Overridable Function spr_HadiWarningIntervals_MinMaxFromTo_Select() As ObjectResult(Of spr_HadiWarningIntervals_MinMaxFromTo_Select_Result)
        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_HadiWarningIntervals_MinMaxFromTo_Select_Result)("spr_HadiWarningIntervals_MinMaxFromTo_Select")
    End Function

    Public Overridable Function spr_HadiWarningIntervals_Select(iD As Nullable(Of Integer)) As ObjectResult(Of spr_HadiWarningIntervals_Select_Result)
        Dim iDParameter As ObjectParameter = If(iD.HasValue, New ObjectParameter("ID", iD), New ObjectParameter("ID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_HadiWarningIntervals_Select_Result)("spr_HadiWarningIntervals_Select", iDParameter)
    End Function

    Public Overridable Function spr_HadiWarningIntervals_Update(iD As Nullable(Of Integer), fromDay As Nullable(Of Integer), toDay As Nullable(Of Integer), warniningTitle As String, frequencyInDay As Nullable(Of Integer), startTime As Nullable(Of System.TimeSpan), frequencyPeriodHour As Nullable(Of Integer), sendSMS As Nullable(Of Boolean), callTelephone As Nullable(Of Boolean), voiceMessage As Nullable(Of Boolean), forDeposit As Nullable(Of Boolean), fK_EUserID As Nullable(Of Integer), iSActive As Nullable(Of Boolean)) As Integer
        Dim iDParameter As ObjectParameter = If(iD.HasValue, New ObjectParameter("ID", iD), New ObjectParameter("ID", GetType(Integer)))

        Dim fromDayParameter As ObjectParameter = If(fromDay.HasValue, New ObjectParameter("FromDay", fromDay), New ObjectParameter("FromDay", GetType(Integer)))

        Dim toDayParameter As ObjectParameter = If(toDay.HasValue, New ObjectParameter("ToDay", toDay), New ObjectParameter("ToDay", GetType(Integer)))

        Dim warniningTitleParameter As ObjectParameter = If(warniningTitle IsNot Nothing, New ObjectParameter("WarniningTitle", warniningTitle), New ObjectParameter("WarniningTitle", GetType(String)))

        Dim frequencyInDayParameter As ObjectParameter = If(frequencyInDay.HasValue, New ObjectParameter("FrequencyInDay", frequencyInDay), New ObjectParameter("FrequencyInDay", GetType(Integer)))

        Dim startTimeParameter As ObjectParameter = If(startTime.HasValue, New ObjectParameter("StartTime", startTime), New ObjectParameter("StartTime", GetType(System.TimeSpan)))

        Dim frequencyPeriodHourParameter As ObjectParameter = If(frequencyPeriodHour.HasValue, New ObjectParameter("FrequencyPeriodHour", frequencyPeriodHour), New ObjectParameter("FrequencyPeriodHour", GetType(Integer)))

        Dim sendSMSParameter As ObjectParameter = If(sendSMS.HasValue, New ObjectParameter("SendSMS", sendSMS), New ObjectParameter("SendSMS", GetType(Boolean)))

        Dim callTelephoneParameter As ObjectParameter = If(callTelephone.HasValue, New ObjectParameter("CallTelephone", callTelephone), New ObjectParameter("CallTelephone", GetType(Boolean)))

        Dim voiceMessageParameter As ObjectParameter = If(voiceMessage.HasValue, New ObjectParameter("VoiceMessage", voiceMessage), New ObjectParameter("VoiceMessage", GetType(Boolean)))

        Dim forDepositParameter As ObjectParameter = If(forDeposit.HasValue, New ObjectParameter("ForDeposit", forDeposit), New ObjectParameter("ForDeposit", GetType(Boolean)))

        Dim fK_EUserIDParameter As ObjectParameter = If(fK_EUserID.HasValue, New ObjectParameter("FK_EUserID", fK_EUserID), New ObjectParameter("FK_EUserID", GetType(Integer)))

        Dim iSActiveParameter As ObjectParameter = If(iSActive.HasValue, New ObjectParameter("ISActive", iSActive), New ObjectParameter("ISActive", GetType(Boolean)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_HadiWarningIntervals_Update", iDParameter, fromDayParameter, toDayParameter, warniningTitleParameter, frequencyInDayParameter, startTimeParameter, frequencyPeriodHourParameter, sendSMSParameter, callTelephoneParameter, voiceMessageParameter, forDepositParameter, fK_EUserIDParameter, iSActiveParameter)
    End Function

    Public Overridable Function spr_HadiWarningIntervalsBranch_Check_Select(hadiWarningIntervalID As Nullable(Of Integer), branchID As Nullable(Of Integer)) As ObjectResult(Of Nullable(Of Integer))
        Dim hadiWarningIntervalIDParameter As ObjectParameter = If(hadiWarningIntervalID.HasValue, New ObjectParameter("HadiWarningIntervalID", hadiWarningIntervalID), New ObjectParameter("HadiWarningIntervalID", GetType(Integer)))

        Dim branchIDParameter As ObjectParameter = If(branchID.HasValue, New ObjectParameter("BranchID", branchID), New ObjectParameter("BranchID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of Nullable(Of Integer))("spr_HadiWarningIntervalsBranch_Check_Select", hadiWarningIntervalIDParameter, branchIDParameter)
    End Function

    Public Overridable Function spr_HadiWarningIntervalsBranch_Delete(fK_HadiWarningIntervalID As Nullable(Of Integer)) As Integer
        Dim fK_HadiWarningIntervalIDParameter As ObjectParameter = If(fK_HadiWarningIntervalID.HasValue, New ObjectParameter("FK_HadiWarningIntervalID", fK_HadiWarningIntervalID), New ObjectParameter("FK_HadiWarningIntervalID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_HadiWarningIntervalsBranch_Delete", fK_HadiWarningIntervalIDParameter)
    End Function

    Public Overridable Function spr_HadiWarningIntervalsBranch_Insert(fK_HadiWarningIntervalID As Nullable(Of Integer), fK_BranchID As Nullable(Of Integer)) As Integer
        Dim fK_HadiWarningIntervalIDParameter As ObjectParameter = If(fK_HadiWarningIntervalID.HasValue, New ObjectParameter("FK_HadiWarningIntervalID", fK_HadiWarningIntervalID), New ObjectParameter("FK_HadiWarningIntervalID", GetType(Integer)))

        Dim fK_BranchIDParameter As ObjectParameter = If(fK_BranchID.HasValue, New ObjectParameter("FK_BranchID", fK_BranchID), New ObjectParameter("FK_BranchID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_HadiWarningIntervalsBranch_Insert", fK_HadiWarningIntervalIDParameter, fK_BranchIDParameter)
    End Function

    Public Overridable Function spr_HadiWarningIntervalsBranch_List_Select() As ObjectResult(Of String)
        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of String)("spr_HadiWarningIntervalsBranch_List_Select")
    End Function

    Public Overridable Function spr_HadiWarningIntervalsBranch_SelectByIntervalID(fK_WarningIntervalID As Nullable(Of Integer), fK_ProvinceID As Nullable(Of Integer)) As ObjectResult(Of spr_HadiWarningIntervalsBranch_SelectByIntervalID_Result)
        Dim fK_WarningIntervalIDParameter As ObjectParameter = If(fK_WarningIntervalID.HasValue, New ObjectParameter("FK_WarningIntervalID", fK_WarningIntervalID), New ObjectParameter("FK_WarningIntervalID", GetType(Integer)))

        Dim fK_ProvinceIDParameter As ObjectParameter = If(fK_ProvinceID.HasValue, New ObjectParameter("FK_ProvinceID", fK_ProvinceID), New ObjectParameter("FK_ProvinceID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_HadiWarningIntervalsBranch_SelectByIntervalID_Result)("spr_HadiWarningIntervalsBranch_SelectByIntervalID", fK_WarningIntervalIDParameter, fK_ProvinceIDParameter)
    End Function

    Public Overridable Function spr_HadiWarningIntervalsBranchProvince_Check_Select(hadiWarningIntervalID As Nullable(Of Integer), provinceID As Nullable(Of Integer)) As ObjectResult(Of Nullable(Of Integer))
        Dim hadiWarningIntervalIDParameter As ObjectParameter = If(hadiWarningIntervalID.HasValue, New ObjectParameter("HadiWarningIntervalID", hadiWarningIntervalID), New ObjectParameter("HadiWarningIntervalID", GetType(Integer)))

        Dim provinceIDParameter As ObjectParameter = If(provinceID.HasValue, New ObjectParameter("ProvinceID", provinceID), New ObjectParameter("ProvinceID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of Nullable(Of Integer))("spr_HadiWarningIntervalsBranchProvince_Check_Select", hadiWarningIntervalIDParameter, provinceIDParameter)
    End Function

    Public Overridable Function spr_HadiWarningIntervalsBranchProvince_SelectByIntervalID(fK_WarningIntervalID As Nullable(Of Integer)) As ObjectResult(Of Nullable(Of Integer))
        Dim fK_WarningIntervalIDParameter As ObjectParameter = If(fK_WarningIntervalID.HasValue, New ObjectParameter("FK_WarningIntervalID", fK_WarningIntervalID), New ObjectParameter("FK_WarningIntervalID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of Nullable(Of Integer))("spr_HadiWarningIntervalsBranchProvince_SelectByIntervalID", fK_WarningIntervalIDParameter)
    End Function

    Public Overridable Function spr_HadiWarningIntervalsDeposit_Check_Select(hadiWarningIntervalID As Nullable(Of Integer), depositID As Nullable(Of Integer)) As ObjectResult(Of Nullable(Of Integer))
        Dim hadiWarningIntervalIDParameter As ObjectParameter = If(hadiWarningIntervalID.HasValue, New ObjectParameter("HadiWarningIntervalID", hadiWarningIntervalID), New ObjectParameter("HadiWarningIntervalID", GetType(Integer)))

        Dim depositIDParameter As ObjectParameter = If(depositID.HasValue, New ObjectParameter("DepositID", depositID), New ObjectParameter("DepositID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of Nullable(Of Integer))("spr_HadiWarningIntervalsDeposit_Check_Select", hadiWarningIntervalIDParameter, depositIDParameter)
    End Function

    Public Overridable Function spr_HadiWarningIntervalsDeposit_Insert(fK_HadiWarningIntervalID As Nullable(Of Integer), fK_DepositID As Nullable(Of Integer)) As Integer
        Dim fK_HadiWarningIntervalIDParameter As ObjectParameter = If(fK_HadiWarningIntervalID.HasValue, New ObjectParameter("FK_HadiWarningIntervalID", fK_HadiWarningIntervalID), New ObjectParameter("FK_HadiWarningIntervalID", GetType(Integer)))

        Dim fK_DepositIDParameter As ObjectParameter = If(fK_DepositID.HasValue, New ObjectParameter("FK_DepositID", fK_DepositID), New ObjectParameter("FK_DepositID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_HadiWarningIntervalsDeposit_Insert", fK_HadiWarningIntervalIDParameter, fK_DepositIDParameter)
    End Function

    Public Overridable Function spr_HadiWarningIntervalsDeposit_Select(action As Nullable(Of Integer), iD As Nullable(Of Integer), hadiWarningIntervalID As Nullable(Of Integer)) As ObjectResult(Of spr_HadiWarningIntervalsDeposit_Select_Result)
        Dim actionParameter As ObjectParameter = If(action.HasValue, New ObjectParameter("Action", action), New ObjectParameter("Action", GetType(Integer)))

        Dim iDParameter As ObjectParameter = If(iD.HasValue, New ObjectParameter("ID", iD), New ObjectParameter("ID", GetType(Integer)))

        Dim hadiWarningIntervalIDParameter As ObjectParameter = If(hadiWarningIntervalID.HasValue, New ObjectParameter("HadiWarningIntervalID", hadiWarningIntervalID), New ObjectParameter("HadiWarningIntervalID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_HadiWarningIntervalsDeposit_Select_Result)("spr_HadiWarningIntervalsDeposit_Select", actionParameter, iDParameter, hadiWarningIntervalIDParameter)
    End Function

    Public Overridable Function spr_HadiWarningIntervalsDeposit_WarningInterval_Delete(hadiWarningIntervalID As Nullable(Of Integer)) As Integer
        Dim hadiWarningIntervalIDParameter As ObjectParameter = If(hadiWarningIntervalID.HasValue, New ObjectParameter("HadiWarningIntervalID", hadiWarningIntervalID), New ObjectParameter("HadiWarningIntervalID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_HadiWarningIntervalsDeposit_WarningInterval_Delete", hadiWarningIntervalIDParameter)
    End Function

    Public Overridable Function spr_HadiWarningNotificationLog_Check_Select(hadiWarningIntervalID As Nullable(Of Integer), day As Nullable(Of Date)) As ObjectResult(Of spr_HadiWarningNotificationLog_Check_Select_Result)
        Dim hadiWarningIntervalIDParameter As ObjectParameter = If(hadiWarningIntervalID.HasValue, New ObjectParameter("HadiWarningIntervalID", hadiWarningIntervalID), New ObjectParameter("HadiWarningIntervalID", GetType(Integer)))

        Dim dayParameter As ObjectParameter = If(day.HasValue, New ObjectParameter("Day", day), New ObjectParameter("Day", GetType(Date)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_HadiWarningNotificationLog_Check_Select_Result)("spr_HadiWarningNotificationLog_Check_Select", hadiWarningIntervalIDParameter, dayParameter)
    End Function

    Public Overridable Function spr_HadiWarningNotificationLog_Insert(fK_FileID As Nullable(Of Integer), fK_HadiWarningIntervalID As Nullable(Of Integer), theDay As Nullable(Of Date), frquencyNo As Nullable(Of Integer), sTime As Nullable(Of Date), isHandy As Nullable(Of Boolean)) As ObjectResult(Of Nullable(Of Decimal))
        Dim fK_FileIDParameter As ObjectParameter = If(fK_FileID.HasValue, New ObjectParameter("FK_FileID", fK_FileID), New ObjectParameter("FK_FileID", GetType(Integer)))

        Dim fK_HadiWarningIntervalIDParameter As ObjectParameter = If(fK_HadiWarningIntervalID.HasValue, New ObjectParameter("FK_HadiWarningIntervalID", fK_HadiWarningIntervalID), New ObjectParameter("FK_HadiWarningIntervalID", GetType(Integer)))

        Dim theDayParameter As ObjectParameter = If(theDay.HasValue, New ObjectParameter("theDay", theDay), New ObjectParameter("theDay", GetType(Date)))

        Dim frquencyNoParameter As ObjectParameter = If(frquencyNo.HasValue, New ObjectParameter("FrquencyNo", frquencyNo), New ObjectParameter("FrquencyNo", GetType(Integer)))

        Dim sTimeParameter As ObjectParameter = If(sTime.HasValue, New ObjectParameter("STime", sTime), New ObjectParameter("STime", GetType(Date)))

        Dim isHandyParameter As ObjectParameter = If(isHandy.HasValue, New ObjectParameter("IsHandy", isHandy), New ObjectParameter("IsHandy", GetType(Boolean)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of Nullable(Of Decimal))("spr_HadiWarningNotificationLog_Insert", fK_FileIDParameter, fK_HadiWarningIntervalIDParameter, theDayParameter, frquencyNoParameter, sTimeParameter, isHandyParameter)
    End Function

    Public Overridable Function spr_HadiWarningNotificationLogDetail_Batch_Update(fromID As Nullable(Of Integer), toID As Nullable(Of Integer), batchID As String) As Integer
        Dim fromIDParameter As ObjectParameter = If(fromID.HasValue, New ObjectParameter("FromID", fromID), New ObjectParameter("FromID", GetType(Integer)))

        Dim toIDParameter As ObjectParameter = If(toID.HasValue, New ObjectParameter("ToID", toID), New ObjectParameter("ToID", GetType(Integer)))

        Dim batchIDParameter As ObjectParameter = If(batchID IsNot Nothing, New ObjectParameter("BatchID", batchID), New ObjectParameter("BatchID", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_HadiWarningNotificationLogDetail_Batch_Update", fromIDParameter, toIDParameter, batchIDParameter)
    End Function

    Public Overridable Function spr_HadiWarningNotificationLogDetail_Delivery_Batch_Update(batchID As String, sendStatus As Nullable(Of Byte)) As Integer
        Dim batchIDParameter As ObjectParameter = If(batchID IsNot Nothing, New ObjectParameter("BatchID", batchID), New ObjectParameter("BatchID", GetType(String)))

        Dim sendStatusParameter As ObjectParameter = If(sendStatus.HasValue, New ObjectParameter("SendStatus", sendStatus), New ObjectParameter("SendStatus", GetType(Byte)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_HadiWarningNotificationLogDetail_Delivery_Batch_Update", batchIDParameter, sendStatusParameter)
    End Function

    Public Overridable Function spr_HadiWarningNotificationLogDetail_Delivery_Update(receiverNo As String, batchID As String, sendStatus As Nullable(Of Byte)) As Integer
        Dim receiverNoParameter As ObjectParameter = If(receiverNo IsNot Nothing, New ObjectParameter("ReceiverNo", receiverNo), New ObjectParameter("ReceiverNo", GetType(String)))

        Dim batchIDParameter As ObjectParameter = If(batchID IsNot Nothing, New ObjectParameter("BatchID", batchID), New ObjectParameter("BatchID", GetType(String)))

        Dim sendStatusParameter As ObjectParameter = If(sendStatus.HasValue, New ObjectParameter("SendStatus", sendStatus), New ObjectParameter("SendStatus", GetType(Byte)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_HadiWarningNotificationLogDetail_Delivery_Update", receiverNoParameter, batchIDParameter, sendStatusParameter)
    End Function

    Public Overridable Function spr_HadiWarningNotificationLogDetail_DeliverySMS_List_Select() As ObjectResult(Of String)
        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of String)("spr_HadiWarningNotificationLogDetail_DeliverySMS_List_Select")
    End Function

    Public Overridable Function spr_HadiWarningNotificationLogDetail_Insert(fK_HadiWarningNotificationLogID As Nullable(Of Integer), senderInfo As String, receiverInfo As String, strMessage As String, remarks As String, sTime As Nullable(Of Date), batchID As String, sendStatus As Nullable(Of Byte), notificationTypeID As Nullable(Of Byte), sendDate As Nullable(Of Date)) As Integer
        Dim fK_HadiWarningNotificationLogIDParameter As ObjectParameter = If(fK_HadiWarningNotificationLogID.HasValue, New ObjectParameter("FK_HadiWarningNotificationLogID", fK_HadiWarningNotificationLogID), New ObjectParameter("FK_HadiWarningNotificationLogID", GetType(Integer)))

        Dim senderInfoParameter As ObjectParameter = If(senderInfo IsNot Nothing, New ObjectParameter("SenderInfo", senderInfo), New ObjectParameter("SenderInfo", GetType(String)))

        Dim receiverInfoParameter As ObjectParameter = If(receiverInfo IsNot Nothing, New ObjectParameter("ReceiverInfo", receiverInfo), New ObjectParameter("ReceiverInfo", GetType(String)))

        Dim strMessageParameter As ObjectParameter = If(strMessage IsNot Nothing, New ObjectParameter("strMessage", strMessage), New ObjectParameter("strMessage", GetType(String)))

        Dim remarksParameter As ObjectParameter = If(remarks IsNot Nothing, New ObjectParameter("Remarks", remarks), New ObjectParameter("Remarks", GetType(String)))

        Dim sTimeParameter As ObjectParameter = If(sTime.HasValue, New ObjectParameter("STime", sTime), New ObjectParameter("STime", GetType(Date)))

        Dim batchIDParameter As ObjectParameter = If(batchID IsNot Nothing, New ObjectParameter("BatchID", batchID), New ObjectParameter("BatchID", GetType(String)))

        Dim sendStatusParameter As ObjectParameter = If(sendStatus.HasValue, New ObjectParameter("SendStatus", sendStatus), New ObjectParameter("SendStatus", GetType(Byte)))

        Dim notificationTypeIDParameter As ObjectParameter = If(notificationTypeID.HasValue, New ObjectParameter("NotificationTypeID", notificationTypeID), New ObjectParameter("NotificationTypeID", GetType(Byte)))

        Dim sendDateParameter As ObjectParameter = If(sendDate.HasValue, New ObjectParameter("SendDate", sendDate), New ObjectParameter("SendDate", GetType(Date)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_HadiWarningNotificationLogDetail_Insert", fK_HadiWarningNotificationLogIDParameter, senderInfoParameter, receiverInfoParameter, strMessageParameter, remarksParameter, sTimeParameter, batchIDParameter, sendStatusParameter, notificationTypeIDParameter, sendDateParameter)
    End Function

    Public Overridable Function spr_HadiWarningNotificationLogDetail_NotSend_SMS_List() As ObjectResult(Of spr_HadiWarningNotificationLogDetail_NotSend_SMS_List_Result)
        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_HadiWarningNotificationLogDetail_NotSend_SMS_List_Result)("spr_HadiWarningNotificationLogDetail_NotSend_SMS_List")
    End Function

    Public Overridable Function spr_HadiWarningNotificationLogDetail_Pending_SMSCount_Select(theDay As Nullable(Of Date)) As ObjectResult(Of Nullable(Of Integer))
        Dim theDayParameter As ObjectParameter = If(theDay.HasValue, New ObjectParameter("theDay", theDay), New ObjectParameter("theDay", GetType(Date)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of Nullable(Of Integer))("spr_HadiWarningNotificationLogDetail_Pending_SMSCount_Select", theDayParameter)
    End Function

    Public Overridable Function spr_HadiWarningNotificationLogDetail_Select(action As Nullable(Of Integer), iD As Nullable(Of Integer)) As ObjectResult(Of spr_HadiWarningNotificationLogDetail_Select_Result)
        Dim actionParameter As ObjectParameter = If(action.HasValue, New ObjectParameter("Action", action), New ObjectParameter("Action", GetType(Integer)))

        Dim iDParameter As ObjectParameter = If(iD.HasValue, New ObjectParameter("ID", iD), New ObjectParameter("ID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_HadiWarningNotificationLogDetail_Select_Result)("spr_HadiWarningNotificationLogDetail_Select", actionParameter, iDParameter)
    End Function

    Public Overridable Function spr_HadiWarningNotificationLogDetail_SMSCount_Select(theDay As Nullable(Of Date)) As ObjectResult(Of Nullable(Of Integer))
        Dim theDayParameter As ObjectParameter = If(theDay.HasValue, New ObjectParameter("theDay", theDay), New ObjectParameter("theDay", GetType(Date)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of Nullable(Of Integer))("spr_HadiWarningNotificationLogDetail_SMSCount_Select", theDayParameter)
    End Function

    Public Overridable Function spr_HadiWarningNotificationLogDetail_Status_Update(iD As Nullable(Of Integer), remarks As String, sendStatus As Nullable(Of Byte), strMessage As String, sendDate As Nullable(Of Date)) As Integer
        Dim iDParameter As ObjectParameter = If(iD.HasValue, New ObjectParameter("ID", iD), New ObjectParameter("ID", GetType(Integer)))

        Dim remarksParameter As ObjectParameter = If(remarks IsNot Nothing, New ObjectParameter("Remarks", remarks), New ObjectParameter("Remarks", GetType(String)))

        Dim sendStatusParameter As ObjectParameter = If(sendStatus.HasValue, New ObjectParameter("SendStatus", sendStatus), New ObjectParameter("SendStatus", GetType(Byte)))

        Dim strMessageParameter As ObjectParameter = If(strMessage IsNot Nothing, New ObjectParameter("strMessage", strMessage), New ObjectParameter("strMessage", GetType(String)))

        Dim sendDateParameter As ObjectParameter = If(sendDate.HasValue, New ObjectParameter("SendDate", sendDate), New ObjectParameter("SendDate", GetType(Date)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_HadiWarningNotificationLogDetail_Status_Update", iDParameter, remarksParameter, sendStatusParameter, strMessageParameter, sendDateParameter)
    End Function

    Public Overridable Function spr_HandyFollow_CheckFileLoan_Select(loanID As Nullable(Of Integer), fileID As Nullable(Of Integer)) As ObjectResult(Of spr_HandyFollow_CheckFileLoan_Select_Result)
        Dim loanIDParameter As ObjectParameter = If(loanID.HasValue, New ObjectParameter("LoanID", loanID), New ObjectParameter("LoanID", GetType(Integer)))

        Dim fileIDParameter As ObjectParameter = If(fileID.HasValue, New ObjectParameter("FileID", fileID), New ObjectParameter("FileID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_HandyFollow_CheckFileLoan_Select_Result)("spr_HandyFollow_CheckFileLoan_Select", loanIDParameter, fileIDParameter)
    End Function

    Public Overridable Function spr_HandyFollow_Insert(fK_FileID As Nullable(Of Integer), fK_LoanID As Nullable(Of Integer), notificationTypeID As Nullable(Of Integer), toSponsor As Nullable(Of Boolean), fK_AudienceFileID As Nullable(Of Integer), contactDate As Nullable(Of Date), fK_UserID As Nullable(Of Integer), sTime As Nullable(Of Date), remarks As String, answered As Nullable(Of Boolean), isSuccess As Nullable(Of Boolean), dutyDate As Nullable(Of Date)) As Integer
        Dim fK_FileIDParameter As ObjectParameter = If(fK_FileID.HasValue, New ObjectParameter("FK_FileID", fK_FileID), New ObjectParameter("FK_FileID", GetType(Integer)))

        Dim fK_LoanIDParameter As ObjectParameter = If(fK_LoanID.HasValue, New ObjectParameter("FK_LoanID", fK_LoanID), New ObjectParameter("FK_LoanID", GetType(Integer)))

        Dim notificationTypeIDParameter As ObjectParameter = If(notificationTypeID.HasValue, New ObjectParameter("NotificationTypeID", notificationTypeID), New ObjectParameter("NotificationTypeID", GetType(Integer)))

        Dim toSponsorParameter As ObjectParameter = If(toSponsor.HasValue, New ObjectParameter("ToSponsor", toSponsor), New ObjectParameter("ToSponsor", GetType(Boolean)))

        Dim fK_AudienceFileIDParameter As ObjectParameter = If(fK_AudienceFileID.HasValue, New ObjectParameter("FK_AudienceFileID", fK_AudienceFileID), New ObjectParameter("FK_AudienceFileID", GetType(Integer)))

        Dim contactDateParameter As ObjectParameter = If(contactDate.HasValue, New ObjectParameter("ContactDate", contactDate), New ObjectParameter("ContactDate", GetType(Date)))

        Dim fK_UserIDParameter As ObjectParameter = If(fK_UserID.HasValue, New ObjectParameter("FK_UserID", fK_UserID), New ObjectParameter("FK_UserID", GetType(Integer)))

        Dim sTimeParameter As ObjectParameter = If(sTime.HasValue, New ObjectParameter("STime", sTime), New ObjectParameter("STime", GetType(Date)))

        Dim remarksParameter As ObjectParameter = If(remarks IsNot Nothing, New ObjectParameter("Remarks", remarks), New ObjectParameter("Remarks", GetType(String)))

        Dim answeredParameter As ObjectParameter = If(answered.HasValue, New ObjectParameter("Answered", answered), New ObjectParameter("Answered", GetType(Boolean)))

        Dim isSuccessParameter As ObjectParameter = If(isSuccess.HasValue, New ObjectParameter("IsSuccess", isSuccess), New ObjectParameter("IsSuccess", GetType(Boolean)))

        Dim dutyDateParameter As ObjectParameter = If(dutyDate.HasValue, New ObjectParameter("DutyDate", dutyDate), New ObjectParameter("DutyDate", GetType(Date)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_HandyFollow_Insert", fK_FileIDParameter, fK_LoanIDParameter, notificationTypeIDParameter, toSponsorParameter, fK_AudienceFileIDParameter, contactDateParameter, fK_UserIDParameter, sTimeParameter, remarksParameter, answeredParameter, isSuccessParameter, dutyDateParameter)
    End Function

    Public Overridable Function spr_HandyFollow_Select(action As Nullable(Of Integer), iD As Nullable(Of Integer), loanID As Nullable(Of Integer), fileID As Nullable(Of Integer)) As ObjectResult(Of spr_HandyFollow_Select_Result)
        Dim actionParameter As ObjectParameter = If(action.HasValue, New ObjectParameter("Action", action), New ObjectParameter("Action", GetType(Integer)))

        Dim iDParameter As ObjectParameter = If(iD.HasValue, New ObjectParameter("ID", iD), New ObjectParameter("ID", GetType(Integer)))

        Dim loanIDParameter As ObjectParameter = If(loanID.HasValue, New ObjectParameter("LoanID", loanID), New ObjectParameter("LoanID", GetType(Integer)))

        Dim fileIDParameter As ObjectParameter = If(fileID.HasValue, New ObjectParameter("FileID", fileID), New ObjectParameter("FileID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_HandyFollow_Select_Result)("spr_HandyFollow_Select", actionParameter, iDParameter, loanIDParameter, fileIDParameter)
    End Function

    Public Overridable Function spr_IncompleteFileInfo_Report(action As Nullable(Of Integer), branchID As Nullable(Of Integer), parameter As String) As ObjectResult(Of spr_IncompleteFileInfo_Report_Result)
        Dim actionParameter As ObjectParameter = If(action.HasValue, New ObjectParameter("Action", action), New ObjectParameter("Action", GetType(Integer)))

        Dim branchIDParameter As ObjectParameter = If(branchID.HasValue, New ObjectParameter("BranchID", branchID), New ObjectParameter("BranchID", GetType(Integer)))

        Dim parameterParameter As ObjectParameter = If(parameter IsNot Nothing, New ObjectParameter("Parameter", parameter), New ObjectParameter("Parameter", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_IncompleteFileInfo_Report_Result)("spr_IncompleteFileInfo_Report", actionParameter, branchIDParameter, parameterParameter)
    End Function

    Public Overridable Function spr_Loan_ByLoanNumber_Select(loanNumber As String, fileID As Nullable(Of Integer)) As ObjectResult(Of spr_Loan_ByLoanNumber_Select_Result)
        Dim loanNumberParameter As ObjectParameter = If(loanNumber IsNot Nothing, New ObjectParameter("LoanNumber", loanNumber), New ObjectParameter("LoanNumber", GetType(String)))

        Dim fileIDParameter As ObjectParameter = If(fileID.HasValue, New ObjectParameter("FileID", fileID), New ObjectParameter("FileID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_Loan_ByLoanNumber_Select_Result)("spr_Loan_ByLoanNumber_Select", loanNumberParameter, fileIDParameter)
    End Function

    Public Overridable Function spr_Loan_Insert(fK_FileID As Nullable(Of Integer), fK_LoanTypeID As Nullable(Of Integer), fK_BranchID As Nullable(Of Integer), loanDate As Nullable(Of Date), loanNumber As String, loanSerial As Nullable(Of Integer), sTime As Nullable(Of Date), loanAmount As Nullable(Of Decimal), totalInstallment As Nullable(Of Integer)) As ObjectResult(Of Nullable(Of Decimal))
        Dim fK_FileIDParameter As ObjectParameter = If(fK_FileID.HasValue, New ObjectParameter("FK_FileID", fK_FileID), New ObjectParameter("FK_FileID", GetType(Integer)))

        Dim fK_LoanTypeIDParameter As ObjectParameter = If(fK_LoanTypeID.HasValue, New ObjectParameter("FK_LoanTypeID", fK_LoanTypeID), New ObjectParameter("FK_LoanTypeID", GetType(Integer)))

        Dim fK_BranchIDParameter As ObjectParameter = If(fK_BranchID.HasValue, New ObjectParameter("FK_BranchID", fK_BranchID), New ObjectParameter("FK_BranchID", GetType(Integer)))

        Dim loanDateParameter As ObjectParameter = If(loanDate.HasValue, New ObjectParameter("LoanDate", loanDate), New ObjectParameter("LoanDate", GetType(Date)))

        Dim loanNumberParameter As ObjectParameter = If(loanNumber IsNot Nothing, New ObjectParameter("LoanNumber", loanNumber), New ObjectParameter("LoanNumber", GetType(String)))

        Dim loanSerialParameter As ObjectParameter = If(loanSerial.HasValue, New ObjectParameter("LoanSerial", loanSerial), New ObjectParameter("LoanSerial", GetType(Integer)))

        Dim sTimeParameter As ObjectParameter = If(sTime.HasValue, New ObjectParameter("STime", sTime), New ObjectParameter("STime", GetType(Date)))

        Dim loanAmountParameter As ObjectParameter = If(loanAmount.HasValue, New ObjectParameter("LoanAmount", loanAmount), New ObjectParameter("LoanAmount", GetType(Decimal)))

        Dim totalInstallmentParameter As ObjectParameter = If(totalInstallment.HasValue, New ObjectParameter("TotalInstallment", totalInstallment), New ObjectParameter("TotalInstallment", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of Nullable(Of Decimal))("spr_Loan_Insert", fK_FileIDParameter, fK_LoanTypeIDParameter, fK_BranchIDParameter, loanDateParameter, loanNumberParameter, loanSerialParameter, sTimeParameter, loanAmountParameter, totalInstallmentParameter)
    End Function

    Public Overridable Function spr_Loan_Select(action As Nullable(Of Integer), iD As Nullable(Of Integer), fileID As Nullable(Of Integer), branchID As Nullable(Of Integer)) As ObjectResult(Of spr_Loan_Select_Result)
        Dim actionParameter As ObjectParameter = If(action.HasValue, New ObjectParameter("Action", action), New ObjectParameter("Action", GetType(Integer)))

        Dim iDParameter As ObjectParameter = If(iD.HasValue, New ObjectParameter("ID", iD), New ObjectParameter("ID", GetType(Integer)))

        Dim fileIDParameter As ObjectParameter = If(fileID.HasValue, New ObjectParameter("FileID", fileID), New ObjectParameter("FileID", GetType(Integer)))

        Dim branchIDParameter As ObjectParameter = If(branchID.HasValue, New ObjectParameter("BranchID", branchID), New ObjectParameter("BranchID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_Loan_Select_Result)("spr_Loan_Select", actionParameter, iDParameter, fileIDParameter, branchIDParameter)
    End Function

    Public Overridable Function spr_LoanSponsor_Check_Select(loanID As Nullable(Of Integer), sponsorID As Nullable(Of Integer)) As ObjectResult(Of spr_LoanSponsor_Check_Select_Result)
        Dim loanIDParameter As ObjectParameter = If(loanID.HasValue, New ObjectParameter("LoanID", loanID), New ObjectParameter("LoanID", GetType(Integer)))

        Dim sponsorIDParameter As ObjectParameter = If(sponsorID.HasValue, New ObjectParameter("SponsorID", sponsorID), New ObjectParameter("SponsorID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_LoanSponsor_Check_Select_Result)("spr_LoanSponsor_Check_Select", loanIDParameter, sponsorIDParameter)
    End Function

    Public Overridable Function spr_LoanSponsor_CheckFile_Select(loanID As Nullable(Of Integer)) As ObjectResult(Of spr_LoanSponsor_CheckFile_Select_Result)
        Dim loanIDParameter As ObjectParameter = If(loanID.HasValue, New ObjectParameter("LoanID", loanID), New ObjectParameter("LoanID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_LoanSponsor_CheckFile_Select_Result)("spr_LoanSponsor_CheckFile_Select", loanIDParameter)
    End Function

    Public Overridable Function spr_LoanSponsor_Insert(fK_LoanID As Nullable(Of Integer), fK_SponsorID As Nullable(Of Integer), warantyTypeDesc As String) As ObjectResult(Of Nullable(Of Decimal))
        Dim fK_LoanIDParameter As ObjectParameter = If(fK_LoanID.HasValue, New ObjectParameter("FK_LoanID", fK_LoanID), New ObjectParameter("FK_LoanID", GetType(Integer)))

        Dim fK_SponsorIDParameter As ObjectParameter = If(fK_SponsorID.HasValue, New ObjectParameter("FK_SponsorID", fK_SponsorID), New ObjectParameter("FK_SponsorID", GetType(Integer)))

        Dim warantyTypeDescParameter As ObjectParameter = If(warantyTypeDesc IsNot Nothing, New ObjectParameter("WarantyTypeDesc", warantyTypeDesc), New ObjectParameter("WarantyTypeDesc", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of Nullable(Of Decimal))("spr_LoanSponsor_Insert", fK_LoanIDParameter, fK_SponsorIDParameter, warantyTypeDescParameter)
    End Function

    Public Overridable Function spr_LoanSponsor_List_Select(loanID As Nullable(Of Integer)) As ObjectResult(Of spr_LoanSponsor_List_Select_Result)
        Dim loanIDParameter As ObjectParameter = If(loanID.HasValue, New ObjectParameter("LoanID", loanID), New ObjectParameter("LoanID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_LoanSponsor_List_Select_Result)("spr_LoanSponsor_List_Select", loanIDParameter)
    End Function

    Public Overridable Function spr_LoanType_byCode_Select(loanTypeCode As String) As ObjectResult(Of spr_LoanType_byCode_Select_Result)
        Dim loanTypeCodeParameter As ObjectParameter = If(loanTypeCode IsNot Nothing, New ObjectParameter("LoanTypeCode", loanTypeCode), New ObjectParameter("LoanTypeCode", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_LoanType_byCode_Select_Result)("spr_LoanType_byCode_Select", loanTypeCodeParameter)
    End Function

    Public Overridable Function spr_LoanType_Count_Select(action As Nullable(Of Integer), sEARCHSTR As String) As ObjectResult(Of Nullable(Of Integer))
        Dim actionParameter As ObjectParameter = If(action.HasValue, New ObjectParameter("Action", action), New ObjectParameter("Action", GetType(Integer)))

        Dim sEARCHSTRParameter As ObjectParameter = If(sEARCHSTR IsNot Nothing, New ObjectParameter("SEARCHSTR", sEARCHSTR), New ObjectParameter("SEARCHSTR", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of Nullable(Of Integer))("spr_LoanType_Count_Select", actionParameter, sEARCHSTRParameter)
    End Function

    Public Overridable Function spr_LoanType_Delete(iD As Nullable(Of Integer)) As Integer
        Dim iDParameter As ObjectParameter = If(iD.HasValue, New ObjectParameter("ID", iD), New ObjectParameter("ID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_LoanType_Delete", iDParameter)
    End Function

    Public Overridable Function spr_LoanType_Insert(loanTypeCode As String, loanTypeName As String, fK_CUserID As Nullable(Of Integer), section As String) As ObjectResult(Of Nullable(Of Decimal))
        Dim loanTypeCodeParameter As ObjectParameter = If(loanTypeCode IsNot Nothing, New ObjectParameter("LoanTypeCode", loanTypeCode), New ObjectParameter("LoanTypeCode", GetType(String)))

        Dim loanTypeNameParameter As ObjectParameter = If(loanTypeName IsNot Nothing, New ObjectParameter("LoanTypeName", loanTypeName), New ObjectParameter("LoanTypeName", GetType(String)))

        Dim fK_CUserIDParameter As ObjectParameter = If(fK_CUserID.HasValue, New ObjectParameter("FK_CUserID", fK_CUserID), New ObjectParameter("FK_CUserID", GetType(Integer)))

        Dim sectionParameter As ObjectParameter = If(section IsNot Nothing, New ObjectParameter("Section", section), New ObjectParameter("Section", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of Nullable(Of Decimal))("spr_LoanType_Insert", loanTypeCodeParameter, loanTypeNameParameter, fK_CUserIDParameter, sectionParameter)
    End Function

    Public Overridable Function spr_LoanType_List_Select() As ObjectResult(Of spr_LoanType_List_Select_Result)
        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_LoanType_List_Select_Result)("spr_LoanType_List_Select")
    End Function

    Public Overridable Function spr_LoanType_Management_Select(action As Nullable(Of Integer), fromIndex As Nullable(Of Integer), toIndex As Nullable(Of Integer), sEARCHSTR As String) As ObjectResult(Of spr_LoanType_Management_Select_Result)
        Dim actionParameter As ObjectParameter = If(action.HasValue, New ObjectParameter("Action", action), New ObjectParameter("Action", GetType(Integer)))

        Dim fromIndexParameter As ObjectParameter = If(fromIndex.HasValue, New ObjectParameter("FromIndex", fromIndex), New ObjectParameter("FromIndex", GetType(Integer)))

        Dim toIndexParameter As ObjectParameter = If(toIndex.HasValue, New ObjectParameter("ToIndex", toIndex), New ObjectParameter("ToIndex", GetType(Integer)))

        Dim sEARCHSTRParameter As ObjectParameter = If(sEARCHSTR IsNot Nothing, New ObjectParameter("SEARCHSTR", sEARCHSTR), New ObjectParameter("SEARCHSTR", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_LoanType_Management_Select_Result)("spr_LoanType_Management_Select", actionParameter, fromIndexParameter, toIndexParameter, sEARCHSTRParameter)
    End Function

    Public Overridable Function spr_LoanType_Select(iD As Nullable(Of Integer)) As ObjectResult(Of spr_LoanType_Select_Result)
        Dim iDParameter As ObjectParameter = If(iD.HasValue, New ObjectParameter("ID", iD), New ObjectParameter("ID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_LoanType_Select_Result)("spr_LoanType_Select", iDParameter)
    End Function

    Public Overridable Function spr_LoanType_Update(iD As Nullable(Of Integer), loanTypeCode As String, loanTypeName As String, fK_CUserID As Nullable(Of Integer), section As String) As Integer
        Dim iDParameter As ObjectParameter = If(iD.HasValue, New ObjectParameter("ID", iD), New ObjectParameter("ID", GetType(Integer)))

        Dim loanTypeCodeParameter As ObjectParameter = If(loanTypeCode IsNot Nothing, New ObjectParameter("LoanTypeCode", loanTypeCode), New ObjectParameter("LoanTypeCode", GetType(String)))

        Dim loanTypeNameParameter As ObjectParameter = If(loanTypeName IsNot Nothing, New ObjectParameter("LoanTypeName", loanTypeName), New ObjectParameter("LoanTypeName", GetType(String)))

        Dim fK_CUserIDParameter As ObjectParameter = If(fK_CUserID.HasValue, New ObjectParameter("FK_CUserID", fK_CUserID), New ObjectParameter("FK_CUserID", GetType(Integer)))

        Dim sectionParameter As ObjectParameter = If(section IsNot Nothing, New ObjectParameter("Section", section), New ObjectParameter("Section", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_LoanType_Update", iDParameter, loanTypeCodeParameter, loanTypeNameParameter, fK_CUserIDParameter, sectionParameter)
    End Function

    Public Overridable Function spr_LogCurrentLCStatus_F_Insert(fK_LogHeaderID As Nullable(Of Integer), fK_CurrentLCStatusID As Nullable(Of Integer), success As Nullable(Of Boolean), remarks As String) As Integer
        Dim fK_LogHeaderIDParameter As ObjectParameter = If(fK_LogHeaderID.HasValue, New ObjectParameter("FK_LogHeaderID", fK_LogHeaderID), New ObjectParameter("FK_LogHeaderID", GetType(Integer)))

        Dim fK_CurrentLCStatusIDParameter As ObjectParameter = If(fK_CurrentLCStatusID.HasValue, New ObjectParameter("FK_CurrentLCStatusID", fK_CurrentLCStatusID), New ObjectParameter("FK_CurrentLCStatusID", GetType(Integer)))

        Dim successParameter As ObjectParameter = If(success.HasValue, New ObjectParameter("Success", success), New ObjectParameter("Success", GetType(Boolean)))

        Dim remarksParameter As ObjectParameter = If(remarks IsNot Nothing, New ObjectParameter("Remarks", remarks), New ObjectParameter("Remarks", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_LogCurrentLCStatus_F_Insert", fK_LogHeaderIDParameter, fK_CurrentLCStatusIDParameter, successParameter, remarksParameter)
    End Function

    Public Overridable Function spr_LogCurrentLCStatus_H_ForDate_Select([date] As Nullable(Of Date)) As ObjectResult(Of spr_LogCurrentLCStatus_H_ForDate_Select_Result)
        Dim dateParameter As ObjectParameter = If([date].HasValue, New ObjectParameter("Date", [date]), New ObjectParameter("Date", GetType(Date)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_LogCurrentLCStatus_H_ForDate_Select_Result)("spr_LogCurrentLCStatus_H_ForDate_Select", dateParameter)
    End Function

    Public Overridable Function spr_LogCurrentLCStatus_H_Insert([date] As Nullable(Of Date), sTime As Nullable(Of Date), success As Nullable(Of Boolean), remarks As String, tryTime As Nullable(Of Integer)) As ObjectResult(Of Nullable(Of Decimal))
        Dim dateParameter As ObjectParameter = If([date].HasValue, New ObjectParameter("Date", [date]), New ObjectParameter("Date", GetType(Date)))

        Dim sTimeParameter As ObjectParameter = If(sTime.HasValue, New ObjectParameter("STime", sTime), New ObjectParameter("STime", GetType(Date)))

        Dim successParameter As ObjectParameter = If(success.HasValue, New ObjectParameter("Success", success), New ObjectParameter("Success", GetType(Boolean)))

        Dim remarksParameter As ObjectParameter = If(remarks IsNot Nothing, New ObjectParameter("Remarks", remarks), New ObjectParameter("Remarks", GetType(String)))

        Dim tryTimeParameter As ObjectParameter = If(tryTime.HasValue, New ObjectParameter("tryTime", tryTime), New ObjectParameter("tryTime", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of Nullable(Of Decimal))("spr_LogCurrentLCStatus_H_Insert", dateParameter, sTimeParameter, successParameter, remarksParameter, tryTimeParameter)
    End Function

    Public Overridable Function spr_LogCurrentLCStatus_Report(action As Nullable(Of Integer), fromDate As Nullable(Of Date), toDate As Nullable(Of Date), isSuccess As Nullable(Of Boolean)) As ObjectResult(Of spr_LogCurrentLCStatus_Report_Result)
        Dim actionParameter As ObjectParameter = If(action.HasValue, New ObjectParameter("Action", action), New ObjectParameter("Action", GetType(Integer)))

        Dim fromDateParameter As ObjectParameter = If(fromDate.HasValue, New ObjectParameter("FromDate", fromDate), New ObjectParameter("FromDate", GetType(Date)))

        Dim toDateParameter As ObjectParameter = If(toDate.HasValue, New ObjectParameter("ToDate", toDate), New ObjectParameter("ToDate", GetType(Date)))

        Dim isSuccessParameter As ObjectParameter = If(isSuccess.HasValue, New ObjectParameter("IsSuccess", isSuccess), New ObjectParameter("IsSuccess", GetType(Boolean)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_LogCurrentLCStatus_Report_Result)("spr_LogCurrentLCStatus_Report", actionParameter, fromDateParameter, toDateParameter, isSuccessParameter)
    End Function

    Public Overridable Function spr_Menu_CheckUserAccess_Select(userID As Nullable(Of Integer), className As String) As ObjectResult(Of spr_Menu_CheckUserAccess_Select_Result)
        Dim userIDParameter As ObjectParameter = If(userID.HasValue, New ObjectParameter("UserID", userID), New ObjectParameter("UserID", GetType(Integer)))

        Dim classNameParameter As ObjectParameter = If(className IsNot Nothing, New ObjectParameter("ClassName", className), New ObjectParameter("ClassName", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_Menu_CheckUserAccess_Select_Result)("spr_Menu_CheckUserAccess_Select", userIDParameter, classNameParameter)
    End Function

    Public Overridable Function spr_Menu_ChildSelect(action As Nullable(Of Integer), userID As Nullable(Of Integer), parentID As Nullable(Of Integer)) As ObjectResult(Of spr_Menu_ChildSelect_Result)
        Dim actionParameter As ObjectParameter = If(action.HasValue, New ObjectParameter("Action", action), New ObjectParameter("Action", GetType(Integer)))

        Dim userIDParameter As ObjectParameter = If(userID.HasValue, New ObjectParameter("UserID", userID), New ObjectParameter("UserID", GetType(Integer)))

        Dim parentIDParameter As ObjectParameter = If(parentID.HasValue, New ObjectParameter("ParentID", parentID), New ObjectParameter("ParentID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_Menu_ChildSelect_Result)("spr_Menu_ChildSelect", actionParameter, userIDParameter, parentIDParameter)
    End Function

    Public Overridable Function spr_Menu_Leaf_List_Select() As ObjectResult(Of spr_Menu_Leaf_List_Select_Result)
        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_Menu_Leaf_List_Select_Result)("spr_Menu_Leaf_List_Select")
    End Function

    Public Overridable Function spr_Menu_PageTitle_Select(className As String) As ObjectResult(Of spr_Menu_PageTitle_Select_Result)
        Dim classNameParameter As ObjectParameter = If(className IsNot Nothing, New ObjectParameter("ClassName", className), New ObjectParameter("ClassName", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_Menu_PageTitle_Select_Result)("spr_Menu_PageTitle_Select", classNameParameter)
    End Function

    Public Overridable Function spr_Menu_Parent_Select(action As Nullable(Of Integer), userID As Nullable(Of Integer)) As ObjectResult(Of spr_Menu_Parent_Select_Result)
        Dim actionParameter As ObjectParameter = If(action.HasValue, New ObjectParameter("Action", action), New ObjectParameter("Action", GetType(Integer)))

        Dim userIDParameter As ObjectParameter = If(userID.HasValue, New ObjectParameter("UserID", userID), New ObjectParameter("UserID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_Menu_Parent_Select_Result)("spr_Menu_Parent_Select", actionParameter, userIDParameter)
    End Function

    Public Overridable Function spr_NotificationCharge_Select(from As Nullable(Of Date), [to] As Nullable(Of Date), lonaID As Nullable(Of Integer)) As ObjectResult(Of spr_NotificationCharge_Select_Result)
        Dim fromParameter As ObjectParameter = If(from.HasValue, New ObjectParameter("From", from), New ObjectParameter("From", GetType(Date)))

        Dim toParameter As ObjectParameter = If([to].HasValue, New ObjectParameter("To", [to]), New ObjectParameter("To", GetType(Date)))

        Dim lonaIDParameter As ObjectParameter = If(lonaID.HasValue, New ObjectParameter("LonaID", lonaID), New ObjectParameter("LonaID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_NotificationCharge_Select_Result)("spr_NotificationCharge_Select", fromParameter, toParameter, lonaIDParameter)
    End Function

    Public Overridable Function spr_NotificationTarif_Count_Select(action As Nullable(Of Integer), sEARCHSTR As String) As ObjectResult(Of Nullable(Of Integer))
        Dim actionParameter As ObjectParameter = If(action.HasValue, New ObjectParameter("Action", action), New ObjectParameter("Action", GetType(Integer)))

        Dim sEARCHSTRParameter As ObjectParameter = If(sEARCHSTR IsNot Nothing, New ObjectParameter("SEARCHSTR", sEARCHSTR), New ObjectParameter("SEARCHSTR", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of Nullable(Of Integer))("spr_NotificationTarif_Count_Select", actionParameter, sEARCHSTRParameter)
    End Function

    Public Overridable Function spr_NotificationTarif_Delete(iD As Nullable(Of Integer)) As Integer
        Dim iDParameter As ObjectParameter = If(iD.HasValue, New ObjectParameter("ID", iD), New ObjectParameter("ID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_NotificationTarif_Delete", iDParameter)
    End Function

    Public Overridable Function spr_NotificationTarif_Insert(notificationTypeID As Nullable(Of Integer), fromDate As Nullable(Of Date), toDate As Nullable(Of Date), amount As Nullable(Of Decimal)) As Integer
        Dim notificationTypeIDParameter As ObjectParameter = If(notificationTypeID.HasValue, New ObjectParameter("NotificationTypeID", notificationTypeID), New ObjectParameter("NotificationTypeID", GetType(Integer)))

        Dim fromDateParameter As ObjectParameter = If(fromDate.HasValue, New ObjectParameter("FromDate", fromDate), New ObjectParameter("FromDate", GetType(Date)))

        Dim toDateParameter As ObjectParameter = If(toDate.HasValue, New ObjectParameter("ToDate", toDate), New ObjectParameter("ToDate", GetType(Date)))

        Dim amountParameter As ObjectParameter = If(amount.HasValue, New ObjectParameter("Amount", amount), New ObjectParameter("Amount", GetType(Decimal)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_NotificationTarif_Insert", notificationTypeIDParameter, fromDateParameter, toDateParameter, amountParameter)
    End Function

    Public Overridable Function spr_NotificationTarif_Management_Select(action As Nullable(Of Integer), fromIndex As Nullable(Of Integer), toIndex As Nullable(Of Integer), sEARCHSTR As String) As ObjectResult(Of spr_NotificationTarif_Management_Select_Result)
        Dim actionParameter As ObjectParameter = If(action.HasValue, New ObjectParameter("Action", action), New ObjectParameter("Action", GetType(Integer)))

        Dim fromIndexParameter As ObjectParameter = If(fromIndex.HasValue, New ObjectParameter("FromIndex", fromIndex), New ObjectParameter("FromIndex", GetType(Integer)))

        Dim toIndexParameter As ObjectParameter = If(toIndex.HasValue, New ObjectParameter("ToIndex", toIndex), New ObjectParameter("ToIndex", GetType(Integer)))

        Dim sEARCHSTRParameter As ObjectParameter = If(sEARCHSTR IsNot Nothing, New ObjectParameter("SEARCHSTR", sEARCHSTR), New ObjectParameter("SEARCHSTR", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_NotificationTarif_Management_Select_Result)("spr_NotificationTarif_Management_Select", actionParameter, fromIndexParameter, toIndexParameter, sEARCHSTRParameter)
    End Function

    Public Overridable Function spr_NotificationTarif_Select(action As Nullable(Of Integer), iD As Nullable(Of Integer)) As ObjectResult(Of spr_NotificationTarif_Select_Result)
        Dim actionParameter As ObjectParameter = If(action.HasValue, New ObjectParameter("Action", action), New ObjectParameter("Action", GetType(Integer)))

        Dim iDParameter As ObjectParameter = If(iD.HasValue, New ObjectParameter("ID", iD), New ObjectParameter("ID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_NotificationTarif_Select_Result)("spr_NotificationTarif_Select", actionParameter, iDParameter)
    End Function

    Public Overridable Function spr_NotificationTarif_Update(iD As Nullable(Of Integer), notificationTypeID As Nullable(Of Integer), fromDate As Nullable(Of Date), toDate As Nullable(Of Date), amount As Nullable(Of Decimal)) As Integer
        Dim iDParameter As ObjectParameter = If(iD.HasValue, New ObjectParameter("ID", iD), New ObjectParameter("ID", GetType(Integer)))

        Dim notificationTypeIDParameter As ObjectParameter = If(notificationTypeID.HasValue, New ObjectParameter("NotificationTypeID", notificationTypeID), New ObjectParameter("NotificationTypeID", GetType(Integer)))

        Dim fromDateParameter As ObjectParameter = If(fromDate.HasValue, New ObjectParameter("FromDate", fromDate), New ObjectParameter("FromDate", GetType(Date)))

        Dim toDateParameter As ObjectParameter = If(toDate.HasValue, New ObjectParameter("ToDate", toDate), New ObjectParameter("ToDate", GetType(Date)))

        Dim amountParameter As ObjectParameter = If(amount.HasValue, New ObjectParameter("Amount", amount), New ObjectParameter("Amount", GetType(Decimal)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_NotificationTarif_Update", iDParameter, notificationTypeIDParameter, fromDateParameter, toDateParameter, amountParameter)
    End Function

    Public Overridable Function spr_NotPiadDurationDay_Select(loanID As Nullable(Of Integer)) As ObjectResult(Of spr_NotPiadDurationDay_Select_Result)
        Dim loanIDParameter As ObjectParameter = If(loanID.HasValue, New ObjectParameter("LoanID", loanID), New ObjectParameter("LoanID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_NotPiadDurationDay_Select_Result)("spr_NotPiadDurationDay_Select", loanIDParameter)
    End Function

    Public Overridable Function spr_PreDraftText_Delete(fK_PreWarningIntervalsID As Nullable(Of Integer), draftType As Nullable(Of Byte)) As Integer
        Dim fK_PreWarningIntervalsIDParameter As ObjectParameter = If(fK_PreWarningIntervalsID.HasValue, New ObjectParameter("FK_PreWarningIntervalsID", fK_PreWarningIntervalsID), New ObjectParameter("FK_PreWarningIntervalsID", GetType(Integer)))

        Dim draftTypeParameter As ObjectParameter = If(draftType.HasValue, New ObjectParameter("DraftType", draftType), New ObjectParameter("DraftType", GetType(Byte)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_PreDraftText_Delete", fK_PreWarningIntervalsIDParameter, draftTypeParameter)
    End Function

    Public Overridable Function spr_PreDraftText_Insert(orderInLevel As Nullable(Of Integer), preWarningIntervalsID As Nullable(Of Integer), draftText As String, isDynamic As Nullable(Of Boolean), draftType As Nullable(Of Byte), fK_VoiceRecordID As Nullable(Of Integer)) As Integer
        Dim orderInLevelParameter As ObjectParameter = If(orderInLevel.HasValue, New ObjectParameter("OrderInLevel", orderInLevel), New ObjectParameter("OrderInLevel", GetType(Integer)))

        Dim preWarningIntervalsIDParameter As ObjectParameter = If(preWarningIntervalsID.HasValue, New ObjectParameter("PreWarningIntervalsID", preWarningIntervalsID), New ObjectParameter("PreWarningIntervalsID", GetType(Integer)))

        Dim draftTextParameter As ObjectParameter = If(draftText IsNot Nothing, New ObjectParameter("DraftText", draftText), New ObjectParameter("DraftText", GetType(String)))

        Dim isDynamicParameter As ObjectParameter = If(isDynamic.HasValue, New ObjectParameter("IsDynamic", isDynamic), New ObjectParameter("IsDynamic", GetType(Boolean)))

        Dim draftTypeParameter As ObjectParameter = If(draftType.HasValue, New ObjectParameter("DraftType", draftType), New ObjectParameter("DraftType", GetType(Byte)))

        Dim fK_VoiceRecordIDParameter As ObjectParameter = If(fK_VoiceRecordID.HasValue, New ObjectParameter("FK_VoiceRecordID", fK_VoiceRecordID), New ObjectParameter("FK_VoiceRecordID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_PreDraftText_Insert", orderInLevelParameter, preWarningIntervalsIDParameter, draftTextParameter, isDynamicParameter, draftTypeParameter, fK_VoiceRecordIDParameter)
    End Function

    Public Overridable Function spr_PreDraftText_List_Select(draftTypeID As Nullable(Of Integer), preWarningIntervalID As Nullable(Of Integer)) As ObjectResult(Of spr_PreDraftText_List_Select_Result)
        Dim draftTypeIDParameter As ObjectParameter = If(draftTypeID.HasValue, New ObjectParameter("DraftTypeID", draftTypeID), New ObjectParameter("DraftTypeID", GetType(Integer)))

        Dim preWarningIntervalIDParameter As ObjectParameter = If(preWarningIntervalID.HasValue, New ObjectParameter("PreWarningIntervalID", preWarningIntervalID), New ObjectParameter("PreWarningIntervalID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_PreDraftText_List_Select_Result)("spr_PreDraftText_List_Select", draftTypeIDParameter, preWarningIntervalIDParameter)
    End Function

    Public Overridable Function spr_PreDraftText_Select(action As Nullable(Of Integer), iD As Nullable(Of Integer), draftType As Nullable(Of Byte), preWarningIntervalsID As Nullable(Of Integer)) As ObjectResult(Of spr_PreDraftText_Select_Result)
        Dim actionParameter As ObjectParameter = If(action.HasValue, New ObjectParameter("Action", action), New ObjectParameter("Action", GetType(Integer)))

        Dim iDParameter As ObjectParameter = If(iD.HasValue, New ObjectParameter("ID", iD), New ObjectParameter("ID", GetType(Integer)))

        Dim draftTypeParameter As ObjectParameter = If(draftType.HasValue, New ObjectParameter("DraftType", draftType), New ObjectParameter("DraftType", GetType(Byte)))

        Dim preWarningIntervalsIDParameter As ObjectParameter = If(preWarningIntervalsID.HasValue, New ObjectParameter("PreWarningIntervalsID", preWarningIntervalsID), New ObjectParameter("PreWarningIntervalsID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_PreDraftText_Select_Result)("spr_PreDraftText_Select", actionParameter, iDParameter, draftTypeParameter, preWarningIntervalsIDParameter)
    End Function

    Public Overridable Function spr_PreDraftText_Update(iD As Nullable(Of Integer), preWarningIntervalsID As Nullable(Of Integer), orderInLevel As Nullable(Of Integer), draftText As String, isDynamic As Nullable(Of Boolean), draftType As Nullable(Of Byte), fK_VoiceRecordID As Nullable(Of Integer)) As Integer
        Dim iDParameter As ObjectParameter = If(iD.HasValue, New ObjectParameter("ID", iD), New ObjectParameter("ID", GetType(Integer)))

        Dim preWarningIntervalsIDParameter As ObjectParameter = If(preWarningIntervalsID.HasValue, New ObjectParameter("PreWarningIntervalsID", preWarningIntervalsID), New ObjectParameter("PreWarningIntervalsID", GetType(Integer)))

        Dim orderInLevelParameter As ObjectParameter = If(orderInLevel.HasValue, New ObjectParameter("OrderInLevel", orderInLevel), New ObjectParameter("OrderInLevel", GetType(Integer)))

        Dim draftTextParameter As ObjectParameter = If(draftText IsNot Nothing, New ObjectParameter("DraftText", draftText), New ObjectParameter("DraftText", GetType(String)))

        Dim isDynamicParameter As ObjectParameter = If(isDynamic.HasValue, New ObjectParameter("IsDynamic", isDynamic), New ObjectParameter("IsDynamic", GetType(Boolean)))

        Dim draftTypeParameter As ObjectParameter = If(draftType.HasValue, New ObjectParameter("DraftType", draftType), New ObjectParameter("DraftType", GetType(Byte)))

        Dim fK_VoiceRecordIDParameter As ObjectParameter = If(fK_VoiceRecordID.HasValue, New ObjectParameter("FK_VoiceRecordID", fK_VoiceRecordID), New ObjectParameter("FK_VoiceRecordID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_PreDraftText_Update", iDParameter, preWarningIntervalsIDParameter, orderInLevelParameter, draftTextParameter, isDynamicParameter, draftTypeParameter, fK_VoiceRecordIDParameter)
    End Function

    Public Overridable Function spr_PreNotifiyCurrentLCStatus_Bulk_Insert(selectStatement As String) As Integer
        Dim selectStatementParameter As ObjectParameter = If(selectStatement IsNot Nothing, New ObjectParameter("SelectStatement", selectStatement), New ObjectParameter("SelectStatement", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_PreNotifiyCurrentLCStatus_Bulk_Insert", selectStatementParameter)
    End Function

    Public Overridable Function spr_PreNotifiyCurrentLCStatus_Delete() As Integer
        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_PreNotifiyCurrentLCStatus_Delete")
    End Function

    Public Overridable Function spr_PreNotifiyCurrentLCStatus_List_Select() As ObjectResult(Of spr_PreNotifiyCurrentLCStatus_List_Select_Result)
        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_PreNotifiyCurrentLCStatus_List_Select_Result)("spr_PreNotifiyCurrentLCStatus_List_Select")
    End Function

    Public Overridable Function spr_PreNotifiyCurrentLCStatus_Process_Update(fromID As Nullable(Of Integer), toID As Nullable(Of Integer)) As Integer
        Dim fromIDParameter As ObjectParameter = If(fromID.HasValue, New ObjectParameter("FromID", fromID), New ObjectParameter("FromID", GetType(Integer)))

        Dim toIDParameter As ObjectParameter = If(toID.HasValue, New ObjectParameter("ToID", toID), New ObjectParameter("ToID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_PreNotifiyCurrentLCStatus_Process_Update", fromIDParameter, toIDParameter)
    End Function

    Public Overridable Function spr_PreWarningIntervals_Check_Select(fK_LoanTypeID As Nullable(Of Integer), firstNoPaidDate As Nullable(Of Date), branchID As Nullable(Of Integer)) As ObjectResult(Of spr_PreWarningIntervals_Check_Select_Result)
        Dim fK_LoanTypeIDParameter As ObjectParameter = If(fK_LoanTypeID.HasValue, New ObjectParameter("FK_LoanTypeID", fK_LoanTypeID), New ObjectParameter("FK_LoanTypeID", GetType(Integer)))

        Dim firstNoPaidDateParameter As ObjectParameter = If(firstNoPaidDate.HasValue, New ObjectParameter("FirstNoPaidDate", firstNoPaidDate), New ObjectParameter("FirstNoPaidDate", GetType(Date)))

        Dim branchIDParameter As ObjectParameter = If(branchID.HasValue, New ObjectParameter("BranchID", branchID), New ObjectParameter("BranchID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_PreWarningIntervals_Check_Select_Result)("spr_PreWarningIntervals_Check_Select", fK_LoanTypeIDParameter, firstNoPaidDateParameter, branchIDParameter)
    End Function

    Public Overridable Function spr_PreWarningIntervals_CheckOverlap_Select(action As Nullable(Of Integer), warningIntervalsID As Nullable(Of Integer), loanTypeID As Nullable(Of Integer), fromDay As Nullable(Of Integer), branchID As Nullable(Of Integer)) As ObjectResult(Of spr_PreWarningIntervals_CheckOverlap_Select_Result)
        Dim actionParameter As ObjectParameter = If(action.HasValue, New ObjectParameter("Action", action), New ObjectParameter("Action", GetType(Integer)))

        Dim warningIntervalsIDParameter As ObjectParameter = If(warningIntervalsID.HasValue, New ObjectParameter("WarningIntervalsID", warningIntervalsID), New ObjectParameter("WarningIntervalsID", GetType(Integer)))

        Dim loanTypeIDParameter As ObjectParameter = If(loanTypeID.HasValue, New ObjectParameter("LoanTypeID", loanTypeID), New ObjectParameter("LoanTypeID", GetType(Integer)))

        Dim fromDayParameter As ObjectParameter = If(fromDay.HasValue, New ObjectParameter("FromDay", fromDay), New ObjectParameter("FromDay", GetType(Integer)))

        Dim branchIDParameter As ObjectParameter = If(branchID.HasValue, New ObjectParameter("BranchID", branchID), New ObjectParameter("BranchID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_PreWarningIntervals_CheckOverlap_Select_Result)("spr_PreWarningIntervals_CheckOverlap_Select", actionParameter, warningIntervalsIDParameter, loanTypeIDParameter, fromDayParameter, branchIDParameter)
    End Function

    Public Overridable Function spr_PreWarningIntervals_Count_Select(action As Nullable(Of Integer), sEARCHSTR As String, branchID As Nullable(Of Integer), provinceID As Nullable(Of Integer)) As ObjectResult(Of Nullable(Of Integer))
        Dim actionParameter As ObjectParameter = If(action.HasValue, New ObjectParameter("Action", action), New ObjectParameter("Action", GetType(Integer)))

        Dim sEARCHSTRParameter As ObjectParameter = If(sEARCHSTR IsNot Nothing, New ObjectParameter("SEARCHSTR", sEARCHSTR), New ObjectParameter("SEARCHSTR", GetType(String)))

        Dim branchIDParameter As ObjectParameter = If(branchID.HasValue, New ObjectParameter("BranchID", branchID), New ObjectParameter("BranchID", GetType(Integer)))

        Dim provinceIDParameter As ObjectParameter = If(provinceID.HasValue, New ObjectParameter("provinceID", provinceID), New ObjectParameter("provinceID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of Nullable(Of Integer))("spr_PreWarningIntervals_Count_Select", actionParameter, sEARCHSTRParameter, branchIDParameter, provinceIDParameter)
    End Function

    Public Overridable Function spr_PreWarningIntervals_Delete(iD As Nullable(Of Integer)) As Integer
        Dim iDParameter As ObjectParameter = If(iD.HasValue, New ObjectParameter("ID", iD), New ObjectParameter("ID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_PreWarningIntervals_Delete", iDParameter)
    End Function

    Public Overridable Function spr_PreWarningIntervals_Inerval_List_Select() As ObjectResult(Of Nullable(Of Integer))
        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of Nullable(Of Integer))("spr_PreWarningIntervals_Inerval_List_Select")
    End Function

    Public Overridable Function spr_PreWarningIntervals_Insert(onDay As Nullable(Of Integer), warniningTitle As String, sendSMS As Nullable(Of Boolean), voiceMessage As Nullable(Of Boolean), fK_CUserID As Nullable(Of Integer), minimumAmount As Nullable(Of Decimal), loanAmount As Nullable(Of Decimal), instalmentAmount As Nullable(Of Decimal), iSActive As Nullable(Of Boolean)) As ObjectResult(Of Nullable(Of Decimal))
        Dim onDayParameter As ObjectParameter = If(onDay.HasValue, New ObjectParameter("OnDay", onDay), New ObjectParameter("OnDay", GetType(Integer)))

        Dim warniningTitleParameter As ObjectParameter = If(warniningTitle IsNot Nothing, New ObjectParameter("WarniningTitle", warniningTitle), New ObjectParameter("WarniningTitle", GetType(String)))

        Dim sendSMSParameter As ObjectParameter = If(sendSMS.HasValue, New ObjectParameter("SendSMS", sendSMS), New ObjectParameter("SendSMS", GetType(Boolean)))

        Dim voiceMessageParameter As ObjectParameter = If(voiceMessage.HasValue, New ObjectParameter("VoiceMessage", voiceMessage), New ObjectParameter("VoiceMessage", GetType(Boolean)))

        Dim fK_CUserIDParameter As ObjectParameter = If(fK_CUserID.HasValue, New ObjectParameter("FK_CUserID", fK_CUserID), New ObjectParameter("FK_CUserID", GetType(Integer)))

        Dim minimumAmountParameter As ObjectParameter = If(minimumAmount.HasValue, New ObjectParameter("MinimumAmount", minimumAmount), New ObjectParameter("MinimumAmount", GetType(Decimal)))

        Dim loanAmountParameter As ObjectParameter = If(loanAmount.HasValue, New ObjectParameter("LoanAmount", loanAmount), New ObjectParameter("LoanAmount", GetType(Decimal)))

        Dim instalmentAmountParameter As ObjectParameter = If(instalmentAmount.HasValue, New ObjectParameter("InstalmentAmount", instalmentAmount), New ObjectParameter("InstalmentAmount", GetType(Decimal)))

        Dim iSActiveParameter As ObjectParameter = If(iSActive.HasValue, New ObjectParameter("ISActive", iSActive), New ObjectParameter("ISActive", GetType(Boolean)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of Nullable(Of Decimal))("spr_PreWarningIntervals_Insert", onDayParameter, warniningTitleParameter, sendSMSParameter, voiceMessageParameter, fK_CUserIDParameter, minimumAmountParameter, loanAmountParameter, instalmentAmountParameter, iSActiveParameter)
    End Function

    Public Overridable Function spr_PreWarningIntervals_Management_Select(action As Nullable(Of Integer), fromIndex As Nullable(Of Integer), toIndex As Nullable(Of Integer), sEARCHSTR As String, branchID As Nullable(Of Integer), provinceID As Nullable(Of Integer)) As ObjectResult(Of spr_PreWarningIntervals_Management_Select_Result)
        Dim actionParameter As ObjectParameter = If(action.HasValue, New ObjectParameter("Action", action), New ObjectParameter("Action", GetType(Integer)))

        Dim fromIndexParameter As ObjectParameter = If(fromIndex.HasValue, New ObjectParameter("FromIndex", fromIndex), New ObjectParameter("FromIndex", GetType(Integer)))

        Dim toIndexParameter As ObjectParameter = If(toIndex.HasValue, New ObjectParameter("ToIndex", toIndex), New ObjectParameter("ToIndex", GetType(Integer)))

        Dim sEARCHSTRParameter As ObjectParameter = If(sEARCHSTR IsNot Nothing, New ObjectParameter("SEARCHSTR", sEARCHSTR), New ObjectParameter("SEARCHSTR", GetType(String)))

        Dim branchIDParameter As ObjectParameter = If(branchID.HasValue, New ObjectParameter("BranchID", branchID), New ObjectParameter("BranchID", GetType(Integer)))

        Dim provinceIDParameter As ObjectParameter = If(provinceID.HasValue, New ObjectParameter("ProvinceID", provinceID), New ObjectParameter("ProvinceID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_PreWarningIntervals_Management_Select_Result)("spr_PreWarningIntervals_Management_Select", actionParameter, fromIndexParameter, toIndexParameter, sEARCHSTRParameter, branchIDParameter, provinceIDParameter)
    End Function

    Public Overridable Function spr_PreWarningIntervals_Select(iD As Nullable(Of Integer)) As ObjectResult(Of spr_PreWarningIntervals_Select_Result)
        Dim iDParameter As ObjectParameter = If(iD.HasValue, New ObjectParameter("ID", iD), New ObjectParameter("ID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_PreWarningIntervals_Select_Result)("spr_PreWarningIntervals_Select", iDParameter)
    End Function

    Public Overridable Function spr_PreWarningIntervals_Update(iD As Nullable(Of Integer), onDay As Nullable(Of Integer), warniningTitle As String, sendSMS As Nullable(Of Boolean), voiceMessage As Nullable(Of Boolean), fK_EUserID As Nullable(Of Integer), minimumAmount As Nullable(Of Decimal), loanAmount As Nullable(Of Decimal), instalmentAmount As Nullable(Of Decimal), iSActive As Nullable(Of Boolean)) As Integer
        Dim iDParameter As ObjectParameter = If(iD.HasValue, New ObjectParameter("ID", iD), New ObjectParameter("ID", GetType(Integer)))

        Dim onDayParameter As ObjectParameter = If(onDay.HasValue, New ObjectParameter("OnDay", onDay), New ObjectParameter("OnDay", GetType(Integer)))

        Dim warniningTitleParameter As ObjectParameter = If(warniningTitle IsNot Nothing, New ObjectParameter("WarniningTitle", warniningTitle), New ObjectParameter("WarniningTitle", GetType(String)))

        Dim sendSMSParameter As ObjectParameter = If(sendSMS.HasValue, New ObjectParameter("SendSMS", sendSMS), New ObjectParameter("SendSMS", GetType(Boolean)))

        Dim voiceMessageParameter As ObjectParameter = If(voiceMessage.HasValue, New ObjectParameter("VoiceMessage", voiceMessage), New ObjectParameter("VoiceMessage", GetType(Boolean)))

        Dim fK_EUserIDParameter As ObjectParameter = If(fK_EUserID.HasValue, New ObjectParameter("FK_EUserID", fK_EUserID), New ObjectParameter("FK_EUserID", GetType(Integer)))

        Dim minimumAmountParameter As ObjectParameter = If(minimumAmount.HasValue, New ObjectParameter("MinimumAmount", minimumAmount), New ObjectParameter("MinimumAmount", GetType(Decimal)))

        Dim loanAmountParameter As ObjectParameter = If(loanAmount.HasValue, New ObjectParameter("LoanAmount", loanAmount), New ObjectParameter("LoanAmount", GetType(Decimal)))

        Dim instalmentAmountParameter As ObjectParameter = If(instalmentAmount.HasValue, New ObjectParameter("InstalmentAmount", instalmentAmount), New ObjectParameter("InstalmentAmount", GetType(Decimal)))

        Dim iSActiveParameter As ObjectParameter = If(iSActive.HasValue, New ObjectParameter("ISActive", iSActive), New ObjectParameter("ISActive", GetType(Boolean)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_PreWarningIntervals_Update", iDParameter, onDayParameter, warniningTitleParameter, sendSMSParameter, voiceMessageParameter, fK_EUserIDParameter, minimumAmountParameter, loanAmountParameter, instalmentAmountParameter, iSActiveParameter)
    End Function

    Public Overridable Function spr_PreWarningIntervalsBranch_Check_Select(warningIntervalID As Nullable(Of Integer), branchID As Nullable(Of Integer)) As ObjectResult(Of Nullable(Of Integer))
        Dim warningIntervalIDParameter As ObjectParameter = If(warningIntervalID.HasValue, New ObjectParameter("WarningIntervalID", warningIntervalID), New ObjectParameter("WarningIntervalID", GetType(Integer)))

        Dim branchIDParameter As ObjectParameter = If(branchID.HasValue, New ObjectParameter("BranchID", branchID), New ObjectParameter("BranchID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of Nullable(Of Integer))("spr_PreWarningIntervalsBranch_Check_Select", warningIntervalIDParameter, branchIDParameter)
    End Function

    Public Overridable Function spr_PreWarningIntervalsBranch_Delete(fK_PreWarningIntervalID As Nullable(Of Integer)) As Integer
        Dim fK_PreWarningIntervalIDParameter As ObjectParameter = If(fK_PreWarningIntervalID.HasValue, New ObjectParameter("FK_PreWarningIntervalID", fK_PreWarningIntervalID), New ObjectParameter("FK_PreWarningIntervalID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_PreWarningIntervalsBranch_Delete", fK_PreWarningIntervalIDParameter)
    End Function

    Public Overridable Function spr_PreWarningIntervalsBranch_Insert(fK_PreWarningIntervalID As Nullable(Of Integer), fK_BranchID As Nullable(Of Integer)) As Integer
        Dim fK_PreWarningIntervalIDParameter As ObjectParameter = If(fK_PreWarningIntervalID.HasValue, New ObjectParameter("FK_PreWarningIntervalID", fK_PreWarningIntervalID), New ObjectParameter("FK_PreWarningIntervalID", GetType(Integer)))

        Dim fK_BranchIDParameter As ObjectParameter = If(fK_BranchID.HasValue, New ObjectParameter("FK_BranchID", fK_BranchID), New ObjectParameter("FK_BranchID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_PreWarningIntervalsBranch_Insert", fK_PreWarningIntervalIDParameter, fK_BranchIDParameter)
    End Function

    Public Overridable Function spr_PreWarningIntervalsBranch_List_Select() As ObjectResult(Of String)
        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of String)("spr_PreWarningIntervalsBranch_List_Select")
    End Function

    Public Overridable Function spr_PreWarningIntervalsBranchProvince_Check_Select(warningIntervalID As Nullable(Of Integer), provinceID As Nullable(Of Integer)) As ObjectResult(Of Nullable(Of Integer))
        Dim warningIntervalIDParameter As ObjectParameter = If(warningIntervalID.HasValue, New ObjectParameter("WarningIntervalID", warningIntervalID), New ObjectParameter("WarningIntervalID", GetType(Integer)))

        Dim provinceIDParameter As ObjectParameter = If(provinceID.HasValue, New ObjectParameter("ProvinceID", provinceID), New ObjectParameter("ProvinceID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of Nullable(Of Integer))("spr_PreWarningIntervalsBranchProvince_Check_Select", warningIntervalIDParameter, provinceIDParameter)
    End Function

    Public Overridable Function spr_PreWarningIntervalsLoanType_Insert(fK_PreWarningIntervalID As Nullable(Of Integer), fK_LoanTypeID As Nullable(Of Integer)) As Integer
        Dim fK_PreWarningIntervalIDParameter As ObjectParameter = If(fK_PreWarningIntervalID.HasValue, New ObjectParameter("FK_PreWarningIntervalID", fK_PreWarningIntervalID), New ObjectParameter("FK_PreWarningIntervalID", GetType(Integer)))

        Dim fK_LoanTypeIDParameter As ObjectParameter = If(fK_LoanTypeID.HasValue, New ObjectParameter("FK_LoanTypeID", fK_LoanTypeID), New ObjectParameter("FK_LoanTypeID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_PreWarningIntervalsLoanType_Insert", fK_PreWarningIntervalIDParameter, fK_LoanTypeIDParameter)
    End Function

    Public Overridable Function spr_PreWarningIntervalsLoanType_Select(action As Nullable(Of Integer), iD As Nullable(Of Integer), warningIntervalID As Nullable(Of Integer)) As ObjectResult(Of spr_PreWarningIntervalsLoanType_Select_Result)
        Dim actionParameter As ObjectParameter = If(action.HasValue, New ObjectParameter("Action", action), New ObjectParameter("Action", GetType(Integer)))

        Dim iDParameter As ObjectParameter = If(iD.HasValue, New ObjectParameter("ID", iD), New ObjectParameter("ID", GetType(Integer)))

        Dim warningIntervalIDParameter As ObjectParameter = If(warningIntervalID.HasValue, New ObjectParameter("WarningIntervalID", warningIntervalID), New ObjectParameter("WarningIntervalID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_PreWarningIntervalsLoanType_Select_Result)("spr_PreWarningIntervalsLoanType_Select", actionParameter, iDParameter, warningIntervalIDParameter)
    End Function

    Public Overridable Function spr_PreWarningIntervalsLoanType_WarningInterval_Delete(preWarningIntervalID As Nullable(Of Integer)) As Integer
        Dim preWarningIntervalIDParameter As ObjectParameter = If(preWarningIntervalID.HasValue, New ObjectParameter("PreWarningIntervalID", preWarningIntervalID), New ObjectParameter("PreWarningIntervalID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_PreWarningIntervalsLoanType_WarningInterval_Delete", preWarningIntervalIDParameter)
    End Function

    Public Overridable Function spr_PreWarningLogCurrentStatus_H_Insert([date] As Nullable(Of Date), sTime As Nullable(Of Date), success As Nullable(Of Boolean), remarks As String, tryTime As Nullable(Of Integer)) As ObjectResult(Of Nullable(Of Decimal))
        Dim dateParameter As ObjectParameter = If([date].HasValue, New ObjectParameter("Date", [date]), New ObjectParameter("Date", GetType(Date)))

        Dim sTimeParameter As ObjectParameter = If(sTime.HasValue, New ObjectParameter("STime", sTime), New ObjectParameter("STime", GetType(Date)))

        Dim successParameter As ObjectParameter = If(success.HasValue, New ObjectParameter("Success", success), New ObjectParameter("Success", GetType(Boolean)))

        Dim remarksParameter As ObjectParameter = If(remarks IsNot Nothing, New ObjectParameter("Remarks", remarks), New ObjectParameter("Remarks", GetType(String)))

        Dim tryTimeParameter As ObjectParameter = If(tryTime.HasValue, New ObjectParameter("tryTime", tryTime), New ObjectParameter("tryTime", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of Nullable(Of Decimal))("spr_PreWarningLogCurrentStatus_H_Insert", dateParameter, sTimeParameter, successParameter, remarksParameter, tryTimeParameter)
    End Function

    Public Overridable Function spr_PreWarningLogCurrentStatusH_ForDate_Select([date] As Nullable(Of Date)) As ObjectResult(Of spr_PreWarningLogCurrentStatusH_ForDate_Select_Result)
        Dim dateParameter As ObjectParameter = If([date].HasValue, New ObjectParameter("Date", [date]), New ObjectParameter("Date", GetType(Date)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_PreWarningLogCurrentStatusH_ForDate_Select_Result)("spr_PreWarningLogCurrentStatusH_ForDate_Select", dateParameter)
    End Function

    Public Overridable Function spr_Province_Check_Select(branchID As Nullable(Of Integer)) As ObjectResult(Of spr_Province_Check_Select_Result)
        Dim branchIDParameter As ObjectParameter = If(branchID.HasValue, New ObjectParameter("BranchID", branchID), New ObjectParameter("BranchID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_Province_Check_Select_Result)("spr_Province_Check_Select", branchIDParameter)
    End Function

    Public Overridable Function spr_ProvinceList_Select() As ObjectResult(Of spr_ProvinceList_Select_Result)
        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_ProvinceList_Select_Result)("spr_ProvinceList_Select")
    End Function

    Public Overridable Function spr_Record_List_Select(action As Nullable(Of Integer), fK_UserID As Nullable(Of Integer), iD As Nullable(Of Integer), name As String, recordID As Nullable(Of Integer)) As ObjectResult(Of spr_Record_List_Select_Result)
        Dim actionParameter As ObjectParameter = If(action.HasValue, New ObjectParameter("Action", action), New ObjectParameter("Action", GetType(Integer)))

        Dim fK_UserIDParameter As ObjectParameter = If(fK_UserID.HasValue, New ObjectParameter("FK_UserID", fK_UserID), New ObjectParameter("FK_UserID", GetType(Integer)))

        Dim iDParameter As ObjectParameter = If(iD.HasValue, New ObjectParameter("ID", iD), New ObjectParameter("ID", GetType(Integer)))

        Dim nameParameter As ObjectParameter = If(name IsNot Nothing, New ObjectParameter("Name", name), New ObjectParameter("Name", GetType(String)))

        Dim recordIDParameter As ObjectParameter = If(recordID.HasValue, New ObjectParameter("RecordID", recordID), New ObjectParameter("RecordID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_Record_List_Select_Result)("spr_Record_List_Select", actionParameter, fK_UserIDParameter, iDParameter, nameParameter, recordIDParameter)
    End Function

    Public Overridable Function spr_Report_CurrentLCStatus_MaxLoanType_Select(action As Nullable(Of Integer), branchID As Nullable(Of Integer), loanTypeID As Nullable(Of Integer), installmentCount As Nullable(Of Integer), provinceID As Nullable(Of Integer), customerNO As String) As ObjectResult(Of spr_Report_CurrentLCStatus_MaxLoanType_Select_Result)
        Dim actionParameter As ObjectParameter = If(action.HasValue, New ObjectParameter("Action", action), New ObjectParameter("Action", GetType(Integer)))

        Dim branchIDParameter As ObjectParameter = If(branchID.HasValue, New ObjectParameter("BranchID", branchID), New ObjectParameter("BranchID", GetType(Integer)))

        Dim loanTypeIDParameter As ObjectParameter = If(loanTypeID.HasValue, New ObjectParameter("LoanTypeID", loanTypeID), New ObjectParameter("LoanTypeID", GetType(Integer)))

        Dim installmentCountParameter As ObjectParameter = If(installmentCount.HasValue, New ObjectParameter("InstallmentCount", installmentCount), New ObjectParameter("InstallmentCount", GetType(Integer)))

        Dim provinceIDParameter As ObjectParameter = If(provinceID.HasValue, New ObjectParameter("ProvinceID", provinceID), New ObjectParameter("ProvinceID", GetType(Integer)))

        Dim customerNOParameter As ObjectParameter = If(customerNO IsNot Nothing, New ObjectParameter("CustomerNO", customerNO), New ObjectParameter("CustomerNO", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_Report_CurrentLCStatus_MaxLoanType_Select_Result)("spr_Report_CurrentLCStatus_MaxLoanType_Select", actionParameter, branchIDParameter, loanTypeIDParameter, installmentCountParameter, provinceIDParameter, customerNOParameter)
    End Function

    Public Overridable Function spr_Report_CurrentLCStatus_MaxLoanTypeParameter_Select(action As Nullable(Of Integer), parameter As String) As ObjectResult(Of spr_Report_CurrentLCStatus_MaxLoanTypeParameter_Select_Result)
        Dim actionParameter As ObjectParameter = If(action.HasValue, New ObjectParameter("Action", action), New ObjectParameter("Action", GetType(Integer)))

        Dim parameterParameter As ObjectParameter = If(parameter IsNot Nothing, New ObjectParameter("Parameter", parameter), New ObjectParameter("Parameter", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_Report_CurrentLCStatus_MaxLoanTypeParameter_Select_Result)("spr_Report_CurrentLCStatus_MaxLoanTypeParameter_Select", actionParameter, parameterParameter)
    End Function

    Public Overridable Function spr_Report_CurrentLCStatus_NewArrivalWarningInterval_Select(action As Nullable(Of Integer), parameter As String) As ObjectResult(Of spr_Report_CurrentLCStatus_NewArrivalWarningInterval_Select_Result)
        Dim actionParameter As ObjectParameter = If(action.HasValue, New ObjectParameter("Action", action), New ObjectParameter("Action", GetType(Integer)))

        Dim parameterParameter As ObjectParameter = If(parameter IsNot Nothing, New ObjectParameter("Parameter", parameter), New ObjectParameter("Parameter", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_Report_CurrentLCStatus_NewArrivalWarningInterval_Select_Result)("spr_Report_CurrentLCStatus_NewArrivalWarningInterval_Select", actionParameter, parameterParameter)
    End Function

    Public Overridable Function spr_Report_HandyFollow_Select(aCTION As Nullable(Of Integer), fromDate As Nullable(Of Date), toDate As Nullable(Of Date), parameter As String) As ObjectResult(Of spr_Report_HandyFollow_Select_Result)
        Dim aCTIONParameter As ObjectParameter = If(aCTION.HasValue, New ObjectParameter("ACTION", aCTION), New ObjectParameter("ACTION", GetType(Integer)))

        Dim fromDateParameter As ObjectParameter = If(fromDate.HasValue, New ObjectParameter("FromDate", fromDate), New ObjectParameter("FromDate", GetType(Date)))

        Dim toDateParameter As ObjectParameter = If(toDate.HasValue, New ObjectParameter("ToDate", toDate), New ObjectParameter("ToDate", GetType(Date)))

        Dim parameterParameter As ObjectParameter = If(parameter IsNot Nothing, New ObjectParameter("Parameter", parameter), New ObjectParameter("Parameter", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_Report_HandyFollow_Select_Result)("spr_Report_HandyFollow_Select", aCTIONParameter, fromDateParameter, toDateParameter, parameterParameter)
    End Function

    Public Overridable Function spr_Report_WarningNotificationLogDetail_Summary_Select(from As Nullable(Of Date), [to] As Nullable(Of Date), notificationTypeID As Nullable(Of Integer), lonaID As Nullable(Of Integer)) As ObjectResult(Of spr_Report_WarningNotificationLogDetail_Summary_Select_Result)
        Dim fromParameter As ObjectParameter = If(from.HasValue, New ObjectParameter("From", from), New ObjectParameter("From", GetType(Date)))

        Dim toParameter As ObjectParameter = If([to].HasValue, New ObjectParameter("To", [to]), New ObjectParameter("To", GetType(Date)))

        Dim notificationTypeIDParameter As ObjectParameter = If(notificationTypeID.HasValue, New ObjectParameter("NotificationTypeID", notificationTypeID), New ObjectParameter("NotificationTypeID", GetType(Integer)))

        Dim lonaIDParameter As ObjectParameter = If(lonaID.HasValue, New ObjectParameter("LonaID", lonaID), New ObjectParameter("LonaID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_Report_WarningNotificationLogDetail_Summary_Select_Result)("spr_Report_WarningNotificationLogDetail_Summary_Select", fromParameter, toParameter, notificationTypeIDParameter, lonaIDParameter)
    End Function

    Public Overridable Function spr_SelfReport_Insert(theDay As Nullable(Of Date), sTime As Nullable(Of Date), theMessage As String, reportError As Nullable(Of Boolean), finalReport As Nullable(Of Boolean)) As Integer
        Dim theDayParameter As ObjectParameter = If(theDay.HasValue, New ObjectParameter("theDay", theDay), New ObjectParameter("theDay", GetType(Date)))

        Dim sTimeParameter As ObjectParameter = If(sTime.HasValue, New ObjectParameter("STime", sTime), New ObjectParameter("STime", GetType(Date)))

        Dim theMessageParameter As ObjectParameter = If(theMessage IsNot Nothing, New ObjectParameter("theMessage", theMessage), New ObjectParameter("theMessage", GetType(String)))

        Dim reportErrorParameter As ObjectParameter = If(reportError.HasValue, New ObjectParameter("ReportError", reportError), New ObjectParameter("ReportError", GetType(Boolean)))

        Dim finalReportParameter As ObjectParameter = If(finalReport.HasValue, New ObjectParameter("FinalReport", finalReport), New ObjectParameter("FinalReport", GetType(Boolean)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_SelfReport_Insert", theDayParameter, sTimeParameter, theMessageParameter, reportErrorParameter, finalReportParameter)
    End Function

    Public Overridable Function spr_SelfReport_Select() As ObjectResult(Of spr_SelfReport_Select_Result)
        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_SelfReport_Select_Result)("spr_SelfReport_Select")
    End Function

    Public Overridable Function spr_SMSCountLog_Insert(sendDate As Nullable(Of Date), sMSCount As Nullable(Of Integer), fK_LogCurrentLCStatusID As Nullable(Of Integer), firstSent As Nullable(Of Date), lastSent As Nullable(Of Date), bITotal As Nullable(Of Integer), sMSVoice As Nullable(Of Integer)) As Integer
        Dim sendDateParameter As ObjectParameter = If(sendDate.HasValue, New ObjectParameter("SendDate", sendDate), New ObjectParameter("SendDate", GetType(Date)))

        Dim sMSCountParameter As ObjectParameter = If(sMSCount.HasValue, New ObjectParameter("SMSCount", sMSCount), New ObjectParameter("SMSCount", GetType(Integer)))

        Dim fK_LogCurrentLCStatusIDParameter As ObjectParameter = If(fK_LogCurrentLCStatusID.HasValue, New ObjectParameter("FK_LogCurrentLCStatusID", fK_LogCurrentLCStatusID), New ObjectParameter("FK_LogCurrentLCStatusID", GetType(Integer)))

        Dim firstSentParameter As ObjectParameter = If(firstSent.HasValue, New ObjectParameter("FirstSent", firstSent), New ObjectParameter("FirstSent", GetType(Date)))

        Dim lastSentParameter As ObjectParameter = If(lastSent.HasValue, New ObjectParameter("LastSent", lastSent), New ObjectParameter("LastSent", GetType(Date)))

        Dim bITotalParameter As ObjectParameter = If(bITotal.HasValue, New ObjectParameter("BITotal", bITotal), New ObjectParameter("BITotal", GetType(Integer)))

        Dim sMSVoiceParameter As ObjectParameter = If(sMSVoice.HasValue, New ObjectParameter("SMSVoice", sMSVoice), New ObjectParameter("SMSVoice", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_SMSCountLog_Insert", sendDateParameter, sMSCountParameter, fK_LogCurrentLCStatusIDParameter, firstSentParameter, lastSentParameter, bITotalParameter, sMSVoiceParameter)
    End Function

    Public Overridable Function spr_SMSCountLog_Select(theDay As Nullable(Of Date)) As ObjectResult(Of spr_SMSCountLog_Select_Result)
        Dim theDayParameter As ObjectParameter = If(theDay.HasValue, New ObjectParameter("theDay", theDay), New ObjectParameter("theDay", GetType(Date)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_SMSCountLog_Select_Result)("spr_SMSCountLog_Select", theDayParameter)
    End Function

    Public Overridable Function spr_Sponsor_List_Bulk_Insert(selectStatement As String) As Integer
        Dim selectStatementParameter As ObjectParameter = If(selectStatement IsNot Nothing, New ObjectParameter("SelectStatement", selectStatement), New ObjectParameter("SelectStatement", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_Sponsor_List_Bulk_Insert", selectStatementParameter)
    End Function

    Public Overridable Function spr_Sponsor_List_Delete() As Integer
        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_Sponsor_List_Delete")
    End Function

    Public Overridable Function spr_Sponsor_List_Insert(branchCode As String, loanTypeCode As String, borrowerCustomerNo As String, loanSerial As Nullable(Of Integer), sponsorCustomerNo As String, fullName As String, fatherName As String, mobileNo As String, nationalID As String, iDNumber As String, address As String, telephoneHome As String, telephoneWork As String, warantyTypeDesc As String) As Integer
        Dim branchCodeParameter As ObjectParameter = If(branchCode IsNot Nothing, New ObjectParameter("BranchCode", branchCode), New ObjectParameter("BranchCode", GetType(String)))

        Dim loanTypeCodeParameter As ObjectParameter = If(loanTypeCode IsNot Nothing, New ObjectParameter("LoanTypeCode", loanTypeCode), New ObjectParameter("LoanTypeCode", GetType(String)))

        Dim borrowerCustomerNoParameter As ObjectParameter = If(borrowerCustomerNo IsNot Nothing, New ObjectParameter("BorrowerCustomerNo", borrowerCustomerNo), New ObjectParameter("BorrowerCustomerNo", GetType(String)))

        Dim loanSerialParameter As ObjectParameter = If(loanSerial.HasValue, New ObjectParameter("LoanSerial", loanSerial), New ObjectParameter("LoanSerial", GetType(Integer)))

        Dim sponsorCustomerNoParameter As ObjectParameter = If(sponsorCustomerNo IsNot Nothing, New ObjectParameter("SponsorCustomerNo", sponsorCustomerNo), New ObjectParameter("SponsorCustomerNo", GetType(String)))

        Dim fullNameParameter As ObjectParameter = If(fullName IsNot Nothing, New ObjectParameter("FullName", fullName), New ObjectParameter("FullName", GetType(String)))

        Dim fatherNameParameter As ObjectParameter = If(fatherName IsNot Nothing, New ObjectParameter("FatherName", fatherName), New ObjectParameter("FatherName", GetType(String)))

        Dim mobileNoParameter As ObjectParameter = If(mobileNo IsNot Nothing, New ObjectParameter("MobileNo", mobileNo), New ObjectParameter("MobileNo", GetType(String)))

        Dim nationalIDParameter As ObjectParameter = If(nationalID IsNot Nothing, New ObjectParameter("NationalID", nationalID), New ObjectParameter("NationalID", GetType(String)))

        Dim iDNumberParameter As ObjectParameter = If(iDNumber IsNot Nothing, New ObjectParameter("IDNumber", iDNumber), New ObjectParameter("IDNumber", GetType(String)))

        Dim addressParameter As ObjectParameter = If(address IsNot Nothing, New ObjectParameter("Address", address), New ObjectParameter("Address", GetType(String)))

        Dim telephoneHomeParameter As ObjectParameter = If(telephoneHome IsNot Nothing, New ObjectParameter("TelephoneHome", telephoneHome), New ObjectParameter("TelephoneHome", GetType(String)))

        Dim telephoneWorkParameter As ObjectParameter = If(telephoneWork IsNot Nothing, New ObjectParameter("TelephoneWork", telephoneWork), New ObjectParameter("TelephoneWork", GetType(String)))

        Dim warantyTypeDescParameter As ObjectParameter = If(warantyTypeDesc IsNot Nothing, New ObjectParameter("WarantyTypeDesc", warantyTypeDesc), New ObjectParameter("WarantyTypeDesc", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_Sponsor_List_Insert", branchCodeParameter, loanTypeCodeParameter, borrowerCustomerNoParameter, loanSerialParameter, sponsorCustomerNoParameter, fullNameParameter, fatherNameParameter, mobileNoParameter, nationalIDParameter, iDNumberParameter, addressParameter, telephoneHomeParameter, telephoneWorkParameter, warantyTypeDescParameter)
    End Function

    Public Overridable Function spr_Sponsor_List_Log_Delete(iD As Nullable(Of Integer)) As Integer
        Dim iDParameter As ObjectParameter = If(iD.HasValue, New ObjectParameter("ID", iD), New ObjectParameter("ID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_Sponsor_List_Log_Delete", iDParameter)
    End Function

    Public Overridable Function spr_Sponsor_List_Log_Insert(theDay As Nullable(Of Date), startDate As Nullable(Of Date)) As ObjectResult(Of Nullable(Of Decimal))
        Dim theDayParameter As ObjectParameter = If(theDay.HasValue, New ObjectParameter("theDay", theDay), New ObjectParameter("theDay", GetType(Date)))

        Dim startDateParameter As ObjectParameter = If(startDate.HasValue, New ObjectParameter("StartDate", startDate), New ObjectParameter("StartDate", GetType(Date)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of Nullable(Of Decimal))("spr_Sponsor_List_Log_Insert", theDayParameter, startDateParameter)
    End Function

    Public Overridable Function spr_Sponsor_List_Log_Last_Select() As ObjectResult(Of spr_Sponsor_List_Log_Last_Select_Result)
        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_Sponsor_List_Log_Last_Select_Result)("spr_Sponsor_List_Log_Last_Select")
    End Function

    Public Overridable Function spr_Sponsor_List_Log_Update(iD As Nullable(Of Integer), endDate As Nullable(Of Date), errorMessage As String) As Integer
        Dim iDParameter As ObjectParameter = If(iD.HasValue, New ObjectParameter("ID", iD), New ObjectParameter("ID", GetType(Integer)))

        Dim endDateParameter As ObjectParameter = If(endDate.HasValue, New ObjectParameter("EndDate", endDate), New ObjectParameter("EndDate", GetType(Date)))

        Dim errorMessageParameter As ObjectParameter = If(errorMessage IsNot Nothing, New ObjectParameter("ErrorMessage", errorMessage), New ObjectParameter("ErrorMessage", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_Sponsor_List_Log_Update", iDParameter, endDateParameter, errorMessageParameter)
    End Function

    Public Overridable Function spr_Sponsors_List_ByLoanNumber_Select(branchCode As String, loanTypeCode As String, borroweCustomerCode As String, loanSerial As Nullable(Of Integer)) As ObjectResult(Of spr_Sponsors_List_ByLoanNumber_Select_Result)
        Dim branchCodeParameter As ObjectParameter = If(branchCode IsNot Nothing, New ObjectParameter("BranchCode", branchCode), New ObjectParameter("BranchCode", GetType(String)))

        Dim loanTypeCodeParameter As ObjectParameter = If(loanTypeCode IsNot Nothing, New ObjectParameter("LoanTypeCode", loanTypeCode), New ObjectParameter("LoanTypeCode", GetType(String)))

        Dim borroweCustomerCodeParameter As ObjectParameter = If(borroweCustomerCode IsNot Nothing, New ObjectParameter("BorroweCustomerCode", borroweCustomerCode), New ObjectParameter("BorroweCustomerCode", GetType(String)))

        Dim loanSerialParameter As ObjectParameter = If(loanSerial.HasValue, New ObjectParameter("LoanSerial", loanSerial), New ObjectParameter("LoanSerial", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_Sponsors_List_ByLoanNumber_Select_Result)("spr_Sponsors_List_ByLoanNumber_Select", branchCodeParameter, loanTypeCodeParameter, borroweCustomerCodeParameter, loanSerialParameter)
    End Function

    Public Overridable Function spr_SystemLoginLog_Insert(fK_UserUD As Nullable(Of Integer)) As Integer
        Dim fK_UserUDParameter As ObjectParameter = If(fK_UserUD.HasValue, New ObjectParameter("FK_UserUD", fK_UserUD), New ObjectParameter("FK_UserUD", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_SystemLoginLog_Insert", fK_UserUDParameter)
    End Function

    Public Overridable Function spr_SystemLoginLog_Report(action As Nullable(Of Integer), from As Nullable(Of Date), [to] As Nullable(Of Date), parameter As String) As ObjectResult(Of spr_SystemLoginLog_Report_Result)
        Dim actionParameter As ObjectParameter = If(action.HasValue, New ObjectParameter("Action", action), New ObjectParameter("Action", GetType(Integer)))

        Dim fromParameter As ObjectParameter = If(from.HasValue, New ObjectParameter("From", from), New ObjectParameter("From", GetType(Date)))

        Dim toParameter As ObjectParameter = If([to].HasValue, New ObjectParameter("To", [to]), New ObjectParameter("To", GetType(Date)))

        Dim parameterParameter As ObjectParameter = If(parameter IsNot Nothing, New ObjectParameter("Parameter", parameter), New ObjectParameter("Parameter", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_SystemLoginLog_Report_Result)("spr_SystemLoginLog_Report", actionParameter, fromParameter, toParameter, parameterParameter)
    End Function

    Public Overridable Function spr_SystemSetting_Select() As ObjectResult(Of spr_SystemSetting_Select_Result)
        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_SystemSetting_Select_Result)("spr_SystemSetting_Select")
    End Function

    Public Overridable Function spr_SystemSetting_Update(iD As Nullable(Of Integer), gatewayNumber As String, gatewayCompany As String, gatewayUsername As String, gatewayPassword As String, gatewayIP As String, emailUsername As String, emailHost As String, emailPassword As String, email As String, telephoneNumber As String, updateTime As Nullable(Of System.TimeSpan), tryTime As Nullable(Of Integer), tryIntervalHour As Nullable(Of Integer), fK_EUserID As Nullable(Of Integer), updateTime_Deposit As Nullable(Of System.TimeSpan), tryTime_Deposit As Nullable(Of Integer), tryIntervalHour_Deposit As Nullable(Of Integer), updateTime_Loan As Nullable(Of System.TimeSpan), tryTime_Loan As Nullable(Of Integer), tryIntervalHour_Loan As Nullable(Of Integer), voiceSMSUID As String, voiceSMSToken As String, vosoulService As Nullable(Of Boolean), hadiService As Nullable(Of Boolean), hadiServiceLoan As Nullable(Of Boolean), voiceService As Nullable(Of Boolean)) As Integer
        Dim iDParameter As ObjectParameter = If(iD.HasValue, New ObjectParameter("ID", iD), New ObjectParameter("ID", GetType(Integer)))

        Dim gatewayNumberParameter As ObjectParameter = If(gatewayNumber IsNot Nothing, New ObjectParameter("GatewayNumber", gatewayNumber), New ObjectParameter("GatewayNumber", GetType(String)))

        Dim gatewayCompanyParameter As ObjectParameter = If(gatewayCompany IsNot Nothing, New ObjectParameter("GatewayCompany", gatewayCompany), New ObjectParameter("GatewayCompany", GetType(String)))

        Dim gatewayUsernameParameter As ObjectParameter = If(gatewayUsername IsNot Nothing, New ObjectParameter("GatewayUsername", gatewayUsername), New ObjectParameter("GatewayUsername", GetType(String)))

        Dim gatewayPasswordParameter As ObjectParameter = If(gatewayPassword IsNot Nothing, New ObjectParameter("GatewayPassword", gatewayPassword), New ObjectParameter("GatewayPassword", GetType(String)))

        Dim gatewayIPParameter As ObjectParameter = If(gatewayIP IsNot Nothing, New ObjectParameter("GatewayIP", gatewayIP), New ObjectParameter("GatewayIP", GetType(String)))

        Dim emailUsernameParameter As ObjectParameter = If(emailUsername IsNot Nothing, New ObjectParameter("EmailUsername", emailUsername), New ObjectParameter("EmailUsername", GetType(String)))

        Dim emailHostParameter As ObjectParameter = If(emailHost IsNot Nothing, New ObjectParameter("EmailHost", emailHost), New ObjectParameter("EmailHost", GetType(String)))

        Dim emailPasswordParameter As ObjectParameter = If(emailPassword IsNot Nothing, New ObjectParameter("EmailPassword", emailPassword), New ObjectParameter("EmailPassword", GetType(String)))

        Dim emailParameter As ObjectParameter = If(email IsNot Nothing, New ObjectParameter("Email", email), New ObjectParameter("Email", GetType(String)))

        Dim telephoneNumberParameter As ObjectParameter = If(telephoneNumber IsNot Nothing, New ObjectParameter("TelephoneNumber", telephoneNumber), New ObjectParameter("TelephoneNumber", GetType(String)))

        Dim updateTimeParameter As ObjectParameter = If(updateTime.HasValue, New ObjectParameter("UpdateTime", updateTime), New ObjectParameter("UpdateTime", GetType(System.TimeSpan)))

        Dim tryTimeParameter As ObjectParameter = If(tryTime.HasValue, New ObjectParameter("tryTime", tryTime), New ObjectParameter("tryTime", GetType(Integer)))

        Dim tryIntervalHourParameter As ObjectParameter = If(tryIntervalHour.HasValue, New ObjectParameter("tryIntervalHour", tryIntervalHour), New ObjectParameter("tryIntervalHour", GetType(Integer)))

        Dim fK_EUserIDParameter As ObjectParameter = If(fK_EUserID.HasValue, New ObjectParameter("FK_EUserID", fK_EUserID), New ObjectParameter("FK_EUserID", GetType(Integer)))

        Dim updateTime_DepositParameter As ObjectParameter = If(updateTime_Deposit.HasValue, New ObjectParameter("UpdateTime_Deposit", updateTime_Deposit), New ObjectParameter("UpdateTime_Deposit", GetType(System.TimeSpan)))

        Dim tryTime_DepositParameter As ObjectParameter = If(tryTime_Deposit.HasValue, New ObjectParameter("tryTime_Deposit", tryTime_Deposit), New ObjectParameter("tryTime_Deposit", GetType(Integer)))

        Dim tryIntervalHour_DepositParameter As ObjectParameter = If(tryIntervalHour_Deposit.HasValue, New ObjectParameter("tryIntervalHour_Deposit", tryIntervalHour_Deposit), New ObjectParameter("tryIntervalHour_Deposit", GetType(Integer)))

        Dim updateTime_LoanParameter As ObjectParameter = If(updateTime_Loan.HasValue, New ObjectParameter("UpdateTime_Loan", updateTime_Loan), New ObjectParameter("UpdateTime_Loan", GetType(System.TimeSpan)))

        Dim tryTime_LoanParameter As ObjectParameter = If(tryTime_Loan.HasValue, New ObjectParameter("tryTime_Loan", tryTime_Loan), New ObjectParameter("tryTime_Loan", GetType(Integer)))

        Dim tryIntervalHour_LoanParameter As ObjectParameter = If(tryIntervalHour_Loan.HasValue, New ObjectParameter("tryIntervalHour_Loan", tryIntervalHour_Loan), New ObjectParameter("tryIntervalHour_Loan", GetType(Integer)))

        Dim voiceSMSUIDParameter As ObjectParameter = If(voiceSMSUID IsNot Nothing, New ObjectParameter("VoiceSMSUID", voiceSMSUID), New ObjectParameter("VoiceSMSUID", GetType(String)))

        Dim voiceSMSTokenParameter As ObjectParameter = If(voiceSMSToken IsNot Nothing, New ObjectParameter("VoiceSMSToken", voiceSMSToken), New ObjectParameter("VoiceSMSToken", GetType(String)))

        Dim vosoulServiceParameter As ObjectParameter = If(vosoulService.HasValue, New ObjectParameter("VosoulService", vosoulService), New ObjectParameter("VosoulService", GetType(Boolean)))

        Dim hadiServiceParameter As ObjectParameter = If(hadiService.HasValue, New ObjectParameter("HadiService", hadiService), New ObjectParameter("HadiService", GetType(Boolean)))

        Dim hadiServiceLoanParameter As ObjectParameter = If(hadiServiceLoan.HasValue, New ObjectParameter("HadiServiceLoan", hadiServiceLoan), New ObjectParameter("HadiServiceLoan", GetType(Boolean)))

        Dim voiceServiceParameter As ObjectParameter = If(voiceService.HasValue, New ObjectParameter("VoiceService", voiceService), New ObjectParameter("VoiceService", GetType(Boolean)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_SystemSetting_Update", iDParameter, gatewayNumberParameter, gatewayCompanyParameter, gatewayUsernameParameter, gatewayPasswordParameter, gatewayIPParameter, emailUsernameParameter, emailHostParameter, emailPasswordParameter, emailParameter, telephoneNumberParameter, updateTimeParameter, tryTimeParameter, tryIntervalHourParameter, fK_EUserIDParameter, updateTime_DepositParameter, tryTime_DepositParameter, tryIntervalHour_DepositParameter, updateTime_LoanParameter, tryTime_LoanParameter, tryIntervalHour_LoanParameter, voiceSMSUIDParameter, voiceSMSTokenParameter, vosoulServiceParameter, hadiServiceParameter, hadiServiceLoanParameter, voiceServiceParameter)
    End Function

    Public Overridable Function spr_tbl_WarningNotificationLogDetail_Select(action As Nullable(Of Integer), iD As Nullable(Of Integer)) As ObjectResult(Of spr_tbl_WarningNotificationLogDetail_Select_Result)
        Dim actionParameter As ObjectParameter = If(action.HasValue, New ObjectParameter("Action", action), New ObjectParameter("Action", GetType(Integer)))

        Dim iDParameter As ObjectParameter = If(iD.HasValue, New ObjectParameter("ID", iD), New ObjectParameter("ID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_tbl_WarningNotificationLogDetail_Select_Result)("spr_tbl_WarningNotificationLogDetail_Select", actionParameter, iDParameter)
    End Function

    Public Overridable Function spr_User_CheckBranch_Select(action As Nullable(Of Integer), branchID As Nullable(Of Integer), provinceID As Nullable(Of Integer)) As ObjectResult(Of spr_User_CheckBranch_Select_Result)
        Dim actionParameter As ObjectParameter = If(action.HasValue, New ObjectParameter("Action", action), New ObjectParameter("Action", GetType(Integer)))

        Dim branchIDParameter As ObjectParameter = If(branchID.HasValue, New ObjectParameter("BranchID", branchID), New ObjectParameter("BranchID", GetType(Integer)))

        Dim provinceIDParameter As ObjectParameter = If(provinceID.HasValue, New ObjectParameter("ProvinceID", provinceID), New ObjectParameter("ProvinceID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_User_CheckBranch_Select_Result)("spr_User_CheckBranch_Select", actionParameter, branchIDParameter, provinceIDParameter)
    End Function

    Public Overridable Function spr_User_CheckUsername_Select(username As String) As ObjectResult(Of Nullable(Of Integer))
        Dim usernameParameter As ObjectParameter = If(username IsNot Nothing, New ObjectParameter("Username", username), New ObjectParameter("Username", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of Nullable(Of Integer))("spr_User_CheckUsername_Select", usernameParameter)
    End Function

    Public Overridable Function spr_User_Count_Select(action As Nullable(Of Integer), sEARCHSTR As String, fK_BrnachID As Nullable(Of Integer), fK_ProvinceID As Nullable(Of Integer)) As ObjectResult(Of Nullable(Of Integer))
        Dim actionParameter As ObjectParameter = If(action.HasValue, New ObjectParameter("Action", action), New ObjectParameter("Action", GetType(Integer)))

        Dim sEARCHSTRParameter As ObjectParameter = If(sEARCHSTR IsNot Nothing, New ObjectParameter("SEARCHSTR", sEARCHSTR), New ObjectParameter("SEARCHSTR", GetType(String)))

        Dim fK_BrnachIDParameter As ObjectParameter = If(fK_BrnachID.HasValue, New ObjectParameter("FK_BrnachID", fK_BrnachID), New ObjectParameter("FK_BrnachID", GetType(Integer)))

        Dim fK_ProvinceIDParameter As ObjectParameter = If(fK_ProvinceID.HasValue, New ObjectParameter("FK_ProvinceID", fK_ProvinceID), New ObjectParameter("FK_ProvinceID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of Nullable(Of Integer))("spr_User_Count_Select", actionParameter, sEARCHSTRParameter, fK_BrnachIDParameter, fK_ProvinceIDParameter)
    End Function

    Public Overridable Function spr_User_Delete(iD As Nullable(Of Integer)) As Integer
        Dim iDParameter As ObjectParameter = If(iD.HasValue, New ObjectParameter("ID", iD), New ObjectParameter("ID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_User_Delete", iDParameter)
    End Function

    Public Overridable Function spr_User_Insert(username As String, password As String, isActive As Nullable(Of Boolean), isDataAdmin As Nullable(Of Boolean), isItemAdmin As Nullable(Of Boolean), isDataUserAdmin As Nullable(Of Boolean), fName As String, lName As String, email As String, sex As Nullable(Of Boolean), tel As String, mobile As String, sTime As Nullable(Of Date), fK_UserID As Nullable(Of Integer), personCode As String, nationalID As String, nationalNo As String, address As String, userPhoto As Byte(), fK_BrnachID As Nullable(Of Integer), isPartTime As Nullable(Of Boolean)) As ObjectResult(Of Nullable(Of Decimal))
        Dim usernameParameter As ObjectParameter = If(username IsNot Nothing, New ObjectParameter("Username", username), New ObjectParameter("Username", GetType(String)))

        Dim passwordParameter As ObjectParameter = If(password IsNot Nothing, New ObjectParameter("Password", password), New ObjectParameter("Password", GetType(String)))

        Dim isActiveParameter As ObjectParameter = If(isActive.HasValue, New ObjectParameter("IsActive", isActive), New ObjectParameter("IsActive", GetType(Boolean)))

        Dim isDataAdminParameter As ObjectParameter = If(isDataAdmin.HasValue, New ObjectParameter("IsDataAdmin", isDataAdmin), New ObjectParameter("IsDataAdmin", GetType(Boolean)))

        Dim isItemAdminParameter As ObjectParameter = If(isItemAdmin.HasValue, New ObjectParameter("IsItemAdmin", isItemAdmin), New ObjectParameter("IsItemAdmin", GetType(Boolean)))

        Dim isDataUserAdminParameter As ObjectParameter = If(isDataUserAdmin.HasValue, New ObjectParameter("IsDataUserAdmin", isDataUserAdmin), New ObjectParameter("IsDataUserAdmin", GetType(Boolean)))

        Dim fNameParameter As ObjectParameter = If(fName IsNot Nothing, New ObjectParameter("FName", fName), New ObjectParameter("FName", GetType(String)))

        Dim lNameParameter As ObjectParameter = If(lName IsNot Nothing, New ObjectParameter("LName", lName), New ObjectParameter("LName", GetType(String)))

        Dim emailParameter As ObjectParameter = If(email IsNot Nothing, New ObjectParameter("Email", email), New ObjectParameter("Email", GetType(String)))

        Dim sexParameter As ObjectParameter = If(sex.HasValue, New ObjectParameter("Sex", sex), New ObjectParameter("Sex", GetType(Boolean)))

        Dim telParameter As ObjectParameter = If(tel IsNot Nothing, New ObjectParameter("Tel", tel), New ObjectParameter("Tel", GetType(String)))

        Dim mobileParameter As ObjectParameter = If(mobile IsNot Nothing, New ObjectParameter("Mobile", mobile), New ObjectParameter("Mobile", GetType(String)))

        Dim sTimeParameter As ObjectParameter = If(sTime.HasValue, New ObjectParameter("STime", sTime), New ObjectParameter("STime", GetType(Date)))

        Dim fK_UserIDParameter As ObjectParameter = If(fK_UserID.HasValue, New ObjectParameter("FK_UserID", fK_UserID), New ObjectParameter("FK_UserID", GetType(Integer)))

        Dim personCodeParameter As ObjectParameter = If(personCode IsNot Nothing, New ObjectParameter("PersonCode", personCode), New ObjectParameter("PersonCode", GetType(String)))

        Dim nationalIDParameter As ObjectParameter = If(nationalID IsNot Nothing, New ObjectParameter("NationalID", nationalID), New ObjectParameter("NationalID", GetType(String)))

        Dim nationalNoParameter As ObjectParameter = If(nationalNo IsNot Nothing, New ObjectParameter("NationalNo", nationalNo), New ObjectParameter("NationalNo", GetType(String)))

        Dim addressParameter As ObjectParameter = If(address IsNot Nothing, New ObjectParameter("Address", address), New ObjectParameter("Address", GetType(String)))

        Dim userPhotoParameter As ObjectParameter = If(userPhoto IsNot Nothing, New ObjectParameter("UserPhoto", userPhoto), New ObjectParameter("UserPhoto", GetType(Byte())))

        Dim fK_BrnachIDParameter As ObjectParameter = If(fK_BrnachID.HasValue, New ObjectParameter("FK_BrnachID", fK_BrnachID), New ObjectParameter("FK_BrnachID", GetType(Integer)))

        Dim isPartTimeParameter As ObjectParameter = If(isPartTime.HasValue, New ObjectParameter("IsPartTime", isPartTime), New ObjectParameter("IsPartTime", GetType(Boolean)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of Nullable(Of Decimal))("spr_User_Insert", usernameParameter, passwordParameter, isActiveParameter, isDataAdminParameter, isItemAdminParameter, isDataUserAdminParameter, fNameParameter, lNameParameter, emailParameter, sexParameter, telParameter, mobileParameter, sTimeParameter, fK_UserIDParameter, personCodeParameter, nationalIDParameter, nationalNoParameter, addressParameter, userPhotoParameter, fK_BrnachIDParameter, isPartTimeParameter)
    End Function

    Public Overridable Function spr_User_Login_Select(username As String, password As String) As ObjectResult(Of spr_User_Login_Select_Result)
        Dim usernameParameter As ObjectParameter = If(username IsNot Nothing, New ObjectParameter("Username", username), New ObjectParameter("Username", GetType(String)))

        Dim passwordParameter As ObjectParameter = If(password IsNot Nothing, New ObjectParameter("Password", password), New ObjectParameter("Password", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_User_Login_Select_Result)("spr_User_Login_Select", usernameParameter, passwordParameter)
    End Function

    Public Overridable Function spr_User_Management_Select(action As Nullable(Of Integer), fromIndex As Nullable(Of Integer), toIndex As Nullable(Of Integer), sEARCHSTR As String, branchID As Nullable(Of Integer), provinceID As Nullable(Of Integer)) As ObjectResult(Of spr_User_Management_Select_Result)
        Dim actionParameter As ObjectParameter = If(action.HasValue, New ObjectParameter("Action", action), New ObjectParameter("Action", GetType(Integer)))

        Dim fromIndexParameter As ObjectParameter = If(fromIndex.HasValue, New ObjectParameter("FromIndex", fromIndex), New ObjectParameter("FromIndex", GetType(Integer)))

        Dim toIndexParameter As ObjectParameter = If(toIndex.HasValue, New ObjectParameter("ToIndex", toIndex), New ObjectParameter("ToIndex", GetType(Integer)))

        Dim sEARCHSTRParameter As ObjectParameter = If(sEARCHSTR IsNot Nothing, New ObjectParameter("SEARCHSTR", sEARCHSTR), New ObjectParameter("SEARCHSTR", GetType(String)))

        Dim branchIDParameter As ObjectParameter = If(branchID.HasValue, New ObjectParameter("BranchID", branchID), New ObjectParameter("BranchID", GetType(Integer)))

        Dim provinceIDParameter As ObjectParameter = If(provinceID.HasValue, New ObjectParameter("ProvinceID", provinceID), New ObjectParameter("ProvinceID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_User_Management_Select_Result)("spr_User_Management_Select", actionParameter, fromIndexParameter, toIndexParameter, sEARCHSTRParameter, branchIDParameter, provinceIDParameter)
    End Function

    Public Overridable Function spr_User_Password_Update(iD As Nullable(Of Integer), password As String) As Integer
        Dim iDParameter As ObjectParameter = If(iD.HasValue, New ObjectParameter("ID", iD), New ObjectParameter("ID", GetType(Integer)))

        Dim passwordParameter As ObjectParameter = If(password IsNot Nothing, New ObjectParameter("Password", password), New ObjectParameter("Password", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_User_Password_Update", iDParameter, passwordParameter)
    End Function

    Public Overridable Function spr_User_Photo_Update(iD As Nullable(Of Integer), userPhoto As Byte()) As Integer
        Dim iDParameter As ObjectParameter = If(iD.HasValue, New ObjectParameter("ID", iD), New ObjectParameter("ID", GetType(Integer)))

        Dim userPhotoParameter As ObjectParameter = If(userPhoto IsNot Nothing, New ObjectParameter("UserPhoto", userPhoto), New ObjectParameter("UserPhoto", GetType(Byte())))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_User_Photo_Update", iDParameter, userPhotoParameter)
    End Function

    Public Overridable Function spr_User_Select(iD As Nullable(Of Integer)) As ObjectResult(Of spr_User_Select_Result)
        Dim iDParameter As ObjectParameter = If(iD.HasValue, New ObjectParameter("ID", iD), New ObjectParameter("ID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_User_Select_Result)("spr_User_Select", iDParameter)
    End Function

    Public Overridable Function spr_User_Update(iD As Nullable(Of Integer), isActive As Nullable(Of Boolean), isDataAdmin As Nullable(Of Boolean), isItemAdmin As Nullable(Of Boolean), isDataUserAdmin As Nullable(Of Boolean), fName As String, lName As String, email As String, sex As Nullable(Of Boolean), tel As String, mobile As String, sTime As Nullable(Of Date), fK_UserID As Nullable(Of Integer), personCode As String, nationalID As String, nationalNo As String, address As String, fK_BrnachID As Nullable(Of Integer), isPartTime As Nullable(Of Boolean)) As Integer
        Dim iDParameter As ObjectParameter = If(iD.HasValue, New ObjectParameter("ID", iD), New ObjectParameter("ID", GetType(Integer)))

        Dim isActiveParameter As ObjectParameter = If(isActive.HasValue, New ObjectParameter("IsActive", isActive), New ObjectParameter("IsActive", GetType(Boolean)))

        Dim isDataAdminParameter As ObjectParameter = If(isDataAdmin.HasValue, New ObjectParameter("IsDataAdmin", isDataAdmin), New ObjectParameter("IsDataAdmin", GetType(Boolean)))

        Dim isItemAdminParameter As ObjectParameter = If(isItemAdmin.HasValue, New ObjectParameter("IsItemAdmin", isItemAdmin), New ObjectParameter("IsItemAdmin", GetType(Boolean)))

        Dim isDataUserAdminParameter As ObjectParameter = If(isDataUserAdmin.HasValue, New ObjectParameter("IsDataUserAdmin", isDataUserAdmin), New ObjectParameter("IsDataUserAdmin", GetType(Boolean)))

        Dim fNameParameter As ObjectParameter = If(fName IsNot Nothing, New ObjectParameter("FName", fName), New ObjectParameter("FName", GetType(String)))

        Dim lNameParameter As ObjectParameter = If(lName IsNot Nothing, New ObjectParameter("LName", lName), New ObjectParameter("LName", GetType(String)))

        Dim emailParameter As ObjectParameter = If(email IsNot Nothing, New ObjectParameter("Email", email), New ObjectParameter("Email", GetType(String)))

        Dim sexParameter As ObjectParameter = If(sex.HasValue, New ObjectParameter("Sex", sex), New ObjectParameter("Sex", GetType(Boolean)))

        Dim telParameter As ObjectParameter = If(tel IsNot Nothing, New ObjectParameter("Tel", tel), New ObjectParameter("Tel", GetType(String)))

        Dim mobileParameter As ObjectParameter = If(mobile IsNot Nothing, New ObjectParameter("Mobile", mobile), New ObjectParameter("Mobile", GetType(String)))

        Dim sTimeParameter As ObjectParameter = If(sTime.HasValue, New ObjectParameter("STime", sTime), New ObjectParameter("STime", GetType(Date)))

        Dim fK_UserIDParameter As ObjectParameter = If(fK_UserID.HasValue, New ObjectParameter("FK_UserID", fK_UserID), New ObjectParameter("FK_UserID", GetType(Integer)))

        Dim personCodeParameter As ObjectParameter = If(personCode IsNot Nothing, New ObjectParameter("PersonCode", personCode), New ObjectParameter("PersonCode", GetType(String)))

        Dim nationalIDParameter As ObjectParameter = If(nationalID IsNot Nothing, New ObjectParameter("NationalID", nationalID), New ObjectParameter("NationalID", GetType(String)))

        Dim nationalNoParameter As ObjectParameter = If(nationalNo IsNot Nothing, New ObjectParameter("NationalNo", nationalNo), New ObjectParameter("NationalNo", GetType(String)))

        Dim addressParameter As ObjectParameter = If(address IsNot Nothing, New ObjectParameter("Address", address), New ObjectParameter("Address", GetType(String)))

        Dim fK_BrnachIDParameter As ObjectParameter = If(fK_BrnachID.HasValue, New ObjectParameter("FK_BrnachID", fK_BrnachID), New ObjectParameter("FK_BrnachID", GetType(Integer)))

        Dim isPartTimeParameter As ObjectParameter = If(isPartTime.HasValue, New ObjectParameter("IsPartTime", isPartTime), New ObjectParameter("IsPartTime", GetType(Boolean)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_User_Update", iDParameter, isActiveParameter, isDataAdminParameter, isItemAdminParameter, isDataUserAdminParameter, fNameParameter, lNameParameter, emailParameter, sexParameter, telParameter, mobileParameter, sTimeParameter, fK_UserIDParameter, personCodeParameter, nationalIDParameter, nationalNoParameter, addressParameter, fK_BrnachIDParameter, isPartTimeParameter)
    End Function

    Public Overridable Function spr_VoiceRecords_Count_Select(action As Nullable(Of Integer), sEARCHSTR As String, fK_UserID As Nullable(Of Integer)) As ObjectResult(Of Nullable(Of Integer))
        Dim actionParameter As ObjectParameter = If(action.HasValue, New ObjectParameter("Action", action), New ObjectParameter("Action", GetType(Integer)))

        Dim sEARCHSTRParameter As ObjectParameter = If(sEARCHSTR IsNot Nothing, New ObjectParameter("SEARCHSTR", sEARCHSTR), New ObjectParameter("SEARCHSTR", GetType(String)))

        Dim fK_UserIDParameter As ObjectParameter = If(fK_UserID.HasValue, New ObjectParameter("FK_UserID", fK_UserID), New ObjectParameter("FK_UserID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of Nullable(Of Integer))("spr_VoiceRecords_Count_Select", actionParameter, sEARCHSTRParameter, fK_UserIDParameter)
    End Function

    Public Overridable Function spr_VoiceRecords_Delete(iD As Nullable(Of Integer)) As Integer
        Dim iDParameter As ObjectParameter = If(iD.HasValue, New ObjectParameter("ID", iD), New ObjectParameter("ID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_VoiceRecords_Delete", iDParameter)
    End Function

    Public Overridable Function spr_VoiceRecords_Insert(recordID As Nullable(Of Integer), name As String, voiceFile As Byte(), duration As Nullable(Of Integer), size As String, fK_UserID As Nullable(Of Integer), fileName As String) As ObjectResult(Of Nullable(Of Decimal))
        Dim recordIDParameter As ObjectParameter = If(recordID.HasValue, New ObjectParameter("RecordID", recordID), New ObjectParameter("RecordID", GetType(Integer)))

        Dim nameParameter As ObjectParameter = If(name IsNot Nothing, New ObjectParameter("Name", name), New ObjectParameter("Name", GetType(String)))

        Dim voiceFileParameter As ObjectParameter = If(voiceFile IsNot Nothing, New ObjectParameter("VoiceFile", voiceFile), New ObjectParameter("VoiceFile", GetType(Byte())))

        Dim durationParameter As ObjectParameter = If(duration.HasValue, New ObjectParameter("Duration", duration), New ObjectParameter("Duration", GetType(Integer)))

        Dim sizeParameter As ObjectParameter = If(size IsNot Nothing, New ObjectParameter("Size", size), New ObjectParameter("Size", GetType(String)))

        Dim fK_UserIDParameter As ObjectParameter = If(fK_UserID.HasValue, New ObjectParameter("FK_UserID", fK_UserID), New ObjectParameter("FK_UserID", GetType(Integer)))

        Dim fileNameParameter As ObjectParameter = If(fileName IsNot Nothing, New ObjectParameter("FileName", fileName), New ObjectParameter("FileName", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of Nullable(Of Decimal))("spr_VoiceRecords_Insert", recordIDParameter, nameParameter, voiceFileParameter, durationParameter, sizeParameter, fK_UserIDParameter, fileNameParameter)
    End Function

    Public Overridable Function spr_VoiceRecords_Management_Select(action As Nullable(Of Integer), fromIndex As Nullable(Of Integer), toIndex As Nullable(Of Integer), sEARCHSTR As String, fK_UserID As Nullable(Of Integer)) As ObjectResult(Of spr_VoiceRecords_Management_Select_Result)
        Dim actionParameter As ObjectParameter = If(action.HasValue, New ObjectParameter("Action", action), New ObjectParameter("Action", GetType(Integer)))

        Dim fromIndexParameter As ObjectParameter = If(fromIndex.HasValue, New ObjectParameter("FromIndex", fromIndex), New ObjectParameter("FromIndex", GetType(Integer)))

        Dim toIndexParameter As ObjectParameter = If(toIndex.HasValue, New ObjectParameter("ToIndex", toIndex), New ObjectParameter("ToIndex", GetType(Integer)))

        Dim sEARCHSTRParameter As ObjectParameter = If(sEARCHSTR IsNot Nothing, New ObjectParameter("SEARCHSTR", sEARCHSTR), New ObjectParameter("SEARCHSTR", GetType(String)))

        Dim fK_UserIDParameter As ObjectParameter = If(fK_UserID.HasValue, New ObjectParameter("FK_UserID", fK_UserID), New ObjectParameter("FK_UserID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_VoiceRecords_Management_Select_Result)("spr_VoiceRecords_Management_Select", actionParameter, fromIndexParameter, toIndexParameter, sEARCHSTRParameter, fK_UserIDParameter)
    End Function

    Public Overridable Function spr_WarningIntervals_Check_Select(fK_LoanTypeID As Nullable(Of Integer), nPDuration As Nullable(Of Integer), lCbalance As Nullable(Of Decimal), branchID As Nullable(Of Integer)) As ObjectResult(Of spr_WarningIntervals_Check_Select_Result)
        Dim fK_LoanTypeIDParameter As ObjectParameter = If(fK_LoanTypeID.HasValue, New ObjectParameter("FK_LoanTypeID", fK_LoanTypeID), New ObjectParameter("FK_LoanTypeID", GetType(Integer)))

        Dim nPDurationParameter As ObjectParameter = If(nPDuration.HasValue, New ObjectParameter("NPDuration", nPDuration), New ObjectParameter("NPDuration", GetType(Integer)))

        Dim lCbalanceParameter As ObjectParameter = If(lCbalance.HasValue, New ObjectParameter("LCbalance", lCbalance), New ObjectParameter("LCbalance", GetType(Decimal)))

        Dim branchIDParameter As ObjectParameter = If(branchID.HasValue, New ObjectParameter("BranchID", branchID), New ObjectParameter("BranchID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_WarningIntervals_Check_Select_Result)("spr_WarningIntervals_Check_Select", fK_LoanTypeIDParameter, nPDurationParameter, lCbalanceParameter, branchIDParameter)
    End Function

    Public Overridable Function spr_WarningIntervals_CheckOverlap_Select(action As Nullable(Of Integer), warningIntervalsID As Nullable(Of Integer), loanTypeID As Nullable(Of Integer), fromDay As Nullable(Of Integer), toDay As Nullable(Of Integer), branchID As Nullable(Of Integer)) As ObjectResult(Of spr_WarningIntervals_CheckOverlap_Select_Result)
        Dim actionParameter As ObjectParameter = If(action.HasValue, New ObjectParameter("Action", action), New ObjectParameter("Action", GetType(Integer)))

        Dim warningIntervalsIDParameter As ObjectParameter = If(warningIntervalsID.HasValue, New ObjectParameter("WarningIntervalsID", warningIntervalsID), New ObjectParameter("WarningIntervalsID", GetType(Integer)))

        Dim loanTypeIDParameter As ObjectParameter = If(loanTypeID.HasValue, New ObjectParameter("LoanTypeID", loanTypeID), New ObjectParameter("LoanTypeID", GetType(Integer)))

        Dim fromDayParameter As ObjectParameter = If(fromDay.HasValue, New ObjectParameter("FromDay", fromDay), New ObjectParameter("FromDay", GetType(Integer)))

        Dim toDayParameter As ObjectParameter = If(toDay.HasValue, New ObjectParameter("ToDay", toDay), New ObjectParameter("ToDay", GetType(Integer)))

        Dim branchIDParameter As ObjectParameter = If(branchID.HasValue, New ObjectParameter("BranchID", branchID), New ObjectParameter("BranchID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_WarningIntervals_CheckOverlap_Select_Result)("spr_WarningIntervals_CheckOverlap_Select", actionParameter, warningIntervalsIDParameter, loanTypeIDParameter, fromDayParameter, toDayParameter, branchIDParameter)
    End Function

    Public Overridable Function spr_WarningIntervals_Count_Select(action As Nullable(Of Integer), sEARCHSTR As String, branchID As Nullable(Of Integer), provinceID As Nullable(Of Integer)) As ObjectResult(Of Nullable(Of Integer))
        Dim actionParameter As ObjectParameter = If(action.HasValue, New ObjectParameter("Action", action), New ObjectParameter("Action", GetType(Integer)))

        Dim sEARCHSTRParameter As ObjectParameter = If(sEARCHSTR IsNot Nothing, New ObjectParameter("SEARCHSTR", sEARCHSTR), New ObjectParameter("SEARCHSTR", GetType(String)))

        Dim branchIDParameter As ObjectParameter = If(branchID.HasValue, New ObjectParameter("BranchID", branchID), New ObjectParameter("BranchID", GetType(Integer)))

        Dim provinceIDParameter As ObjectParameter = If(provinceID.HasValue, New ObjectParameter("provinceID", provinceID), New ObjectParameter("provinceID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of Nullable(Of Integer))("spr_WarningIntervals_Count_Select", actionParameter, sEARCHSTRParameter, branchIDParameter, provinceIDParameter)
    End Function

    Public Overridable Function spr_WarningIntervals_Delete(iD As Nullable(Of Integer)) As Integer
        Dim iDParameter As ObjectParameter = If(iD.HasValue, New ObjectParameter("ID", iD), New ObjectParameter("ID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_WarningIntervals_Delete", iDParameter)
    End Function

    Public Overridable Function spr_WarningIntervals_Inerval_List_Select() As ObjectResult(Of spr_WarningIntervals_Inerval_List_Select_Result)
        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_WarningIntervals_Inerval_List_Select_Result)("spr_WarningIntervals_Inerval_List_Select")
    End Function

    Public Overridable Function spr_WarningIntervals_Insert(fromDay As Nullable(Of Integer), toDay As Nullable(Of Integer), warniningTitle As String, frequencyInDay As Nullable(Of Integer), startTime As Nullable(Of System.TimeSpan), frequencyPeriodHour As Nullable(Of Integer), sendSMS As Nullable(Of Boolean), callTelephone As Nullable(Of Boolean), issueNotice As Nullable(Of Boolean), issueIntroductionLetter As Nullable(Of Boolean), issueManifest As Nullable(Of Boolean), voiceMessage As Nullable(Of Boolean), toBorrower As Nullable(Of Boolean), toSponsor As Nullable(Of Boolean), fK_CUserID As Nullable(Of Integer), minimumAmount As Nullable(Of Decimal), loanAmount As Nullable(Of Decimal), instalmentAmount As Nullable(Of Decimal), iSActive As Nullable(Of Boolean)) As ObjectResult(Of Nullable(Of Decimal))
        Dim fromDayParameter As ObjectParameter = If(fromDay.HasValue, New ObjectParameter("FromDay", fromDay), New ObjectParameter("FromDay", GetType(Integer)))

        Dim toDayParameter As ObjectParameter = If(toDay.HasValue, New ObjectParameter("ToDay", toDay), New ObjectParameter("ToDay", GetType(Integer)))

        Dim warniningTitleParameter As ObjectParameter = If(warniningTitle IsNot Nothing, New ObjectParameter("WarniningTitle", warniningTitle), New ObjectParameter("WarniningTitle", GetType(String)))

        Dim frequencyInDayParameter As ObjectParameter = If(frequencyInDay.HasValue, New ObjectParameter("FrequencyInDay", frequencyInDay), New ObjectParameter("FrequencyInDay", GetType(Integer)))

        Dim startTimeParameter As ObjectParameter = If(startTime.HasValue, New ObjectParameter("StartTime", startTime), New ObjectParameter("StartTime", GetType(System.TimeSpan)))

        Dim frequencyPeriodHourParameter As ObjectParameter = If(frequencyPeriodHour.HasValue, New ObjectParameter("FrequencyPeriodHour", frequencyPeriodHour), New ObjectParameter("FrequencyPeriodHour", GetType(Integer)))

        Dim sendSMSParameter As ObjectParameter = If(sendSMS.HasValue, New ObjectParameter("SendSMS", sendSMS), New ObjectParameter("SendSMS", GetType(Boolean)))

        Dim callTelephoneParameter As ObjectParameter = If(callTelephone.HasValue, New ObjectParameter("CallTelephone", callTelephone), New ObjectParameter("CallTelephone", GetType(Boolean)))

        Dim issueNoticeParameter As ObjectParameter = If(issueNotice.HasValue, New ObjectParameter("IssueNotice", issueNotice), New ObjectParameter("IssueNotice", GetType(Boolean)))

        Dim issueIntroductionLetterParameter As ObjectParameter = If(issueIntroductionLetter.HasValue, New ObjectParameter("IssueIntroductionLetter", issueIntroductionLetter), New ObjectParameter("IssueIntroductionLetter", GetType(Boolean)))

        Dim issueManifestParameter As ObjectParameter = If(issueManifest.HasValue, New ObjectParameter("IssueManifest", issueManifest), New ObjectParameter("IssueManifest", GetType(Boolean)))

        Dim voiceMessageParameter As ObjectParameter = If(voiceMessage.HasValue, New ObjectParameter("VoiceMessage", voiceMessage), New ObjectParameter("VoiceMessage", GetType(Boolean)))

        Dim toBorrowerParameter As ObjectParameter = If(toBorrower.HasValue, New ObjectParameter("ToBorrower", toBorrower), New ObjectParameter("ToBorrower", GetType(Boolean)))

        Dim toSponsorParameter As ObjectParameter = If(toSponsor.HasValue, New ObjectParameter("ToSponsor", toSponsor), New ObjectParameter("ToSponsor", GetType(Boolean)))

        Dim fK_CUserIDParameter As ObjectParameter = If(fK_CUserID.HasValue, New ObjectParameter("FK_CUserID", fK_CUserID), New ObjectParameter("FK_CUserID", GetType(Integer)))

        Dim minimumAmountParameter As ObjectParameter = If(minimumAmount.HasValue, New ObjectParameter("MinimumAmount", minimumAmount), New ObjectParameter("MinimumAmount", GetType(Decimal)))

        Dim loanAmountParameter As ObjectParameter = If(loanAmount.HasValue, New ObjectParameter("LoanAmount", loanAmount), New ObjectParameter("LoanAmount", GetType(Decimal)))

        Dim instalmentAmountParameter As ObjectParameter = If(instalmentAmount.HasValue, New ObjectParameter("InstalmentAmount", instalmentAmount), New ObjectParameter("InstalmentAmount", GetType(Decimal)))

        Dim iSActiveParameter As ObjectParameter = If(iSActive.HasValue, New ObjectParameter("ISActive", iSActive), New ObjectParameter("ISActive", GetType(Boolean)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of Nullable(Of Decimal))("spr_WarningIntervals_Insert", fromDayParameter, toDayParameter, warniningTitleParameter, frequencyInDayParameter, startTimeParameter, frequencyPeriodHourParameter, sendSMSParameter, callTelephoneParameter, issueNoticeParameter, issueIntroductionLetterParameter, issueManifestParameter, voiceMessageParameter, toBorrowerParameter, toSponsorParameter, fK_CUserIDParameter, minimumAmountParameter, loanAmountParameter, instalmentAmountParameter, iSActiveParameter)
    End Function

    Public Overridable Function spr_WarningIntervals_List_Select() As ObjectResult(Of spr_WarningIntervals_List_Select_Result)
        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_WarningIntervals_List_Select_Result)("spr_WarningIntervals_List_Select")
    End Function

    Public Overridable Function spr_WarningIntervals_Management_Select(action As Nullable(Of Integer), fromIndex As Nullable(Of Integer), toIndex As Nullable(Of Integer), sEARCHSTR As String, branchID As Nullable(Of Integer), provinceID As Nullable(Of Integer)) As ObjectResult(Of spr_WarningIntervals_Management_Select_Result)
        Dim actionParameter As ObjectParameter = If(action.HasValue, New ObjectParameter("Action", action), New ObjectParameter("Action", GetType(Integer)))

        Dim fromIndexParameter As ObjectParameter = If(fromIndex.HasValue, New ObjectParameter("FromIndex", fromIndex), New ObjectParameter("FromIndex", GetType(Integer)))

        Dim toIndexParameter As ObjectParameter = If(toIndex.HasValue, New ObjectParameter("ToIndex", toIndex), New ObjectParameter("ToIndex", GetType(Integer)))

        Dim sEARCHSTRParameter As ObjectParameter = If(sEARCHSTR IsNot Nothing, New ObjectParameter("SEARCHSTR", sEARCHSTR), New ObjectParameter("SEARCHSTR", GetType(String)))

        Dim branchIDParameter As ObjectParameter = If(branchID.HasValue, New ObjectParameter("BranchID", branchID), New ObjectParameter("BranchID", GetType(Integer)))

        Dim provinceIDParameter As ObjectParameter = If(provinceID.HasValue, New ObjectParameter("ProvinceID", provinceID), New ObjectParameter("ProvinceID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_WarningIntervals_Management_Select_Result)("spr_WarningIntervals_Management_Select", actionParameter, fromIndexParameter, toIndexParameter, sEARCHSTRParameter, branchIDParameter, provinceIDParameter)
    End Function

    Public Overridable Function spr_WarningIntervals_MinMaxFromTo_Select() As ObjectResult(Of spr_WarningIntervals_MinMaxFromTo_Select_Result)
        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_WarningIntervals_MinMaxFromTo_Select_Result)("spr_WarningIntervals_MinMaxFromTo_Select")
    End Function

    Public Overridable Function spr_WarningIntervals_Select(iD As Nullable(Of Integer)) As ObjectResult(Of spr_WarningIntervals_Select_Result)
        Dim iDParameter As ObjectParameter = If(iD.HasValue, New ObjectParameter("ID", iD), New ObjectParameter("ID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_WarningIntervals_Select_Result)("spr_WarningIntervals_Select", iDParameter)
    End Function

    Public Overridable Function spr_WarningIntervals_Update(iD As Nullable(Of Integer), fromDay As Nullable(Of Integer), toDay As Nullable(Of Integer), warniningTitle As String, frequencyInDay As Nullable(Of Integer), startTime As Nullable(Of System.TimeSpan), frequencyPeriodHour As Nullable(Of Integer), sendSMS As Nullable(Of Boolean), callTelephone As Nullable(Of Boolean), issueNotice As Nullable(Of Boolean), issueIntroductionLetter As Nullable(Of Boolean), issueManifest As Nullable(Of Boolean), voiceMessage As Nullable(Of Boolean), toBorrower As Nullable(Of Boolean), toSponsor As Nullable(Of Boolean), fK_EUserID As Nullable(Of Integer), minimumAmount As Nullable(Of Decimal), loanAmount As Nullable(Of Decimal), instalmentAmount As Nullable(Of Decimal), iSActive As Nullable(Of Boolean)) As Integer
        Dim iDParameter As ObjectParameter = If(iD.HasValue, New ObjectParameter("ID", iD), New ObjectParameter("ID", GetType(Integer)))

        Dim fromDayParameter As ObjectParameter = If(fromDay.HasValue, New ObjectParameter("FromDay", fromDay), New ObjectParameter("FromDay", GetType(Integer)))

        Dim toDayParameter As ObjectParameter = If(toDay.HasValue, New ObjectParameter("ToDay", toDay), New ObjectParameter("ToDay", GetType(Integer)))

        Dim warniningTitleParameter As ObjectParameter = If(warniningTitle IsNot Nothing, New ObjectParameter("WarniningTitle", warniningTitle), New ObjectParameter("WarniningTitle", GetType(String)))

        Dim frequencyInDayParameter As ObjectParameter = If(frequencyInDay.HasValue, New ObjectParameter("FrequencyInDay", frequencyInDay), New ObjectParameter("FrequencyInDay", GetType(Integer)))

        Dim startTimeParameter As ObjectParameter = If(startTime.HasValue, New ObjectParameter("StartTime", startTime), New ObjectParameter("StartTime", GetType(System.TimeSpan)))

        Dim frequencyPeriodHourParameter As ObjectParameter = If(frequencyPeriodHour.HasValue, New ObjectParameter("FrequencyPeriodHour", frequencyPeriodHour), New ObjectParameter("FrequencyPeriodHour", GetType(Integer)))

        Dim sendSMSParameter As ObjectParameter = If(sendSMS.HasValue, New ObjectParameter("SendSMS", sendSMS), New ObjectParameter("SendSMS", GetType(Boolean)))

        Dim callTelephoneParameter As ObjectParameter = If(callTelephone.HasValue, New ObjectParameter("CallTelephone", callTelephone), New ObjectParameter("CallTelephone", GetType(Boolean)))

        Dim issueNoticeParameter As ObjectParameter = If(issueNotice.HasValue, New ObjectParameter("IssueNotice", issueNotice), New ObjectParameter("IssueNotice", GetType(Boolean)))

        Dim issueIntroductionLetterParameter As ObjectParameter = If(issueIntroductionLetter.HasValue, New ObjectParameter("IssueIntroductionLetter", issueIntroductionLetter), New ObjectParameter("IssueIntroductionLetter", GetType(Boolean)))

        Dim issueManifestParameter As ObjectParameter = If(issueManifest.HasValue, New ObjectParameter("IssueManifest", issueManifest), New ObjectParameter("IssueManifest", GetType(Boolean)))

        Dim voiceMessageParameter As ObjectParameter = If(voiceMessage.HasValue, New ObjectParameter("VoiceMessage", voiceMessage), New ObjectParameter("VoiceMessage", GetType(Boolean)))

        Dim toBorrowerParameter As ObjectParameter = If(toBorrower.HasValue, New ObjectParameter("ToBorrower", toBorrower), New ObjectParameter("ToBorrower", GetType(Boolean)))

        Dim toSponsorParameter As ObjectParameter = If(toSponsor.HasValue, New ObjectParameter("ToSponsor", toSponsor), New ObjectParameter("ToSponsor", GetType(Boolean)))

        Dim fK_EUserIDParameter As ObjectParameter = If(fK_EUserID.HasValue, New ObjectParameter("FK_EUserID", fK_EUserID), New ObjectParameter("FK_EUserID", GetType(Integer)))

        Dim minimumAmountParameter As ObjectParameter = If(minimumAmount.HasValue, New ObjectParameter("MinimumAmount", minimumAmount), New ObjectParameter("MinimumAmount", GetType(Decimal)))

        Dim loanAmountParameter As ObjectParameter = If(loanAmount.HasValue, New ObjectParameter("LoanAmount", loanAmount), New ObjectParameter("LoanAmount", GetType(Decimal)))

        Dim instalmentAmountParameter As ObjectParameter = If(instalmentAmount.HasValue, New ObjectParameter("InstalmentAmount", instalmentAmount), New ObjectParameter("InstalmentAmount", GetType(Decimal)))

        Dim iSActiveParameter As ObjectParameter = If(iSActive.HasValue, New ObjectParameter("ISActive", iSActive), New ObjectParameter("ISActive", GetType(Boolean)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_WarningIntervals_Update", iDParameter, fromDayParameter, toDayParameter, warniningTitleParameter, frequencyInDayParameter, startTimeParameter, frequencyPeriodHourParameter, sendSMSParameter, callTelephoneParameter, issueNoticeParameter, issueIntroductionLetterParameter, issueManifestParameter, voiceMessageParameter, toBorrowerParameter, toSponsorParameter, fK_EUserIDParameter, minimumAmountParameter, loanAmountParameter, instalmentAmountParameter, iSActiveParameter)
    End Function

    Public Overridable Function spr_WarningIntervalsBranch_Check_Select(warningIntervalID As Nullable(Of Integer), branchID As Nullable(Of Integer)) As ObjectResult(Of Nullable(Of Integer))
        Dim warningIntervalIDParameter As ObjectParameter = If(warningIntervalID.HasValue, New ObjectParameter("WarningIntervalID", warningIntervalID), New ObjectParameter("WarningIntervalID", GetType(Integer)))

        Dim branchIDParameter As ObjectParameter = If(branchID.HasValue, New ObjectParameter("BranchID", branchID), New ObjectParameter("BranchID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of Nullable(Of Integer))("spr_WarningIntervalsBranch_Check_Select", warningIntervalIDParameter, branchIDParameter)
    End Function

    Public Overridable Function spr_WarningIntervalsBranch_Delete(fK_WarningIntervalID As Nullable(Of Integer)) As Integer
        Dim fK_WarningIntervalIDParameter As ObjectParameter = If(fK_WarningIntervalID.HasValue, New ObjectParameter("FK_WarningIntervalID", fK_WarningIntervalID), New ObjectParameter("FK_WarningIntervalID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_WarningIntervalsBranch_Delete", fK_WarningIntervalIDParameter)
    End Function

    Public Overridable Function spr_WarningIntervalsBranch_Insert(fK_WarningIntervalID As Nullable(Of Integer), fK_BranchID As Nullable(Of Integer)) As Integer
        Dim fK_WarningIntervalIDParameter As ObjectParameter = If(fK_WarningIntervalID.HasValue, New ObjectParameter("FK_WarningIntervalID", fK_WarningIntervalID), New ObjectParameter("FK_WarningIntervalID", GetType(Integer)))

        Dim fK_BranchIDParameter As ObjectParameter = If(fK_BranchID.HasValue, New ObjectParameter("FK_BranchID", fK_BranchID), New ObjectParameter("FK_BranchID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_WarningIntervalsBranch_Insert", fK_WarningIntervalIDParameter, fK_BranchIDParameter)
    End Function

    Public Overridable Function spr_WarningIntervalsBranch_List_Select() As ObjectResult(Of String)
        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of String)("spr_WarningIntervalsBranch_List_Select")
    End Function

    Public Overridable Function spr_WarningIntervalsBranch_SelectByIntervalID(fK_WarningIntervalID As Nullable(Of Integer), fK_ProvinceID As Nullable(Of Integer)) As ObjectResult(Of spr_WarningIntervalsBranch_SelectByIntervalID_Result)
        Dim fK_WarningIntervalIDParameter As ObjectParameter = If(fK_WarningIntervalID.HasValue, New ObjectParameter("FK_WarningIntervalID", fK_WarningIntervalID), New ObjectParameter("FK_WarningIntervalID", GetType(Integer)))

        Dim fK_ProvinceIDParameter As ObjectParameter = If(fK_ProvinceID.HasValue, New ObjectParameter("FK_ProvinceID", fK_ProvinceID), New ObjectParameter("FK_ProvinceID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_WarningIntervalsBranch_SelectByIntervalID_Result)("spr_WarningIntervalsBranch_SelectByIntervalID", fK_WarningIntervalIDParameter, fK_ProvinceIDParameter)
    End Function

    Public Overridable Function spr_WarningIntervalsBranchProvince_Check_Select(warningIntervalID As Nullable(Of Integer), provinceID As Nullable(Of Integer)) As ObjectResult(Of Nullable(Of Integer))
        Dim warningIntervalIDParameter As ObjectParameter = If(warningIntervalID.HasValue, New ObjectParameter("WarningIntervalID", warningIntervalID), New ObjectParameter("WarningIntervalID", GetType(Integer)))

        Dim provinceIDParameter As ObjectParameter = If(provinceID.HasValue, New ObjectParameter("ProvinceID", provinceID), New ObjectParameter("ProvinceID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of Nullable(Of Integer))("spr_WarningIntervalsBranchProvince_Check_Select", warningIntervalIDParameter, provinceIDParameter)
    End Function

    Public Overridable Function spr_WarningIntervalsBranchProvince_SelectByIntervalID(fK_WarningIntervalID As Nullable(Of Integer)) As ObjectResult(Of Nullable(Of Integer))
        Dim fK_WarningIntervalIDParameter As ObjectParameter = If(fK_WarningIntervalID.HasValue, New ObjectParameter("FK_WarningIntervalID", fK_WarningIntervalID), New ObjectParameter("FK_WarningIntervalID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of Nullable(Of Integer))("spr_WarningIntervalsBranchProvince_SelectByIntervalID", fK_WarningIntervalIDParameter)
    End Function

    Public Overridable Function spr_WarningIntervalsLoanType_Check_Select(warningIntervalID As Nullable(Of Integer), loanTypeID As Nullable(Of Integer)) As ObjectResult(Of Nullable(Of Integer))
        Dim warningIntervalIDParameter As ObjectParameter = If(warningIntervalID.HasValue, New ObjectParameter("WarningIntervalID", warningIntervalID), New ObjectParameter("WarningIntervalID", GetType(Integer)))

        Dim loanTypeIDParameter As ObjectParameter = If(loanTypeID.HasValue, New ObjectParameter("LoanTypeID", loanTypeID), New ObjectParameter("LoanTypeID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of Nullable(Of Integer))("spr_WarningIntervalsLoanType_Check_Select", warningIntervalIDParameter, loanTypeIDParameter)
    End Function

    Public Overridable Function spr_WarningIntervalsLoanType_Insert(fK_WarningIntervalID As Nullable(Of Integer), fK_LoanTypeID As Nullable(Of Integer)) As Integer
        Dim fK_WarningIntervalIDParameter As ObjectParameter = If(fK_WarningIntervalID.HasValue, New ObjectParameter("FK_WarningIntervalID", fK_WarningIntervalID), New ObjectParameter("FK_WarningIntervalID", GetType(Integer)))

        Dim fK_LoanTypeIDParameter As ObjectParameter = If(fK_LoanTypeID.HasValue, New ObjectParameter("FK_LoanTypeID", fK_LoanTypeID), New ObjectParameter("FK_LoanTypeID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_WarningIntervalsLoanType_Insert", fK_WarningIntervalIDParameter, fK_LoanTypeIDParameter)
    End Function

    Public Overridable Function spr_WarningIntervalsLoanType_Select(action As Nullable(Of Integer), iD As Nullable(Of Integer), warningIntervalID As Nullable(Of Integer)) As ObjectResult(Of spr_WarningIntervalsLoanType_Select_Result)
        Dim actionParameter As ObjectParameter = If(action.HasValue, New ObjectParameter("Action", action), New ObjectParameter("Action", GetType(Integer)))

        Dim iDParameter As ObjectParameter = If(iD.HasValue, New ObjectParameter("ID", iD), New ObjectParameter("ID", GetType(Integer)))

        Dim warningIntervalIDParameter As ObjectParameter = If(warningIntervalID.HasValue, New ObjectParameter("WarningIntervalID", warningIntervalID), New ObjectParameter("WarningIntervalID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_WarningIntervalsLoanType_Select_Result)("spr_WarningIntervalsLoanType_Select", actionParameter, iDParameter, warningIntervalIDParameter)
    End Function

    Public Overridable Function spr_WarningIntervalsLoanType_WarningInterval_Delete(warningIntervalID As Nullable(Of Integer)) As Integer
        Dim warningIntervalIDParameter As ObjectParameter = If(warningIntervalID.HasValue, New ObjectParameter("WarningIntervalID", warningIntervalID), New ObjectParameter("WarningIntervalID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_WarningIntervalsLoanType_WarningInterval_Delete", warningIntervalIDParameter)
    End Function

    Public Overridable Function spr_WarningIntervalsSMSText_Delete(warningIntervalsID As Nullable(Of Integer)) As Integer
        Dim warningIntervalsIDParameter As ObjectParameter = If(warningIntervalsID.HasValue, New ObjectParameter("WarningIntervalsID", warningIntervalsID), New ObjectParameter("WarningIntervalsID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_WarningIntervalsSMSText_Delete", warningIntervalsIDParameter)
    End Function

    Public Overridable Function spr_WarningIntervalsSMSText_Insert(fK_WarningIntervalsID As Nullable(Of Integer), orderInLevel As Nullable(Of Integer), sMSText As String, isDynamic As Nullable(Of Boolean)) As Integer
        Dim fK_WarningIntervalsIDParameter As ObjectParameter = If(fK_WarningIntervalsID.HasValue, New ObjectParameter("FK_WarningIntervalsID", fK_WarningIntervalsID), New ObjectParameter("FK_WarningIntervalsID", GetType(Integer)))

        Dim orderInLevelParameter As ObjectParameter = If(orderInLevel.HasValue, New ObjectParameter("OrderInLevel", orderInLevel), New ObjectParameter("OrderInLevel", GetType(Integer)))

        Dim sMSTextParameter As ObjectParameter = If(sMSText IsNot Nothing, New ObjectParameter("SMSText", sMSText), New ObjectParameter("SMSText", GetType(String)))

        Dim isDynamicParameter As ObjectParameter = If(isDynamic.HasValue, New ObjectParameter("IsDynamic", isDynamic), New ObjectParameter("IsDynamic", GetType(Boolean)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_WarningIntervalsSMSText_Insert", fK_WarningIntervalsIDParameter, orderInLevelParameter, sMSTextParameter, isDynamicParameter)
    End Function

    Public Overridable Function spr_WarningIntervalsSMSText_Select(action As Nullable(Of Integer), iD As Nullable(Of Integer), warningIntervalsID As Nullable(Of Integer)) As Integer
        Dim actionParameter As ObjectParameter = If(action.HasValue, New ObjectParameter("Action", action), New ObjectParameter("Action", GetType(Integer)))

        Dim iDParameter As ObjectParameter = If(iD.HasValue, New ObjectParameter("ID", iD), New ObjectParameter("ID", GetType(Integer)))

        Dim warningIntervalsIDParameter As ObjectParameter = If(warningIntervalsID.HasValue, New ObjectParameter("WarningIntervalsID", warningIntervalsID), New ObjectParameter("WarningIntervalsID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_WarningIntervalsSMSText_Select", actionParameter, iDParameter, warningIntervalsIDParameter)
    End Function

    Public Overridable Function spr_WarningIntervalsSMSText_Update(iD As Nullable(Of Integer), fK_WarningIntervalsID As Nullable(Of Integer), orderInLevel As Nullable(Of Integer), sMSText As String, isDynamic As Nullable(Of Boolean)) As Integer
        Dim iDParameter As ObjectParameter = If(iD.HasValue, New ObjectParameter("ID", iD), New ObjectParameter("ID", GetType(Integer)))

        Dim fK_WarningIntervalsIDParameter As ObjectParameter = If(fK_WarningIntervalsID.HasValue, New ObjectParameter("FK_WarningIntervalsID", fK_WarningIntervalsID), New ObjectParameter("FK_WarningIntervalsID", GetType(Integer)))

        Dim orderInLevelParameter As ObjectParameter = If(orderInLevel.HasValue, New ObjectParameter("OrderInLevel", orderInLevel), New ObjectParameter("OrderInLevel", GetType(Integer)))

        Dim sMSTextParameter As ObjectParameter = If(sMSText IsNot Nothing, New ObjectParameter("SMSText", sMSText), New ObjectParameter("SMSText", GetType(String)))

        Dim isDynamicParameter As ObjectParameter = If(isDynamic.HasValue, New ObjectParameter("IsDynamic", isDynamic), New ObjectParameter("IsDynamic", GetType(Boolean)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_WarningIntervalsSMSText_Update", iDParameter, fK_WarningIntervalsIDParameter, orderInLevelParameter, sMSTextParameter, isDynamicParameter)
    End Function

    Public Overridable Function spr_WarningNotificationLog_Check_Select(loanID As Nullable(Of Integer), warningIntervalID As Nullable(Of Integer), day As Nullable(Of Date)) As ObjectResult(Of spr_WarningNotificationLog_Check_Select_Result)
        Dim loanIDParameter As ObjectParameter = If(loanID.HasValue, New ObjectParameter("LoanID", loanID), New ObjectParameter("LoanID", GetType(Integer)))

        Dim warningIntervalIDParameter As ObjectParameter = If(warningIntervalID.HasValue, New ObjectParameter("WarningIntervalID", warningIntervalID), New ObjectParameter("WarningIntervalID", GetType(Integer)))

        Dim dayParameter As ObjectParameter = If(day.HasValue, New ObjectParameter("Day", day), New ObjectParameter("Day", GetType(Date)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_WarningNotificationLog_Check_Select_Result)("spr_WarningNotificationLog_Check_Select", loanIDParameter, warningIntervalIDParameter, dayParameter)
    End Function

    Public Overridable Function spr_WarningNotificationLog_Insert(fK_LoanID As Nullable(Of Integer), fK_FileID As Nullable(Of Integer), fK_WarningIntervalID As Nullable(Of Integer), theDay As Nullable(Of Date), frquencyNo As Nullable(Of Integer), sTime As Nullable(Of Date), isHandy As Nullable(Of Boolean)) As ObjectResult(Of Nullable(Of Decimal))
        Dim fK_LoanIDParameter As ObjectParameter = If(fK_LoanID.HasValue, New ObjectParameter("FK_LoanID", fK_LoanID), New ObjectParameter("FK_LoanID", GetType(Integer)))

        Dim fK_FileIDParameter As ObjectParameter = If(fK_FileID.HasValue, New ObjectParameter("FK_FileID", fK_FileID), New ObjectParameter("FK_FileID", GetType(Integer)))

        Dim fK_WarningIntervalIDParameter As ObjectParameter = If(fK_WarningIntervalID.HasValue, New ObjectParameter("FK_WarningIntervalID", fK_WarningIntervalID), New ObjectParameter("FK_WarningIntervalID", GetType(Integer)))

        Dim theDayParameter As ObjectParameter = If(theDay.HasValue, New ObjectParameter("theDay", theDay), New ObjectParameter("theDay", GetType(Date)))

        Dim frquencyNoParameter As ObjectParameter = If(frquencyNo.HasValue, New ObjectParameter("FrquencyNo", frquencyNo), New ObjectParameter("FrquencyNo", GetType(Integer)))

        Dim sTimeParameter As ObjectParameter = If(sTime.HasValue, New ObjectParameter("STime", sTime), New ObjectParameter("STime", GetType(Date)))

        Dim isHandyParameter As ObjectParameter = If(isHandy.HasValue, New ObjectParameter("IsHandy", isHandy), New ObjectParameter("IsHandy", GetType(Boolean)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of Nullable(Of Decimal))("spr_WarningNotificationLog_Insert", fK_LoanIDParameter, fK_FileIDParameter, fK_WarningIntervalIDParameter, theDayParameter, frquencyNoParameter, sTimeParameter, isHandyParameter)
    End Function

    Public Overridable Function spr_WarningNotificationLog_Report(aCTION As Nullable(Of Integer), fromDate As Nullable(Of Date), toDate As Nullable(Of Date), parameter As String) As ObjectResult(Of spr_WarningNotificationLog_Report_Result)
        Dim aCTIONParameter As ObjectParameter = If(aCTION.HasValue, New ObjectParameter("ACTION", aCTION), New ObjectParameter("ACTION", GetType(Integer)))

        Dim fromDateParameter As ObjectParameter = If(fromDate.HasValue, New ObjectParameter("FromDate", fromDate), New ObjectParameter("FromDate", GetType(Date)))

        Dim toDateParameter As ObjectParameter = If(toDate.HasValue, New ObjectParameter("ToDate", toDate), New ObjectParameter("ToDate", GetType(Date)))

        Dim parameterParameter As ObjectParameter = If(parameter IsNot Nothing, New ObjectParameter("Parameter", parameter), New ObjectParameter("Parameter", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_WarningNotificationLog_Report_Result)("spr_WarningNotificationLog_Report", aCTIONParameter, fromDateParameter, toDateParameter, parameterParameter)
    End Function

    Public Overridable Function spr_WarningNotificationLogDetail_Batch_Update(fromID As Nullable(Of Integer), toID As Nullable(Of Integer), batchID As String) As Integer
        Dim fromIDParameter As ObjectParameter = If(fromID.HasValue, New ObjectParameter("FromID", fromID), New ObjectParameter("FromID", GetType(Integer)))

        Dim toIDParameter As ObjectParameter = If(toID.HasValue, New ObjectParameter("ToID", toID), New ObjectParameter("ToID", GetType(Integer)))

        Dim batchIDParameter As ObjectParameter = If(batchID IsNot Nothing, New ObjectParameter("BatchID", batchID), New ObjectParameter("BatchID", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_WarningNotificationLogDetail_Batch_Update", fromIDParameter, toIDParameter, batchIDParameter)
    End Function

    Public Overridable Function spr_WarningNotificationLogDetail_Delivery_Batch_Update(batchID As String, sendStatus As Nullable(Of Byte)) As Integer
        Dim batchIDParameter As ObjectParameter = If(batchID IsNot Nothing, New ObjectParameter("BatchID", batchID), New ObjectParameter("BatchID", GetType(String)))

        Dim sendStatusParameter As ObjectParameter = If(sendStatus.HasValue, New ObjectParameter("SendStatus", sendStatus), New ObjectParameter("SendStatus", GetType(Byte)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_WarningNotificationLogDetail_Delivery_Batch_Update", batchIDParameter, sendStatusParameter)
    End Function

    Public Overridable Function spr_WarningNotificationLogDetail_Delivery_Update(receiverNo As String, batchID As String, sendStatus As Nullable(Of Byte)) As Integer
        Dim receiverNoParameter As ObjectParameter = If(receiverNo IsNot Nothing, New ObjectParameter("ReceiverNo", receiverNo), New ObjectParameter("ReceiverNo", GetType(String)))

        Dim batchIDParameter As ObjectParameter = If(batchID IsNot Nothing, New ObjectParameter("BatchID", batchID), New ObjectParameter("BatchID", GetType(String)))

        Dim sendStatusParameter As ObjectParameter = If(sendStatus.HasValue, New ObjectParameter("SendStatus", sendStatus), New ObjectParameter("SendStatus", GetType(Byte)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_WarningNotificationLogDetail_Delivery_Update", receiverNoParameter, batchIDParameter, sendStatusParameter)
    End Function

    Public Overridable Function spr_WarningNotificationLogDetail_DeliverySMS_List_Select() As ObjectResult(Of String)
        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of String)("spr_WarningNotificationLogDetail_DeliverySMS_List_Select")
    End Function

    Public Overridable Function spr_WarningNotificationLogDetail_Insert(fK_WarningNotificationLogID As Nullable(Of Integer), senderInfo As String, receiverInfo As String, toBorrower As Nullable(Of Boolean), strMessage As String, remarks As String, sTime As Nullable(Of Date), batchID As String, sendStatus As Nullable(Of Byte), notificationTypeID As Nullable(Of Byte), sendDate As Nullable(Of Date)) As Integer
        Dim fK_WarningNotificationLogIDParameter As ObjectParameter = If(fK_WarningNotificationLogID.HasValue, New ObjectParameter("FK_WarningNotificationLogID", fK_WarningNotificationLogID), New ObjectParameter("FK_WarningNotificationLogID", GetType(Integer)))

        Dim senderInfoParameter As ObjectParameter = If(senderInfo IsNot Nothing, New ObjectParameter("SenderInfo", senderInfo), New ObjectParameter("SenderInfo", GetType(String)))

        Dim receiverInfoParameter As ObjectParameter = If(receiverInfo IsNot Nothing, New ObjectParameter("ReceiverInfo", receiverInfo), New ObjectParameter("ReceiverInfo", GetType(String)))

        Dim toBorrowerParameter As ObjectParameter = If(toBorrower.HasValue, New ObjectParameter("ToBorrower", toBorrower), New ObjectParameter("ToBorrower", GetType(Boolean)))

        Dim strMessageParameter As ObjectParameter = If(strMessage IsNot Nothing, New ObjectParameter("strMessage", strMessage), New ObjectParameter("strMessage", GetType(String)))

        Dim remarksParameter As ObjectParameter = If(remarks IsNot Nothing, New ObjectParameter("Remarks", remarks), New ObjectParameter("Remarks", GetType(String)))

        Dim sTimeParameter As ObjectParameter = If(sTime.HasValue, New ObjectParameter("STime", sTime), New ObjectParameter("STime", GetType(Date)))

        Dim batchIDParameter As ObjectParameter = If(batchID IsNot Nothing, New ObjectParameter("BatchID", batchID), New ObjectParameter("BatchID", GetType(String)))

        Dim sendStatusParameter As ObjectParameter = If(sendStatus.HasValue, New ObjectParameter("SendStatus", sendStatus), New ObjectParameter("SendStatus", GetType(Byte)))

        Dim notificationTypeIDParameter As ObjectParameter = If(notificationTypeID.HasValue, New ObjectParameter("NotificationTypeID", notificationTypeID), New ObjectParameter("NotificationTypeID", GetType(Byte)))

        Dim sendDateParameter As ObjectParameter = If(sendDate.HasValue, New ObjectParameter("SendDate", sendDate), New ObjectParameter("SendDate", GetType(Date)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_WarningNotificationLogDetail_Insert", fK_WarningNotificationLogIDParameter, senderInfoParameter, receiverInfoParameter, toBorrowerParameter, strMessageParameter, remarksParameter, sTimeParameter, batchIDParameter, sendStatusParameter, notificationTypeIDParameter, sendDateParameter)
    End Function

    Public Overridable Function spr_WarningNotificationLogDetail_NotSend_SMS_List() As ObjectResult(Of spr_WarningNotificationLogDetail_NotSend_SMS_List_Result)
        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_WarningNotificationLogDetail_NotSend_SMS_List_Result)("spr_WarningNotificationLogDetail_NotSend_SMS_List")
    End Function

    Public Overridable Function spr_WarningNotificationLogDetail_NotSend_VoiceSMS_List() As ObjectResult(Of spr_WarningNotificationLogDetail_NotSend_VoiceSMS_List_Result)
        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_WarningNotificationLogDetail_NotSend_VoiceSMS_List_Result)("spr_WarningNotificationLogDetail_NotSend_VoiceSMS_List")
    End Function

    Public Overridable Function spr_WarningNotificationLogDetail_Pending_SMSCount_Select(theDay As Nullable(Of Date)) As ObjectResult(Of Nullable(Of Integer))
        Dim theDayParameter As ObjectParameter = If(theDay.HasValue, New ObjectParameter("theDay", theDay), New ObjectParameter("theDay", GetType(Date)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of Nullable(Of Integer))("spr_WarningNotificationLogDetail_Pending_SMSCount_Select", theDayParameter)
    End Function

    Public Overridable Function spr_WarningNotificationLogDetail_Select(action As Nullable(Of Integer), iD As Nullable(Of Integer)) As ObjectResult(Of spr_WarningNotificationLogDetail_Select_Result)
        Dim actionParameter As ObjectParameter = If(action.HasValue, New ObjectParameter("Action", action), New ObjectParameter("Action", GetType(Integer)))

        Dim iDParameter As ObjectParameter = If(iD.HasValue, New ObjectParameter("ID", iD), New ObjectParameter("ID", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_WarningNotificationLogDetail_Select_Result)("spr_WarningNotificationLogDetail_Select", actionParameter, iDParameter)
    End Function

    Public Overridable Function spr_WarningNotificationLogDetail_SMSCount_Select(theDay As Nullable(Of Date)) As ObjectResult(Of Nullable(Of Integer))
        Dim theDayParameter As ObjectParameter = If(theDay.HasValue, New ObjectParameter("theDay", theDay), New ObjectParameter("theDay", GetType(Date)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of Nullable(Of Integer))("spr_WarningNotificationLogDetail_SMSCount_Select", theDayParameter)
    End Function

    Public Overridable Function spr_WarningNotificationLogDetail_Status_Update(iD As Nullable(Of Integer), remarks As String, sendStatus As Nullable(Of Byte), strMessage As String, sendDate As Nullable(Of Date)) As Integer
        Dim iDParameter As ObjectParameter = If(iD.HasValue, New ObjectParameter("ID", iD), New ObjectParameter("ID", GetType(Integer)))

        Dim remarksParameter As ObjectParameter = If(remarks IsNot Nothing, New ObjectParameter("Remarks", remarks), New ObjectParameter("Remarks", GetType(String)))

        Dim sendStatusParameter As ObjectParameter = If(sendStatus.HasValue, New ObjectParameter("SendStatus", sendStatus), New ObjectParameter("SendStatus", GetType(Byte)))

        Dim strMessageParameter As ObjectParameter = If(strMessage IsNot Nothing, New ObjectParameter("strMessage", strMessage), New ObjectParameter("strMessage", GetType(String)))

        Dim sendDateParameter As ObjectParameter = If(sendDate.HasValue, New ObjectParameter("SendDate", sendDate), New ObjectParameter("SendDate", GetType(Date)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("spr_WarningNotificationLogDetail_Status_Update", iDParameter, remarksParameter, sendStatusParameter, strMessageParameter, sendDateParameter)
    End Function

    Public Overridable Function spr_WarningNotificationLogDetail_VoiceSMSCount_Select(theDay As Nullable(Of Date)) As ObjectResult(Of Nullable(Of Integer))
        Dim theDayParameter As ObjectParameter = If(theDay.HasValue, New ObjectParameter("theDay", theDay), New ObjectParameter("theDay", GetType(Date)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of Nullable(Of Integer))("spr_WarningNotificationLogDetail_VoiceSMSCount_Select", theDayParameter)
    End Function

    Public Overridable Function spr_WarningNotificationLogDetailFirstLastLog_Select() As ObjectResult(Of spr_WarningNotificationLogDetailFirstLastLog_Select_Result)
        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_WarningNotificationLogDetailFirstLastLog_Select_Result)("spr_WarningNotificationLogDetailFirstLastLog_Select")
    End Function

    Public Overridable Function spr_WarningNotificationLogDetailFirstLastLogByDate_Select([date] As Nullable(Of Date)) As ObjectResult(Of spr_WarningNotificationLogDetailFirstLastLogByDate_Select_Result)
        Dim dateParameter As ObjectParameter = If([date].HasValue, New ObjectParameter("Date", [date]), New ObjectParameter("Date", GetType(Date)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_WarningNotificationLogDetailFirstLastLogByDate_Select_Result)("spr_WarningNotificationLogDetailFirstLastLogByDate_Select", dateParameter)
    End Function

    Public Overridable Function spr_WarningNotificationLogSummary_Report(aCTION As Nullable(Of Integer), fromDate As Nullable(Of Date), toDate As Nullable(Of Date), parameter As String) As ObjectResult(Of spr_WarningNotificationLogSummary_Report_Result)
        Dim aCTIONParameter As ObjectParameter = If(aCTION.HasValue, New ObjectParameter("ACTION", aCTION), New ObjectParameter("ACTION", GetType(Integer)))

        Dim fromDateParameter As ObjectParameter = If(fromDate.HasValue, New ObjectParameter("FromDate", fromDate), New ObjectParameter("FromDate", GetType(Date)))

        Dim toDateParameter As ObjectParameter = If(toDate.HasValue, New ObjectParameter("ToDate", toDate), New ObjectParameter("ToDate", GetType(Date)))

        Dim parameterParameter As ObjectParameter = If(parameter IsNot Nothing, New ObjectParameter("Parameter", parameter), New ObjectParameter("Parameter", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of spr_WarningNotificationLogSummary_Report_Result)("spr_WarningNotificationLogSummary_Report", aCTIONParameter, fromDateParameter, toDateParameter, parameterParameter)
    End Function

End Class
