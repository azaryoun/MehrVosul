'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
'
Namespace ZamanakWebService
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="Default_Service_SoapServer_ZamanakV4Binding", [Namespace]:="http://www.zamanak.ir/api/soap-v4")>  _
    Partial Public Class Default_Service_SoapServer_ZamanakV4Service
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private signUpOperationCompleted As System.Threading.SendOrPostCallback
        
        Private signUpAgencyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private signUpAgencyDiscountOperationCompleted As System.Threading.SendOrPostCallback
        
        Private signUpAgencySocialOperationCompleted As System.Threading.SendOrPostCallback
        
        Private myUsersOperationCompleted As System.Threading.SendOrPostCallback
        
        Private transferOperationCompleted As System.Threading.SendOrPostCallback
        
        Private captchaOperationCompleted As System.Threading.SendOrPostCallback
        
        Private numberReaderOperationCompleted As System.Threading.SendOrPostCallback
        
        Private addAbzarakOperationCompleted As System.Threading.SendOrPostCallback
        
        Private uploadEncodedAudioOperationCompleted As System.Threading.SendOrPostCallback
        
        Private authenticateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private receiveFaxOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getFaxesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getUnreadFaxesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getFaxesStringOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getUnreadFaxesStringOperationCompleted As System.Threading.SendOrPostCallback
        
        Private sentFaxesByCampIdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private newCampaignOperationCompleted As System.Threading.SendOrPostCallback
        
        Private newCampaignByEncodeRecOperationCompleted As System.Threading.SendOrPostCallback
        
        Private newCampaignbyNumbersOperationCompleted As System.Threading.SendOrPostCallback
        
        Private newPollCampaignOperationCompleted As System.Threading.SendOrPostCallback
        
        Private newPollCampaignByNumbersOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getCampaignsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getAccountInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getContactGroupsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getRecordingsListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private stopCampaignOperationCompleted As System.Threading.SendOrPostCallback
        
        Private startCampaignOperationCompleted As System.Threading.SendOrPostCallback
        
        Private cancelCampaignOperationCompleted As System.Threading.SendOrPostCallback
        
        Private calculateCostOperationCompleted As System.Threading.SendOrPostCallback
        
        Private calculateCostByNumberOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getCampaignLogsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getCampaignLogsExtendedOperationCompleted As System.Threading.SendOrPostCallback
        
        Private newContactOperationCompleted As System.Threading.SendOrPostCallback
        
        Private newContactGroupOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getContactsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getContactsForLiteOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getNotificationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private chargeAccountOperationCompleted As System.Threading.SendOrPostCallback
        
        Private sendFaxOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getFaxStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getPollStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getCampaignStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private newMixCampaignOperationCompleted As System.Threading.SendOrPostCallback
        
        Private newCampaignMinuteOperationCompleted As System.Threading.SendOrPostCallback
        
        Private newLiveCampaignOperationCompleted As System.Threading.SendOrPostCallback
        
        Private newLivePollCampaignOperationCompleted As System.Threading.SendOrPostCallback
        
        Private addLiveNumbersOperationCompleted As System.Threading.SendOrPostCallback
        
        Private liveNumberStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private liveCampaignStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private newLivePollSmsCampaignOperationCompleted As System.Threading.SendOrPostCallback
        
        Private sendSmsGroupOperationCompleted As System.Threading.SendOrPostCallback
        
        Private sendSmsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private sendCaptchaSmsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private enqueueOperationCompleted As System.Threading.SendOrPostCallback
        
        Private guarantyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private addDevAbzarakOperationCompleted As System.Threading.SendOrPostCallback
        
        Private netmonOperationCompleted As System.Threading.SendOrPostCallback
        
        Private secretaryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private emailGroupOperationCompleted As System.Threading.SendOrPostCallback
        
        Private billPaymentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private buyChargeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private newCampaignbyTextOperationCompleted As System.Threading.SendOrPostCallback
        
        Private textToVoiceCalculatorOperationCompleted As System.Threading.SendOrPostCallback
        
        Private smsBalanceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.MehrVosul.My.MySettings.Default.MehrVosul_ZamanakWebService_Default_Service_SoapServer_ZamanakV4Service
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event signUpCompleted As signUpCompletedEventHandler
        
        '''<remarks/>
        Public Event signUpAgencyCompleted As signUpAgencyCompletedEventHandler
        
        '''<remarks/>
        Public Event signUpAgencyDiscountCompleted As signUpAgencyDiscountCompletedEventHandler
        
        '''<remarks/>
        Public Event signUpAgencySocialCompleted As signUpAgencySocialCompletedEventHandler
        
        '''<remarks/>
        Public Event myUsersCompleted As myUsersCompletedEventHandler
        
        '''<remarks/>
        Public Event transferCompleted As transferCompletedEventHandler
        
        '''<remarks/>
        Public Event captchaCompleted As captchaCompletedEventHandler
        
        '''<remarks/>
        Public Event numberReaderCompleted As numberReaderCompletedEventHandler
        
        '''<remarks/>
        Public Event addAbzarakCompleted As addAbzarakCompletedEventHandler
        
        '''<remarks/>
        Public Event uploadEncodedAudioCompleted As uploadEncodedAudioCompletedEventHandler
        
        '''<remarks/>
        Public Event authenticateCompleted As authenticateCompletedEventHandler
        
        '''<remarks/>
        Public Event receiveFaxCompleted As receiveFaxCompletedEventHandler
        
        '''<remarks/>
        Public Event getFaxesCompleted As getFaxesCompletedEventHandler
        
        '''<remarks/>
        Public Event getUnreadFaxesCompleted As getUnreadFaxesCompletedEventHandler
        
        '''<remarks/>
        Public Event getFaxesStringCompleted As getFaxesStringCompletedEventHandler
        
        '''<remarks/>
        Public Event getUnreadFaxesStringCompleted As getUnreadFaxesStringCompletedEventHandler
        
        '''<remarks/>
        Public Event sentFaxesByCampIdCompleted As sentFaxesByCampIdCompletedEventHandler
        
        '''<remarks/>
        Public Event newCampaignCompleted As newCampaignCompletedEventHandler
        
        '''<remarks/>
        Public Event newCampaignByEncodeRecCompleted As newCampaignByEncodeRecCompletedEventHandler
        
        '''<remarks/>
        Public Event newCampaignbyNumbersCompleted As newCampaignbyNumbersCompletedEventHandler
        
        '''<remarks/>
        Public Event newPollCampaignCompleted As newPollCampaignCompletedEventHandler
        
        '''<remarks/>
        Public Event newPollCampaignByNumbersCompleted As newPollCampaignByNumbersCompletedEventHandler
        
        '''<remarks/>
        Public Event getCampaignsCompleted As getCampaignsCompletedEventHandler
        
        '''<remarks/>
        Public Event getAccountInfoCompleted As getAccountInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event getContactGroupsCompleted As getContactGroupsCompletedEventHandler
        
        '''<remarks/>
        Public Event getRecordingsListCompleted As getRecordingsListCompletedEventHandler
        
        '''<remarks/>
        Public Event stopCampaignCompleted As stopCampaignCompletedEventHandler
        
        '''<remarks/>
        Public Event startCampaignCompleted As startCampaignCompletedEventHandler
        
        '''<remarks/>
        Public Event cancelCampaignCompleted As cancelCampaignCompletedEventHandler
        
        '''<remarks/>
        Public Event calculateCostCompleted As calculateCostCompletedEventHandler
        
        '''<remarks/>
        Public Event calculateCostByNumberCompleted As calculateCostByNumberCompletedEventHandler
        
        '''<remarks/>
        Public Event getCampaignLogsCompleted As getCampaignLogsCompletedEventHandler
        
        '''<remarks/>
        Public Event getCampaignLogsExtendedCompleted As getCampaignLogsExtendedCompletedEventHandler
        
        '''<remarks/>
        Public Event newContactCompleted As newContactCompletedEventHandler
        
        '''<remarks/>
        Public Event newContactGroupCompleted As newContactGroupCompletedEventHandler
        
        '''<remarks/>
        Public Event getContactsCompleted As getContactsCompletedEventHandler
        
        '''<remarks/>
        Public Event getContactsForLiteCompleted As getContactsForLiteCompletedEventHandler
        
        '''<remarks/>
        Public Event getNotificationCompleted As getNotificationCompletedEventHandler
        
        '''<remarks/>
        Public Event chargeAccountCompleted As chargeAccountCompletedEventHandler
        
        '''<remarks/>
        Public Event sendFaxCompleted As sendFaxCompletedEventHandler
        
        '''<remarks/>
        Public Event getFaxStatusCompleted As getFaxStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event getPollStatusCompleted As getPollStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event getCampaignStatusCompleted As getCampaignStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event newMixCampaignCompleted As newMixCampaignCompletedEventHandler
        
        '''<remarks/>
        Public Event newCampaignMinuteCompleted As newCampaignMinuteCompletedEventHandler
        
        '''<remarks/>
        Public Event newLiveCampaignCompleted As newLiveCampaignCompletedEventHandler
        
        '''<remarks/>
        Public Event newLivePollCampaignCompleted As newLivePollCampaignCompletedEventHandler
        
        '''<remarks/>
        Public Event addLiveNumbersCompleted As addLiveNumbersCompletedEventHandler
        
        '''<remarks/>
        Public Event liveNumberStatusCompleted As liveNumberStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event liveCampaignStatusCompleted As liveCampaignStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event newLivePollSmsCampaignCompleted As newLivePollSmsCampaignCompletedEventHandler
        
        '''<remarks/>
        Public Event sendSmsGroupCompleted As sendSmsGroupCompletedEventHandler
        
        '''<remarks/>
        Public Event sendSmsCompleted As sendSmsCompletedEventHandler
        
        '''<remarks/>
        Public Event sendCaptchaSmsCompleted As sendCaptchaSmsCompletedEventHandler
        
        '''<remarks/>
        Public Event enqueueCompleted As enqueueCompletedEventHandler
        
        '''<remarks/>
        Public Event guarantyCompleted As guarantyCompletedEventHandler
        
        '''<remarks/>
        Public Event addDevAbzarakCompleted As addDevAbzarakCompletedEventHandler
        
        '''<remarks/>
        Public Event netmonCompleted As netmonCompletedEventHandler
        
        '''<remarks/>
        Public Event secretaryCompleted As secretaryCompletedEventHandler
        
        '''<remarks/>
        Public Event emailGroupCompleted As emailGroupCompletedEventHandler
        
        '''<remarks/>
        Public Event billPaymentCompleted As billPaymentCompletedEventHandler
        
        '''<remarks/>
        Public Event buyChargeCompleted As buyChargeCompletedEventHandler
        
        '''<remarks/>
        Public Event newCampaignbyTextCompleted As newCampaignbyTextCompletedEventHandler
        
        '''<remarks/>
        Public Event textToVoiceCalculatorCompleted As textToVoiceCalculatorCompletedEventHandler
        
        '''<remarks/>
        Public Event smsBalanceCompleted As smsBalanceCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://www.zamanak.ir/api/soap-v4#signUp", RequestNamespace:="http://www.zamanak.ir/api/soap-v4", ResponseNamespace:="http://www.zamanak.ir/api/soap-v4")>  _
        Public Function signUp(ByVal clientId As String, ByVal clientSecret As String, ByVal fname As String, ByVal lname As String, ByVal mobile As String, ByVal password As String, ByVal email As String, ByVal captcha As String) As <System.Xml.Serialization.SoapElementAttribute("return")> Object()
            Dim results() As Object = Me.Invoke("signUp", New Object() {clientId, clientSecret, fname, lname, mobile, password, email, captcha})
            Return CType(results(0),Object())
        End Function
        
        '''<remarks/>
        Public Overloads Sub signUpAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal fname As String, ByVal lname As String, ByVal mobile As String, ByVal password As String, ByVal email As String, ByVal captcha As String)
            Me.signUpAsync(clientId, clientSecret, fname, lname, mobile, password, email, captcha, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub signUpAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal fname As String, ByVal lname As String, ByVal mobile As String, ByVal password As String, ByVal email As String, ByVal captcha As String, ByVal userState As Object)
            If (Me.signUpOperationCompleted Is Nothing) Then
                Me.signUpOperationCompleted = AddressOf Me.OnsignUpOperationCompleted
            End If
            Me.InvokeAsync("signUp", New Object() {clientId, clientSecret, fname, lname, mobile, password, email, captcha}, Me.signUpOperationCompleted, userState)
        End Sub
        
        Private Sub OnsignUpOperationCompleted(ByVal arg As Object)
            If (Not (Me.signUpCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent signUpCompleted(Me, New signUpCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://www.zamanak.ir/api/soap-v4#signUpAgency", RequestNamespace:="http://www.zamanak.ir/api/soap-v4", ResponseNamespace:="http://www.zamanak.ir/api/soap-v4")>  _
        Public Function signUpAgency(ByVal clientId As String, ByVal clientSecret As String, ByVal agencyId As String, ByVal fname As String, ByVal lname As String, ByVal mobile As String, ByVal password As String, ByVal email As String, ByVal captcha As String) As <System.Xml.Serialization.SoapElementAttribute("return")> Object()
            Dim results() As Object = Me.Invoke("signUpAgency", New Object() {clientId, clientSecret, agencyId, fname, lname, mobile, password, email, captcha})
            Return CType(results(0),Object())
        End Function
        
        '''<remarks/>
        Public Overloads Sub signUpAgencyAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal agencyId As String, ByVal fname As String, ByVal lname As String, ByVal mobile As String, ByVal password As String, ByVal email As String, ByVal captcha As String)
            Me.signUpAgencyAsync(clientId, clientSecret, agencyId, fname, lname, mobile, password, email, captcha, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub signUpAgencyAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal agencyId As String, ByVal fname As String, ByVal lname As String, ByVal mobile As String, ByVal password As String, ByVal email As String, ByVal captcha As String, ByVal userState As Object)
            If (Me.signUpAgencyOperationCompleted Is Nothing) Then
                Me.signUpAgencyOperationCompleted = AddressOf Me.OnsignUpAgencyOperationCompleted
            End If
            Me.InvokeAsync("signUpAgency", New Object() {clientId, clientSecret, agencyId, fname, lname, mobile, password, email, captcha}, Me.signUpAgencyOperationCompleted, userState)
        End Sub
        
        Private Sub OnsignUpAgencyOperationCompleted(ByVal arg As Object)
            If (Not (Me.signUpAgencyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent signUpAgencyCompleted(Me, New signUpAgencyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://www.zamanak.ir/api/soap-v4#signUpAgencyDiscount", RequestNamespace:="http://www.zamanak.ir/api/soap-v4", ResponseNamespace:="http://www.zamanak.ir/api/soap-v4")>  _
        Public Function signUpAgencyDiscount(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As String, ByVal token As String, ByVal fname As String, ByVal lname As String, ByVal mobile As String, ByVal password As String, ByVal email As String, ByVal discount As String, ByVal discountminute As String, ByVal captcha As String) As <System.Xml.Serialization.SoapElementAttribute("return")> Object()
            Dim results() As Object = Me.Invoke("signUpAgencyDiscount", New Object() {clientId, clientSecret, uid, token, fname, lname, mobile, password, email, discount, discountminute, captcha})
            Return CType(results(0),Object())
        End Function
        
        '''<remarks/>
        Public Overloads Sub signUpAgencyDiscountAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As String, ByVal token As String, ByVal fname As String, ByVal lname As String, ByVal mobile As String, ByVal password As String, ByVal email As String, ByVal discount As String, ByVal discountminute As String, ByVal captcha As String)
            Me.signUpAgencyDiscountAsync(clientId, clientSecret, uid, token, fname, lname, mobile, password, email, discount, discountminute, captcha, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub signUpAgencyDiscountAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As String, ByVal token As String, ByVal fname As String, ByVal lname As String, ByVal mobile As String, ByVal password As String, ByVal email As String, ByVal discount As String, ByVal discountminute As String, ByVal captcha As String, ByVal userState As Object)
            If (Me.signUpAgencyDiscountOperationCompleted Is Nothing) Then
                Me.signUpAgencyDiscountOperationCompleted = AddressOf Me.OnsignUpAgencyDiscountOperationCompleted
            End If
            Me.InvokeAsync("signUpAgencyDiscount", New Object() {clientId, clientSecret, uid, token, fname, lname, mobile, password, email, discount, discountminute, captcha}, Me.signUpAgencyDiscountOperationCompleted, userState)
        End Sub
        
        Private Sub OnsignUpAgencyDiscountOperationCompleted(ByVal arg As Object)
            If (Not (Me.signUpAgencyDiscountCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent signUpAgencyDiscountCompleted(Me, New signUpAgencyDiscountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://www.zamanak.ir/api/soap-v4#signUpAgencySocial", RequestNamespace:="http://www.zamanak.ir/api/soap-v4", ResponseNamespace:="http://www.zamanak.ir/api/soap-v4")>  _
        Public Function signUpAgencySocial(ByVal clientId As String, ByVal clientSecret As String, ByVal agencyId As String, ByVal fname As String, ByVal lname As String, ByVal mobile As String, ByVal password As String, ByVal email As String, ByVal code As String) As <System.Xml.Serialization.SoapElementAttribute("return")> Object()
            Dim results() As Object = Me.Invoke("signUpAgencySocial", New Object() {clientId, clientSecret, agencyId, fname, lname, mobile, password, email, code})
            Return CType(results(0),Object())
        End Function
        
        '''<remarks/>
        Public Overloads Sub signUpAgencySocialAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal agencyId As String, ByVal fname As String, ByVal lname As String, ByVal mobile As String, ByVal password As String, ByVal email As String, ByVal code As String)
            Me.signUpAgencySocialAsync(clientId, clientSecret, agencyId, fname, lname, mobile, password, email, code, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub signUpAgencySocialAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal agencyId As String, ByVal fname As String, ByVal lname As String, ByVal mobile As String, ByVal password As String, ByVal email As String, ByVal code As String, ByVal userState As Object)
            If (Me.signUpAgencySocialOperationCompleted Is Nothing) Then
                Me.signUpAgencySocialOperationCompleted = AddressOf Me.OnsignUpAgencySocialOperationCompleted
            End If
            Me.InvokeAsync("signUpAgencySocial", New Object() {clientId, clientSecret, agencyId, fname, lname, mobile, password, email, code}, Me.signUpAgencySocialOperationCompleted, userState)
        End Sub
        
        Private Sub OnsignUpAgencySocialOperationCompleted(ByVal arg As Object)
            If (Not (Me.signUpAgencySocialCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent signUpAgencySocialCompleted(Me, New signUpAgencySocialCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://www.zamanak.ir/api/soap-v4#myUsers", RequestNamespace:="http://www.zamanak.ir/api/soap-v4", ResponseNamespace:="http://www.zamanak.ir/api/soap-v4")>  _
        Public Function myUsers(ByVal uid As String, ByVal token As String) As <System.Xml.Serialization.SoapElementAttribute("return")> Object()
            Dim results() As Object = Me.Invoke("myUsers", New Object() {uid, token})
            Return CType(results(0),Object())
        End Function
        
        '''<remarks/>
        Public Overloads Sub myUsersAsync(ByVal uid As String, ByVal token As String)
            Me.myUsersAsync(uid, token, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub myUsersAsync(ByVal uid As String, ByVal token As String, ByVal userState As Object)
            If (Me.myUsersOperationCompleted Is Nothing) Then
                Me.myUsersOperationCompleted = AddressOf Me.OnmyUsersOperationCompleted
            End If
            Me.InvokeAsync("myUsers", New Object() {uid, token}, Me.myUsersOperationCompleted, userState)
        End Sub
        
        Private Sub OnmyUsersOperationCompleted(ByVal arg As Object)
            If (Not (Me.myUsersCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent myUsersCompleted(Me, New myUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://www.zamanak.ir/api/soap-v4#transfer", RequestNamespace:="http://www.zamanak.ir/api/soap-v4", ResponseNamespace:="http://www.zamanak.ir/api/soap-v4")>  _
        Public Function transfer(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As String, ByVal token As String, ByVal [to] As String, ByVal amount As String) As <System.Xml.Serialization.SoapElementAttribute("return")> String
            Dim results() As Object = Me.Invoke("transfer", New Object() {clientId, clientSecret, uid, token, [to], amount})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub transferAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As String, ByVal token As String, ByVal [to] As String, ByVal amount As String)
            Me.transferAsync(clientId, clientSecret, uid, token, [to], amount, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub transferAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As String, ByVal token As String, ByVal [to] As String, ByVal amount As String, ByVal userState As Object)
            If (Me.transferOperationCompleted Is Nothing) Then
                Me.transferOperationCompleted = AddressOf Me.OntransferOperationCompleted
            End If
            Me.InvokeAsync("transfer", New Object() {clientId, clientSecret, uid, token, [to], amount}, Me.transferOperationCompleted, userState)
        End Sub
        
        Private Sub OntransferOperationCompleted(ByVal arg As Object)
            If (Not (Me.transferCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent transferCompleted(Me, New transferCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://www.zamanak.ir/api/soap-v4#captcha", RequestNamespace:="http://www.zamanak.ir/api/soap-v4", ResponseNamespace:="http://www.zamanak.ir/api/soap-v4")>  _
        Public Function captcha(ByVal username As String, ByVal password As String, ByVal mobile As String, <System.Xml.Serialization.SoapElementAttribute("captcha")> ByVal captcha1 As String) As <System.Xml.Serialization.SoapElementAttribute("return")> Object()
            Dim results() As Object = Me.Invoke("captcha", New Object() {username, password, mobile, captcha1})
            Return CType(results(0),Object())
        End Function
        
        '''<remarks/>
        Public Overloads Sub captchaAsync(ByVal username As String, ByVal password As String, ByVal mobile As String, ByVal captcha1 As String)
            Me.captchaAsync(username, password, mobile, captcha1, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub captchaAsync(ByVal username As String, ByVal password As String, ByVal mobile As String, ByVal captcha1 As String, ByVal userState As Object)
            If (Me.captchaOperationCompleted Is Nothing) Then
                Me.captchaOperationCompleted = AddressOf Me.OncaptchaOperationCompleted
            End If
            Me.InvokeAsync("captcha", New Object() {username, password, mobile, captcha1}, Me.captchaOperationCompleted, userState)
        End Sub
        
        Private Sub OncaptchaOperationCompleted(ByVal arg As Object)
            If (Not (Me.captchaCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent captchaCompleted(Me, New captchaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://www.zamanak.ir/api/soap-v4#numberReader", RequestNamespace:="http://www.zamanak.ir/api/soap-v4", ResponseNamespace:="http://www.zamanak.ir/api/soap-v4")>  _
        Public Function numberReader(ByVal username As String, ByVal password As String, ByVal mobile As String, ByVal numberToSay As String, <System.Xml.Serialization.SoapElementAttribute("captcha")> ByVal captcha1 As String) As <System.Xml.Serialization.SoapElementAttribute("return")> Object()
            Dim results() As Object = Me.Invoke("numberReader", New Object() {username, password, mobile, numberToSay, captcha1})
            Return CType(results(0),Object())
        End Function
        
        '''<remarks/>
        Public Overloads Sub numberReaderAsync(ByVal username As String, ByVal password As String, ByVal mobile As String, ByVal numberToSay As String, ByVal captcha1 As String)
            Me.numberReaderAsync(username, password, mobile, numberToSay, captcha1, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub numberReaderAsync(ByVal username As String, ByVal password As String, ByVal mobile As String, ByVal numberToSay As String, ByVal captcha1 As String, ByVal userState As Object)
            If (Me.numberReaderOperationCompleted Is Nothing) Then
                Me.numberReaderOperationCompleted = AddressOf Me.OnnumberReaderOperationCompleted
            End If
            Me.InvokeAsync("numberReader", New Object() {username, password, mobile, numberToSay, captcha1}, Me.numberReaderOperationCompleted, userState)
        End Sub
        
        Private Sub OnnumberReaderOperationCompleted(ByVal arg As Object)
            If (Not (Me.numberReaderCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent numberReaderCompleted(Me, New numberReaderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://www.zamanak.ir/api/soap-v4#addAbzarak", RequestNamespace:="http://www.zamanak.ir/api/soap-v4", ResponseNamespace:="http://www.zamanak.ir/api/soap-v4")>  _
        Public Function addAbzarak(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As String, ByVal token As String, ByVal memberid As String, ByVal abzarak As String, ByVal status As String) As <System.Xml.Serialization.SoapElementAttribute("return")> String
            Dim results() As Object = Me.Invoke("addAbzarak", New Object() {clientId, clientSecret, uid, token, memberid, abzarak, status})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub addAbzarakAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As String, ByVal token As String, ByVal memberid As String, ByVal abzarak As String, ByVal status As String)
            Me.addAbzarakAsync(clientId, clientSecret, uid, token, memberid, abzarak, status, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub addAbzarakAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As String, ByVal token As String, ByVal memberid As String, ByVal abzarak As String, ByVal status As String, ByVal userState As Object)
            If (Me.addAbzarakOperationCompleted Is Nothing) Then
                Me.addAbzarakOperationCompleted = AddressOf Me.OnaddAbzarakOperationCompleted
            End If
            Me.InvokeAsync("addAbzarak", New Object() {clientId, clientSecret, uid, token, memberid, abzarak, status}, Me.addAbzarakOperationCompleted, userState)
        End Sub
        
        Private Sub OnaddAbzarakOperationCompleted(ByVal arg As Object)
            If (Not (Me.addAbzarakCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent addAbzarakCompleted(Me, New addAbzarakCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://www.zamanak.ir/api/soap-v4#uploadEncodedAudio", RequestNamespace:="http://www.zamanak.ir/api/soap-v4", ResponseNamespace:="http://www.zamanak.ir/api/soap-v4")>  _
        Public Function uploadEncodedAudio(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As String, ByVal token As String, ByVal content As String) As <System.Xml.Serialization.SoapElementAttribute("return")> String
            Dim results() As Object = Me.Invoke("uploadEncodedAudio", New Object() {clientId, clientSecret, uid, token, content})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub uploadEncodedAudioAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As String, ByVal token As String, ByVal content As String)
            Me.uploadEncodedAudioAsync(clientId, clientSecret, uid, token, content, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub uploadEncodedAudioAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As String, ByVal token As String, ByVal content As String, ByVal userState As Object)
            If (Me.uploadEncodedAudioOperationCompleted Is Nothing) Then
                Me.uploadEncodedAudioOperationCompleted = AddressOf Me.OnuploadEncodedAudioOperationCompleted
            End If
            Me.InvokeAsync("uploadEncodedAudio", New Object() {clientId, clientSecret, uid, token, content}, Me.uploadEncodedAudioOperationCompleted, userState)
        End Sub
        
        Private Sub OnuploadEncodedAudioOperationCompleted(ByVal arg As Object)
            If (Not (Me.uploadEncodedAudioCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent uploadEncodedAudioCompleted(Me, New uploadEncodedAudioCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://www.zamanak.ir/api/soap-v4#authenticate", RequestNamespace:="http://www.zamanak.ir/api/soap-v4", ResponseNamespace:="http://www.zamanak.ir/api/soap-v4")>  _
        Public Function authenticate(ByVal clientId As String, ByVal clientSecret As String, ByVal username As String, ByVal password As String) As <System.Xml.Serialization.SoapElementAttribute("return")> Object()
            Dim results() As Object = Me.Invoke("authenticate", New Object() {clientId, clientSecret, username, password})
            Return CType(results(0),Object())
        End Function
        
        '''<remarks/>
        Public Overloads Sub authenticateAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal username As String, ByVal password As String)
            Me.authenticateAsync(clientId, clientSecret, username, password, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub authenticateAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal username As String, ByVal password As String, ByVal userState As Object)
            If (Me.authenticateOperationCompleted Is Nothing) Then
                Me.authenticateOperationCompleted = AddressOf Me.OnauthenticateOperationCompleted
            End If
            Me.InvokeAsync("authenticate", New Object() {clientId, clientSecret, username, password}, Me.authenticateOperationCompleted, userState)
        End Sub
        
        Private Sub OnauthenticateOperationCompleted(ByVal arg As Object)
            If (Not (Me.authenticateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent authenticateCompleted(Me, New authenticateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://www.zamanak.ir/api/soap-v4#receiveFax", RequestNamespace:="http://www.zamanak.ir/api/soap-v4", ResponseNamespace:="http://www.zamanak.ir/api/soap-v4")>  _
        Public Function receiveFax(ByVal uid As Integer, ByVal token As String, ByVal id As Integer) As <System.Xml.Serialization.SoapElementAttribute("return")> String
            Dim results() As Object = Me.Invoke("receiveFax", New Object() {uid, token, id})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub receiveFaxAsync(ByVal uid As Integer, ByVal token As String, ByVal id As Integer)
            Me.receiveFaxAsync(uid, token, id, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub receiveFaxAsync(ByVal uid As Integer, ByVal token As String, ByVal id As Integer, ByVal userState As Object)
            If (Me.receiveFaxOperationCompleted Is Nothing) Then
                Me.receiveFaxOperationCompleted = AddressOf Me.OnreceiveFaxOperationCompleted
            End If
            Me.InvokeAsync("receiveFax", New Object() {uid, token, id}, Me.receiveFaxOperationCompleted, userState)
        End Sub
        
        Private Sub OnreceiveFaxOperationCompleted(ByVal arg As Object)
            If (Not (Me.receiveFaxCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent receiveFaxCompleted(Me, New receiveFaxCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://www.zamanak.ir/api/soap-v4#getFaxes", RequestNamespace:="http://www.zamanak.ir/api/soap-v4", ResponseNamespace:="http://www.zamanak.ir/api/soap-v4")>  _
        Public Function getFaxes(ByVal uid As Integer, ByVal token As String, ByVal page As Integer) As <System.Xml.Serialization.SoapElementAttribute("return")> Object()
            Dim results() As Object = Me.Invoke("getFaxes", New Object() {uid, token, page})
            Return CType(results(0),Object())
        End Function
        
        '''<remarks/>
        Public Overloads Sub getFaxesAsync(ByVal uid As Integer, ByVal token As String, ByVal page As Integer)
            Me.getFaxesAsync(uid, token, page, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getFaxesAsync(ByVal uid As Integer, ByVal token As String, ByVal page As Integer, ByVal userState As Object)
            If (Me.getFaxesOperationCompleted Is Nothing) Then
                Me.getFaxesOperationCompleted = AddressOf Me.OngetFaxesOperationCompleted
            End If
            Me.InvokeAsync("getFaxes", New Object() {uid, token, page}, Me.getFaxesOperationCompleted, userState)
        End Sub
        
        Private Sub OngetFaxesOperationCompleted(ByVal arg As Object)
            If (Not (Me.getFaxesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getFaxesCompleted(Me, New getFaxesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://www.zamanak.ir/api/soap-v4#getUnreadFaxes", RequestNamespace:="http://www.zamanak.ir/api/soap-v4", ResponseNamespace:="http://www.zamanak.ir/api/soap-v4")>  _
        Public Function getUnreadFaxes(ByVal uid As Integer, ByVal token As String, ByVal page As Integer) As <System.Xml.Serialization.SoapElementAttribute("return")> Object()
            Dim results() As Object = Me.Invoke("getUnreadFaxes", New Object() {uid, token, page})
            Return CType(results(0),Object())
        End Function
        
        '''<remarks/>
        Public Overloads Sub getUnreadFaxesAsync(ByVal uid As Integer, ByVal token As String, ByVal page As Integer)
            Me.getUnreadFaxesAsync(uid, token, page, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getUnreadFaxesAsync(ByVal uid As Integer, ByVal token As String, ByVal page As Integer, ByVal userState As Object)
            If (Me.getUnreadFaxesOperationCompleted Is Nothing) Then
                Me.getUnreadFaxesOperationCompleted = AddressOf Me.OngetUnreadFaxesOperationCompleted
            End If
            Me.InvokeAsync("getUnreadFaxes", New Object() {uid, token, page}, Me.getUnreadFaxesOperationCompleted, userState)
        End Sub
        
        Private Sub OngetUnreadFaxesOperationCompleted(ByVal arg As Object)
            If (Not (Me.getUnreadFaxesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getUnreadFaxesCompleted(Me, New getUnreadFaxesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://www.zamanak.ir/api/soap-v4#getFaxesString", RequestNamespace:="http://www.zamanak.ir/api/soap-v4", ResponseNamespace:="http://www.zamanak.ir/api/soap-v4")>  _
        Public Function getFaxesString(ByVal uid As Integer, ByVal token As String, ByVal page As Integer) As <System.Xml.Serialization.SoapElementAttribute("return")> Object()
            Dim results() As Object = Me.Invoke("getFaxesString", New Object() {uid, token, page})
            Return CType(results(0),Object())
        End Function
        
        '''<remarks/>
        Public Overloads Sub getFaxesStringAsync(ByVal uid As Integer, ByVal token As String, ByVal page As Integer)
            Me.getFaxesStringAsync(uid, token, page, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getFaxesStringAsync(ByVal uid As Integer, ByVal token As String, ByVal page As Integer, ByVal userState As Object)
            If (Me.getFaxesStringOperationCompleted Is Nothing) Then
                Me.getFaxesStringOperationCompleted = AddressOf Me.OngetFaxesStringOperationCompleted
            End If
            Me.InvokeAsync("getFaxesString", New Object() {uid, token, page}, Me.getFaxesStringOperationCompleted, userState)
        End Sub
        
        Private Sub OngetFaxesStringOperationCompleted(ByVal arg As Object)
            If (Not (Me.getFaxesStringCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getFaxesStringCompleted(Me, New getFaxesStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://www.zamanak.ir/api/soap-v4#getUnreadFaxesString", RequestNamespace:="http://www.zamanak.ir/api/soap-v4", ResponseNamespace:="http://www.zamanak.ir/api/soap-v4")>  _
        Public Function getUnreadFaxesString(ByVal uid As Integer, ByVal token As String, ByVal page As Integer) As <System.Xml.Serialization.SoapElementAttribute("return")> Object()
            Dim results() As Object = Me.Invoke("getUnreadFaxesString", New Object() {uid, token, page})
            Return CType(results(0),Object())
        End Function
        
        '''<remarks/>
        Public Overloads Sub getUnreadFaxesStringAsync(ByVal uid As Integer, ByVal token As String, ByVal page As Integer)
            Me.getUnreadFaxesStringAsync(uid, token, page, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getUnreadFaxesStringAsync(ByVal uid As Integer, ByVal token As String, ByVal page As Integer, ByVal userState As Object)
            If (Me.getUnreadFaxesStringOperationCompleted Is Nothing) Then
                Me.getUnreadFaxesStringOperationCompleted = AddressOf Me.OngetUnreadFaxesStringOperationCompleted
            End If
            Me.InvokeAsync("getUnreadFaxesString", New Object() {uid, token, page}, Me.getUnreadFaxesStringOperationCompleted, userState)
        End Sub
        
        Private Sub OngetUnreadFaxesStringOperationCompleted(ByVal arg As Object)
            If (Not (Me.getUnreadFaxesStringCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getUnreadFaxesStringCompleted(Me, New getUnreadFaxesStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://www.zamanak.ir/api/soap-v4#sentFaxesByCampId", RequestNamespace:="http://www.zamanak.ir/api/soap-v4", ResponseNamespace:="http://www.zamanak.ir/api/soap-v4")>  _
        Public Function sentFaxesByCampId(ByVal uid As Integer, ByVal token As String, ByVal campId As Integer, ByVal page As Integer) As <System.Xml.Serialization.SoapElementAttribute("return")> Object()
            Dim results() As Object = Me.Invoke("sentFaxesByCampId", New Object() {uid, token, campId, page})
            Return CType(results(0),Object())
        End Function
        
        '''<remarks/>
        Public Overloads Sub sentFaxesByCampIdAsync(ByVal uid As Integer, ByVal token As String, ByVal campId As Integer, ByVal page As Integer)
            Me.sentFaxesByCampIdAsync(uid, token, campId, page, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub sentFaxesByCampIdAsync(ByVal uid As Integer, ByVal token As String, ByVal campId As Integer, ByVal page As Integer, ByVal userState As Object)
            If (Me.sentFaxesByCampIdOperationCompleted Is Nothing) Then
                Me.sentFaxesByCampIdOperationCompleted = AddressOf Me.OnsentFaxesByCampIdOperationCompleted
            End If
            Me.InvokeAsync("sentFaxesByCampId", New Object() {uid, token, campId, page}, Me.sentFaxesByCampIdOperationCompleted, userState)
        End Sub
        
        Private Sub OnsentFaxesByCampIdOperationCompleted(ByVal arg As Object)
            If (Not (Me.sentFaxesByCampIdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent sentFaxesByCampIdCompleted(Me, New sentFaxesByCampIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://www.zamanak.ir/api/soap-v4#newCampaign", RequestNamespace:="http://www.zamanak.ir/api/soap-v4", ResponseNamespace:="http://www.zamanak.ir/api/soap-v4")>  _
        Public Function newCampaign(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal name As String, ByVal [to]() As Object, ByVal recordingId As Integer, ByVal startTime As String, ByVal stopTime As String, ByVal repeatTotal As Integer) As <System.Xml.Serialization.SoapElementAttribute("return")> Object()
            Dim results() As Object = Me.Invoke("newCampaign", New Object() {clientId, clientSecret, uid, token, name, [to], recordingId, startTime, stopTime, repeatTotal})
            Return CType(results(0),Object())
        End Function
        
        '''<remarks/>
        Public Overloads Sub newCampaignAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal name As String, ByVal [to]() As Object, ByVal recordingId As Integer, ByVal startTime As String, ByVal stopTime As String, ByVal repeatTotal As Integer)
            Me.newCampaignAsync(clientId, clientSecret, uid, token, name, [to], recordingId, startTime, stopTime, repeatTotal, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub newCampaignAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal name As String, ByVal [to]() As Object, ByVal recordingId As Integer, ByVal startTime As String, ByVal stopTime As String, ByVal repeatTotal As Integer, ByVal userState As Object)
            If (Me.newCampaignOperationCompleted Is Nothing) Then
                Me.newCampaignOperationCompleted = AddressOf Me.OnnewCampaignOperationCompleted
            End If
            Me.InvokeAsync("newCampaign", New Object() {clientId, clientSecret, uid, token, name, [to], recordingId, startTime, stopTime, repeatTotal}, Me.newCampaignOperationCompleted, userState)
        End Sub
        
        Private Sub OnnewCampaignOperationCompleted(ByVal arg As Object)
            If (Not (Me.newCampaignCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent newCampaignCompleted(Me, New newCampaignCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://www.zamanak.ir/api/soap-v4#newCampaignByEncodeRec", RequestNamespace:="http://www.zamanak.ir/api/soap-v4", ResponseNamespace:="http://www.zamanak.ir/api/soap-v4")>  _
        Public Function newCampaignByEncodeRec(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal name As String, ByVal [to]() As Object, ByVal content As String, ByVal startTime As String, ByVal stopTime As String, ByVal repeatTotal As Integer) As <System.Xml.Serialization.SoapElementAttribute("return")> Object()
            Dim results() As Object = Me.Invoke("newCampaignByEncodeRec", New Object() {clientId, clientSecret, uid, token, name, [to], content, startTime, stopTime, repeatTotal})
            Return CType(results(0),Object())
        End Function
        
        '''<remarks/>
        Public Overloads Sub newCampaignByEncodeRecAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal name As String, ByVal [to]() As Object, ByVal content As String, ByVal startTime As String, ByVal stopTime As String, ByVal repeatTotal As Integer)
            Me.newCampaignByEncodeRecAsync(clientId, clientSecret, uid, token, name, [to], content, startTime, stopTime, repeatTotal, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub newCampaignByEncodeRecAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal name As String, ByVal [to]() As Object, ByVal content As String, ByVal startTime As String, ByVal stopTime As String, ByVal repeatTotal As Integer, ByVal userState As Object)
            If (Me.newCampaignByEncodeRecOperationCompleted Is Nothing) Then
                Me.newCampaignByEncodeRecOperationCompleted = AddressOf Me.OnnewCampaignByEncodeRecOperationCompleted
            End If
            Me.InvokeAsync("newCampaignByEncodeRec", New Object() {clientId, clientSecret, uid, token, name, [to], content, startTime, stopTime, repeatTotal}, Me.newCampaignByEncodeRecOperationCompleted, userState)
        End Sub
        
        Private Sub OnnewCampaignByEncodeRecOperationCompleted(ByVal arg As Object)
            If (Not (Me.newCampaignByEncodeRecCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent newCampaignByEncodeRecCompleted(Me, New newCampaignByEncodeRecCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://www.zamanak.ir/api/soap-v4#newCampaignbyNumbers", RequestNamespace:="http://www.zamanak.ir/api/soap-v4", ResponseNamespace:="http://www.zamanak.ir/api/soap-v4")>  _
        Public Function newCampaignbyNumbers(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal name As String, ByVal numbers() As Object, ByVal recordingId As Integer, ByVal startTime As String, ByVal stopTime As String, ByVal repeatTotal As Integer) As <System.Xml.Serialization.SoapElementAttribute("return")> Object()
            Dim results() As Object = Me.Invoke("newCampaignbyNumbers", New Object() {clientId, clientSecret, uid, token, name, numbers, recordingId, startTime, stopTime, repeatTotal})
            Return CType(results(0),Object())
        End Function
        
        '''<remarks/>
        Public Overloads Sub newCampaignbyNumbersAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal name As String, ByVal numbers() As Object, ByVal recordingId As Integer, ByVal startTime As String, ByVal stopTime As String, ByVal repeatTotal As Integer)
            Me.newCampaignbyNumbersAsync(clientId, clientSecret, uid, token, name, numbers, recordingId, startTime, stopTime, repeatTotal, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub newCampaignbyNumbersAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal name As String, ByVal numbers() As Object, ByVal recordingId As Integer, ByVal startTime As String, ByVal stopTime As String, ByVal repeatTotal As Integer, ByVal userState As Object)
            If (Me.newCampaignbyNumbersOperationCompleted Is Nothing) Then
                Me.newCampaignbyNumbersOperationCompleted = AddressOf Me.OnnewCampaignbyNumbersOperationCompleted
            End If
            Me.InvokeAsync("newCampaignbyNumbers", New Object() {clientId, clientSecret, uid, token, name, numbers, recordingId, startTime, stopTime, repeatTotal}, Me.newCampaignbyNumbersOperationCompleted, userState)
        End Sub
        
        Private Sub OnnewCampaignbyNumbersOperationCompleted(ByVal arg As Object)
            If (Not (Me.newCampaignbyNumbersCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent newCampaignbyNumbersCompleted(Me, New newCampaignbyNumbersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://www.zamanak.ir/api/soap-v4#newPollCampaign", RequestNamespace:="http://www.zamanak.ir/api/soap-v4", ResponseNamespace:="http://www.zamanak.ir/api/soap-v4")>  _
        Public Function newPollCampaign(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal name As String, ByVal [to]() As Object, ByVal recordingId As Integer, ByVal options() As Object, ByVal startTime As String, ByVal stopTime As String, ByVal repeatTotal As Integer) As <System.Xml.Serialization.SoapElementAttribute("return")> Integer
            Dim results() As Object = Me.Invoke("newPollCampaign", New Object() {clientId, clientSecret, uid, token, name, [to], recordingId, options, startTime, stopTime, repeatTotal})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub newPollCampaignAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal name As String, ByVal [to]() As Object, ByVal recordingId As Integer, ByVal options() As Object, ByVal startTime As String, ByVal stopTime As String, ByVal repeatTotal As Integer)
            Me.newPollCampaignAsync(clientId, clientSecret, uid, token, name, [to], recordingId, options, startTime, stopTime, repeatTotal, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub newPollCampaignAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal name As String, ByVal [to]() As Object, ByVal recordingId As Integer, ByVal options() As Object, ByVal startTime As String, ByVal stopTime As String, ByVal repeatTotal As Integer, ByVal userState As Object)
            If (Me.newPollCampaignOperationCompleted Is Nothing) Then
                Me.newPollCampaignOperationCompleted = AddressOf Me.OnnewPollCampaignOperationCompleted
            End If
            Me.InvokeAsync("newPollCampaign", New Object() {clientId, clientSecret, uid, token, name, [to], recordingId, options, startTime, stopTime, repeatTotal}, Me.newPollCampaignOperationCompleted, userState)
        End Sub
        
        Private Sub OnnewPollCampaignOperationCompleted(ByVal arg As Object)
            If (Not (Me.newPollCampaignCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent newPollCampaignCompleted(Me, New newPollCampaignCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://www.zamanak.ir/api/soap-v4#newPollCampaignByNumbers", RequestNamespace:="http://www.zamanak.ir/api/soap-v4", ResponseNamespace:="http://www.zamanak.ir/api/soap-v4")>  _
        Public Function newPollCampaignByNumbers(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal name As String, ByVal [to]() As Object, ByVal recordingId As Integer, ByVal options() As Object, ByVal startTime As String, ByVal stopTime As String, ByVal repeatTotal As Integer) As <System.Xml.Serialization.SoapElementAttribute("return")> Object()
            Dim results() As Object = Me.Invoke("newPollCampaignByNumbers", New Object() {clientId, clientSecret, uid, token, name, [to], recordingId, options, startTime, stopTime, repeatTotal})
            Return CType(results(0),Object())
        End Function
        
        '''<remarks/>
        Public Overloads Sub newPollCampaignByNumbersAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal name As String, ByVal [to]() As Object, ByVal recordingId As Integer, ByVal options() As Object, ByVal startTime As String, ByVal stopTime As String, ByVal repeatTotal As Integer)
            Me.newPollCampaignByNumbersAsync(clientId, clientSecret, uid, token, name, [to], recordingId, options, startTime, stopTime, repeatTotal, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub newPollCampaignByNumbersAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal name As String, ByVal [to]() As Object, ByVal recordingId As Integer, ByVal options() As Object, ByVal startTime As String, ByVal stopTime As String, ByVal repeatTotal As Integer, ByVal userState As Object)
            If (Me.newPollCampaignByNumbersOperationCompleted Is Nothing) Then
                Me.newPollCampaignByNumbersOperationCompleted = AddressOf Me.OnnewPollCampaignByNumbersOperationCompleted
            End If
            Me.InvokeAsync("newPollCampaignByNumbers", New Object() {clientId, clientSecret, uid, token, name, [to], recordingId, options, startTime, stopTime, repeatTotal}, Me.newPollCampaignByNumbersOperationCompleted, userState)
        End Sub
        
        Private Sub OnnewPollCampaignByNumbersOperationCompleted(ByVal arg As Object)
            If (Not (Me.newPollCampaignByNumbersCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent newPollCampaignByNumbersCompleted(Me, New newPollCampaignByNumbersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://www.zamanak.ir/api/soap-v4#getCampaigns", RequestNamespace:="http://www.zamanak.ir/api/soap-v4", ResponseNamespace:="http://www.zamanak.ir/api/soap-v4")>  _
        Public Function getCampaigns(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal page As Integer) As <System.Xml.Serialization.SoapElementAttribute("return")> Object()
            Dim results() As Object = Me.Invoke("getCampaigns", New Object() {clientId, clientSecret, uid, token, page})
            Return CType(results(0),Object())
        End Function
        
        '''<remarks/>
        Public Overloads Sub getCampaignsAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal page As Integer)
            Me.getCampaignsAsync(clientId, clientSecret, uid, token, page, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getCampaignsAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal page As Integer, ByVal userState As Object)
            If (Me.getCampaignsOperationCompleted Is Nothing) Then
                Me.getCampaignsOperationCompleted = AddressOf Me.OngetCampaignsOperationCompleted
            End If
            Me.InvokeAsync("getCampaigns", New Object() {clientId, clientSecret, uid, token, page}, Me.getCampaignsOperationCompleted, userState)
        End Sub
        
        Private Sub OngetCampaignsOperationCompleted(ByVal arg As Object)
            If (Not (Me.getCampaignsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getCampaignsCompleted(Me, New getCampaignsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://www.zamanak.ir/api/soap-v4#getAccountInfo", RequestNamespace:="http://www.zamanak.ir/api/soap-v4", ResponseNamespace:="http://www.zamanak.ir/api/soap-v4")>  _
        Public Function getAccountInfo(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String) As <System.Xml.Serialization.SoapElementAttribute("return")> Object()
            Dim results() As Object = Me.Invoke("getAccountInfo", New Object() {clientId, clientSecret, uid, token})
            Return CType(results(0),Object())
        End Function
        
        '''<remarks/>
        Public Overloads Sub getAccountInfoAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String)
            Me.getAccountInfoAsync(clientId, clientSecret, uid, token, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getAccountInfoAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal userState As Object)
            If (Me.getAccountInfoOperationCompleted Is Nothing) Then
                Me.getAccountInfoOperationCompleted = AddressOf Me.OngetAccountInfoOperationCompleted
            End If
            Me.InvokeAsync("getAccountInfo", New Object() {clientId, clientSecret, uid, token}, Me.getAccountInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OngetAccountInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.getAccountInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getAccountInfoCompleted(Me, New getAccountInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://www.zamanak.ir/api/soap-v4#getContactGroups", RequestNamespace:="http://www.zamanak.ir/api/soap-v4", ResponseNamespace:="http://www.zamanak.ir/api/soap-v4")>  _
        Public Function getContactGroups(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal page As Integer) As <System.Xml.Serialization.SoapElementAttribute("return")> Object()
            Dim results() As Object = Me.Invoke("getContactGroups", New Object() {clientId, clientSecret, uid, token, page})
            Return CType(results(0),Object())
        End Function
        
        '''<remarks/>
        Public Overloads Sub getContactGroupsAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal page As Integer)
            Me.getContactGroupsAsync(clientId, clientSecret, uid, token, page, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getContactGroupsAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal page As Integer, ByVal userState As Object)
            If (Me.getContactGroupsOperationCompleted Is Nothing) Then
                Me.getContactGroupsOperationCompleted = AddressOf Me.OngetContactGroupsOperationCompleted
            End If
            Me.InvokeAsync("getContactGroups", New Object() {clientId, clientSecret, uid, token, page}, Me.getContactGroupsOperationCompleted, userState)
        End Sub
        
        Private Sub OngetContactGroupsOperationCompleted(ByVal arg As Object)
            If (Not (Me.getContactGroupsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getContactGroupsCompleted(Me, New getContactGroupsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://www.zamanak.ir/api/soap-v4#getRecordingsList", RequestNamespace:="http://www.zamanak.ir/api/soap-v4", ResponseNamespace:="http://www.zamanak.ir/api/soap-v4")>  _
        Public Function getRecordingsList(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal page As Integer) As <System.Xml.Serialization.SoapElementAttribute("return")> Object()
            Dim results() As Object = Me.Invoke("getRecordingsList", New Object() {clientId, clientSecret, uid, token, page})
            Return CType(results(0),Object())
        End Function
        
        '''<remarks/>
        Public Overloads Sub getRecordingsListAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal page As Integer)
            Me.getRecordingsListAsync(clientId, clientSecret, uid, token, page, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getRecordingsListAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal page As Integer, ByVal userState As Object)
            If (Me.getRecordingsListOperationCompleted Is Nothing) Then
                Me.getRecordingsListOperationCompleted = AddressOf Me.OngetRecordingsListOperationCompleted
            End If
            Me.InvokeAsync("getRecordingsList", New Object() {clientId, clientSecret, uid, token, page}, Me.getRecordingsListOperationCompleted, userState)
        End Sub
        
        Private Sub OngetRecordingsListOperationCompleted(ByVal arg As Object)
            If (Not (Me.getRecordingsListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getRecordingsListCompleted(Me, New getRecordingsListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://www.zamanak.ir/api/soap-v4#stopCampaign", RequestNamespace:="http://www.zamanak.ir/api/soap-v4", ResponseNamespace:="http://www.zamanak.ir/api/soap-v4")>  _
        Public Function stopCampaign(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal campaignId As Integer) As <System.Xml.Serialization.SoapElementAttribute("return")> Boolean
            Dim results() As Object = Me.Invoke("stopCampaign", New Object() {clientId, clientSecret, uid, token, campaignId})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub stopCampaignAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal campaignId As Integer)
            Me.stopCampaignAsync(clientId, clientSecret, uid, token, campaignId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub stopCampaignAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal campaignId As Integer, ByVal userState As Object)
            If (Me.stopCampaignOperationCompleted Is Nothing) Then
                Me.stopCampaignOperationCompleted = AddressOf Me.OnstopCampaignOperationCompleted
            End If
            Me.InvokeAsync("stopCampaign", New Object() {clientId, clientSecret, uid, token, campaignId}, Me.stopCampaignOperationCompleted, userState)
        End Sub
        
        Private Sub OnstopCampaignOperationCompleted(ByVal arg As Object)
            If (Not (Me.stopCampaignCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent stopCampaignCompleted(Me, New stopCampaignCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://www.zamanak.ir/api/soap-v4#startCampaign", RequestNamespace:="http://www.zamanak.ir/api/soap-v4", ResponseNamespace:="http://www.zamanak.ir/api/soap-v4")>  _
        Public Function startCampaign(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal campaignId As Integer) As <System.Xml.Serialization.SoapElementAttribute("return")> Boolean
            Dim results() As Object = Me.Invoke("startCampaign", New Object() {clientId, clientSecret, uid, token, campaignId})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub startCampaignAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal campaignId As Integer)
            Me.startCampaignAsync(clientId, clientSecret, uid, token, campaignId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub startCampaignAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal campaignId As Integer, ByVal userState As Object)
            If (Me.startCampaignOperationCompleted Is Nothing) Then
                Me.startCampaignOperationCompleted = AddressOf Me.OnstartCampaignOperationCompleted
            End If
            Me.InvokeAsync("startCampaign", New Object() {clientId, clientSecret, uid, token, campaignId}, Me.startCampaignOperationCompleted, userState)
        End Sub
        
        Private Sub OnstartCampaignOperationCompleted(ByVal arg As Object)
            If (Not (Me.startCampaignCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent startCampaignCompleted(Me, New startCampaignCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://www.zamanak.ir/api/soap-v4#cancelCampaign", RequestNamespace:="http://www.zamanak.ir/api/soap-v4", ResponseNamespace:="http://www.zamanak.ir/api/soap-v4")>  _
        Public Function cancelCampaign(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal campaignId As Integer) As <System.Xml.Serialization.SoapElementAttribute("return")> Boolean
            Dim results() As Object = Me.Invoke("cancelCampaign", New Object() {clientId, clientSecret, uid, token, campaignId})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub cancelCampaignAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal campaignId As Integer)
            Me.cancelCampaignAsync(clientId, clientSecret, uid, token, campaignId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub cancelCampaignAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal campaignId As Integer, ByVal userState As Object)
            If (Me.cancelCampaignOperationCompleted Is Nothing) Then
                Me.cancelCampaignOperationCompleted = AddressOf Me.OncancelCampaignOperationCompleted
            End If
            Me.InvokeAsync("cancelCampaign", New Object() {clientId, clientSecret, uid, token, campaignId}, Me.cancelCampaignOperationCompleted, userState)
        End Sub
        
        Private Sub OncancelCampaignOperationCompleted(ByVal arg As Object)
            If (Not (Me.cancelCampaignCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent cancelCampaignCompleted(Me, New cancelCampaignCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://www.zamanak.ir/api/soap-v4#calculateCost", RequestNamespace:="http://www.zamanak.ir/api/soap-v4", ResponseNamespace:="http://www.zamanak.ir/api/soap-v4")>  _
        Public Function calculateCost(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal name As String, ByVal [to]() As Object, ByVal recordingId As Integer, ByVal repeatTotal As Integer) As <System.Xml.Serialization.SoapElementAttribute("return")> Object()
            Dim results() As Object = Me.Invoke("calculateCost", New Object() {clientId, clientSecret, uid, token, name, [to], recordingId, repeatTotal})
            Return CType(results(0),Object())
        End Function
        
        '''<remarks/>
        Public Overloads Sub calculateCostAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal name As String, ByVal [to]() As Object, ByVal recordingId As Integer, ByVal repeatTotal As Integer)
            Me.calculateCostAsync(clientId, clientSecret, uid, token, name, [to], recordingId, repeatTotal, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub calculateCostAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal name As String, ByVal [to]() As Object, ByVal recordingId As Integer, ByVal repeatTotal As Integer, ByVal userState As Object)
            If (Me.calculateCostOperationCompleted Is Nothing) Then
                Me.calculateCostOperationCompleted = AddressOf Me.OncalculateCostOperationCompleted
            End If
            Me.InvokeAsync("calculateCost", New Object() {clientId, clientSecret, uid, token, name, [to], recordingId, repeatTotal}, Me.calculateCostOperationCompleted, userState)
        End Sub
        
        Private Sub OncalculateCostOperationCompleted(ByVal arg As Object)
            If (Not (Me.calculateCostCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent calculateCostCompleted(Me, New calculateCostCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://www.zamanak.ir/api/soap-v4#calculateCostByNumber", RequestNamespace:="http://www.zamanak.ir/api/soap-v4", ResponseNamespace:="http://www.zamanak.ir/api/soap-v4")>  _
        Public Function calculateCostByNumber(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal name As String, ByVal [to]() As Object, ByVal recordingId As Integer, ByVal repeatTotal As Integer) As <System.Xml.Serialization.SoapElementAttribute("return")> Object()
            Dim results() As Object = Me.Invoke("calculateCostByNumber", New Object() {clientId, clientSecret, uid, token, name, [to], recordingId, repeatTotal})
            Return CType(results(0),Object())
        End Function
        
        '''<remarks/>
        Public Overloads Sub calculateCostByNumberAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal name As String, ByVal [to]() As Object, ByVal recordingId As Integer, ByVal repeatTotal As Integer)
            Me.calculateCostByNumberAsync(clientId, clientSecret, uid, token, name, [to], recordingId, repeatTotal, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub calculateCostByNumberAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal name As String, ByVal [to]() As Object, ByVal recordingId As Integer, ByVal repeatTotal As Integer, ByVal userState As Object)
            If (Me.calculateCostByNumberOperationCompleted Is Nothing) Then
                Me.calculateCostByNumberOperationCompleted = AddressOf Me.OncalculateCostByNumberOperationCompleted
            End If
            Me.InvokeAsync("calculateCostByNumber", New Object() {clientId, clientSecret, uid, token, name, [to], recordingId, repeatTotal}, Me.calculateCostByNumberOperationCompleted, userState)
        End Sub
        
        Private Sub OncalculateCostByNumberOperationCompleted(ByVal arg As Object)
            If (Not (Me.calculateCostByNumberCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent calculateCostByNumberCompleted(Me, New calculateCostByNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://www.zamanak.ir/api/soap-v4#getCampaignLogs", RequestNamespace:="http://www.zamanak.ir/api/soap-v4", ResponseNamespace:="http://www.zamanak.ir/api/soap-v4")>  _
        Public Function getCampaignLogs(ByVal clientId As String, ByVal clientSecret As Object, ByVal uid As Object, ByVal token As Object, ByVal campId As Object, ByVal page As Object) As <System.Xml.Serialization.SoapElementAttribute("return")> Object()
            Dim results() As Object = Me.Invoke("getCampaignLogs", New Object() {clientId, clientSecret, uid, token, campId, page})
            Return CType(results(0),Object())
        End Function
        
        '''<remarks/>
        Public Overloads Sub getCampaignLogsAsync(ByVal clientId As String, ByVal clientSecret As Object, ByVal uid As Object, ByVal token As Object, ByVal campId As Object, ByVal page As Object)
            Me.getCampaignLogsAsync(clientId, clientSecret, uid, token, campId, page, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getCampaignLogsAsync(ByVal clientId As String, ByVal clientSecret As Object, ByVal uid As Object, ByVal token As Object, ByVal campId As Object, ByVal page As Object, ByVal userState As Object)
            If (Me.getCampaignLogsOperationCompleted Is Nothing) Then
                Me.getCampaignLogsOperationCompleted = AddressOf Me.OngetCampaignLogsOperationCompleted
            End If
            Me.InvokeAsync("getCampaignLogs", New Object() {clientId, clientSecret, uid, token, campId, page}, Me.getCampaignLogsOperationCompleted, userState)
        End Sub
        
        Private Sub OngetCampaignLogsOperationCompleted(ByVal arg As Object)
            If (Not (Me.getCampaignLogsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getCampaignLogsCompleted(Me, New getCampaignLogsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://www.zamanak.ir/api/soap-v4#getCampaignLogsExtended", RequestNamespace:="http://www.zamanak.ir/api/soap-v4", ResponseNamespace:="http://www.zamanak.ir/api/soap-v4")>  _
        Public Function getCampaignLogsExtended(ByVal clientId As String, ByVal clientSecret As Object, ByVal uid As Object, ByVal token As Object, ByVal campId As Object, ByVal page As Object) As <System.Xml.Serialization.SoapElementAttribute("return")> Object()
            Dim results() As Object = Me.Invoke("getCampaignLogsExtended", New Object() {clientId, clientSecret, uid, token, campId, page})
            Return CType(results(0),Object())
        End Function
        
        '''<remarks/>
        Public Overloads Sub getCampaignLogsExtendedAsync(ByVal clientId As String, ByVal clientSecret As Object, ByVal uid As Object, ByVal token As Object, ByVal campId As Object, ByVal page As Object)
            Me.getCampaignLogsExtendedAsync(clientId, clientSecret, uid, token, campId, page, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getCampaignLogsExtendedAsync(ByVal clientId As String, ByVal clientSecret As Object, ByVal uid As Object, ByVal token As Object, ByVal campId As Object, ByVal page As Object, ByVal userState As Object)
            If (Me.getCampaignLogsExtendedOperationCompleted Is Nothing) Then
                Me.getCampaignLogsExtendedOperationCompleted = AddressOf Me.OngetCampaignLogsExtendedOperationCompleted
            End If
            Me.InvokeAsync("getCampaignLogsExtended", New Object() {clientId, clientSecret, uid, token, campId, page}, Me.getCampaignLogsExtendedOperationCompleted, userState)
        End Sub
        
        Private Sub OngetCampaignLogsExtendedOperationCompleted(ByVal arg As Object)
            If (Not (Me.getCampaignLogsExtendedCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getCampaignLogsExtendedCompleted(Me, New getCampaignLogsExtendedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://www.zamanak.ir/api/soap-v4#newContact", RequestNamespace:="http://www.zamanak.ir/api/soap-v4", ResponseNamespace:="http://www.zamanak.ir/api/soap-v4")>  _
        Public Function newContact(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal firstName As String, ByVal lastName As String, ByVal phoneNumber As String, ByVal company As String, ByVal address As String, ByVal email As String, ByVal Groups As String) As <System.Xml.Serialization.SoapElementAttribute("return")> Object()
            Dim results() As Object = Me.Invoke("newContact", New Object() {clientId, clientSecret, uid, token, firstName, lastName, phoneNumber, company, address, email, Groups})
            Return CType(results(0),Object())
        End Function
        
        '''<remarks/>
        Public Overloads Sub newContactAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal firstName As String, ByVal lastName As String, ByVal phoneNumber As String, ByVal company As String, ByVal address As String, ByVal email As String, ByVal Groups As String)
            Me.newContactAsync(clientId, clientSecret, uid, token, firstName, lastName, phoneNumber, company, address, email, Groups, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub newContactAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal firstName As String, ByVal lastName As String, ByVal phoneNumber As String, ByVal company As String, ByVal address As String, ByVal email As String, ByVal Groups As String, ByVal userState As Object)
            If (Me.newContactOperationCompleted Is Nothing) Then
                Me.newContactOperationCompleted = AddressOf Me.OnnewContactOperationCompleted
            End If
            Me.InvokeAsync("newContact", New Object() {clientId, clientSecret, uid, token, firstName, lastName, phoneNumber, company, address, email, Groups}, Me.newContactOperationCompleted, userState)
        End Sub
        
        Private Sub OnnewContactOperationCompleted(ByVal arg As Object)
            If (Not (Me.newContactCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent newContactCompleted(Me, New newContactCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://www.zamanak.ir/api/soap-v4#newContactGroup", RequestNamespace:="http://www.zamanak.ir/api/soap-v4", ResponseNamespace:="http://www.zamanak.ir/api/soap-v4")>  _
        Public Function newContactGroup(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal title As String) As <System.Xml.Serialization.SoapElementAttribute("return")> Object()
            Dim results() As Object = Me.Invoke("newContactGroup", New Object() {clientId, clientSecret, uid, token, title})
            Return CType(results(0),Object())
        End Function
        
        '''<remarks/>
        Public Overloads Sub newContactGroupAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal title As String)
            Me.newContactGroupAsync(clientId, clientSecret, uid, token, title, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub newContactGroupAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal title As String, ByVal userState As Object)
            If (Me.newContactGroupOperationCompleted Is Nothing) Then
                Me.newContactGroupOperationCompleted = AddressOf Me.OnnewContactGroupOperationCompleted
            End If
            Me.InvokeAsync("newContactGroup", New Object() {clientId, clientSecret, uid, token, title}, Me.newContactGroupOperationCompleted, userState)
        End Sub
        
        Private Sub OnnewContactGroupOperationCompleted(ByVal arg As Object)
            If (Not (Me.newContactGroupCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent newContactGroupCompleted(Me, New newContactGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://www.zamanak.ir/api/soap-v4#getContacts", RequestNamespace:="http://www.zamanak.ir/api/soap-v4", ResponseNamespace:="http://www.zamanak.ir/api/soap-v4")>  _
        Public Function getContacts(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal page As Integer) As <System.Xml.Serialization.SoapElementAttribute("return")> Object()
            Dim results() As Object = Me.Invoke("getContacts", New Object() {clientId, clientSecret, uid, token, page})
            Return CType(results(0),Object())
        End Function
        
        '''<remarks/>
        Public Overloads Sub getContactsAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal page As Integer)
            Me.getContactsAsync(clientId, clientSecret, uid, token, page, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getContactsAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal page As Integer, ByVal userState As Object)
            If (Me.getContactsOperationCompleted Is Nothing) Then
                Me.getContactsOperationCompleted = AddressOf Me.OngetContactsOperationCompleted
            End If
            Me.InvokeAsync("getContacts", New Object() {clientId, clientSecret, uid, token, page}, Me.getContactsOperationCompleted, userState)
        End Sub
        
        Private Sub OngetContactsOperationCompleted(ByVal arg As Object)
            If (Not (Me.getContactsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getContactsCompleted(Me, New getContactsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://www.zamanak.ir/api/soap-v4#getContactsForLite", RequestNamespace:="http://www.zamanak.ir/api/soap-v4", ResponseNamespace:="http://www.zamanak.ir/api/soap-v4")>  _
        Public Function getContactsForLite(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal page As Integer) As <System.Xml.Serialization.SoapElementAttribute("return")> Object()
            Dim results() As Object = Me.Invoke("getContactsForLite", New Object() {clientId, clientSecret, uid, token, page})
            Return CType(results(0),Object())
        End Function
        
        '''<remarks/>
        Public Overloads Sub getContactsForLiteAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal page As Integer)
            Me.getContactsForLiteAsync(clientId, clientSecret, uid, token, page, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getContactsForLiteAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal page As Integer, ByVal userState As Object)
            If (Me.getContactsForLiteOperationCompleted Is Nothing) Then
                Me.getContactsForLiteOperationCompleted = AddressOf Me.OngetContactsForLiteOperationCompleted
            End If
            Me.InvokeAsync("getContactsForLite", New Object() {clientId, clientSecret, uid, token, page}, Me.getContactsForLiteOperationCompleted, userState)
        End Sub
        
        Private Sub OngetContactsForLiteOperationCompleted(ByVal arg As Object)
            If (Not (Me.getContactsForLiteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getContactsForLiteCompleted(Me, New getContactsForLiteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://www.zamanak.ir/api/soap-v4#getNotification", RequestNamespace:="http://www.zamanak.ir/api/soap-v4", ResponseNamespace:="http://www.zamanak.ir/api/soap-v4")>  _
        Public Function getNotification(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal lastId As Integer) As <System.Xml.Serialization.SoapElementAttribute("return")> Object()
            Dim results() As Object = Me.Invoke("getNotification", New Object() {clientId, clientSecret, uid, token, lastId})
            Return CType(results(0),Object())
        End Function
        
        '''<remarks/>
        Public Overloads Sub getNotificationAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal lastId As Integer)
            Me.getNotificationAsync(clientId, clientSecret, uid, token, lastId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getNotificationAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal lastId As Integer, ByVal userState As Object)
            If (Me.getNotificationOperationCompleted Is Nothing) Then
                Me.getNotificationOperationCompleted = AddressOf Me.OngetNotificationOperationCompleted
            End If
            Me.InvokeAsync("getNotification", New Object() {clientId, clientSecret, uid, token, lastId}, Me.getNotificationOperationCompleted, userState)
        End Sub
        
        Private Sub OngetNotificationOperationCompleted(ByVal arg As Object)
            If (Not (Me.getNotificationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getNotificationCompleted(Me, New getNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://www.zamanak.ir/api/soap-v4#chargeAccount", RequestNamespace:="http://www.zamanak.ir/api/soap-v4", ResponseNamespace:="http://www.zamanak.ir/api/soap-v4")>  _
        Public Function chargeAccount(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal amount As Integer) As <System.Xml.Serialization.SoapElementAttribute("return")> Object()
            Dim results() As Object = Me.Invoke("chargeAccount", New Object() {clientId, clientSecret, uid, token, amount})
            Return CType(results(0),Object())
        End Function
        
        '''<remarks/>
        Public Overloads Sub chargeAccountAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal amount As Integer)
            Me.chargeAccountAsync(clientId, clientSecret, uid, token, amount, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub chargeAccountAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal amount As Integer, ByVal userState As Object)
            If (Me.chargeAccountOperationCompleted Is Nothing) Then
                Me.chargeAccountOperationCompleted = AddressOf Me.OnchargeAccountOperationCompleted
            End If
            Me.InvokeAsync("chargeAccount", New Object() {clientId, clientSecret, uid, token, amount}, Me.chargeAccountOperationCompleted, userState)
        End Sub
        
        Private Sub OnchargeAccountOperationCompleted(ByVal arg As Object)
            If (Not (Me.chargeAccountCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent chargeAccountCompleted(Me, New chargeAccountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://www.zamanak.ir/api/soap-v4#sendFax", RequestNamespace:="http://www.zamanak.ir/api/soap-v4", ResponseNamespace:="http://www.zamanak.ir/api/soap-v4")>  _
        Public Function sendFax(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal name As String, ByVal [to]() As Object, ByVal documentId As Integer, ByVal startTime As String, ByVal stopTime As String, ByVal repeatTotal As Integer) As <System.Xml.Serialization.SoapElementAttribute("return")> Object()
            Dim results() As Object = Me.Invoke("sendFax", New Object() {clientId, clientSecret, uid, token, name, [to], documentId, startTime, stopTime, repeatTotal})
            Return CType(results(0),Object())
        End Function
        
        '''<remarks/>
        Public Overloads Sub sendFaxAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal name As String, ByVal [to]() As Object, ByVal documentId As Integer, ByVal startTime As String, ByVal stopTime As String, ByVal repeatTotal As Integer)
            Me.sendFaxAsync(clientId, clientSecret, uid, token, name, [to], documentId, startTime, stopTime, repeatTotal, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub sendFaxAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal name As String, ByVal [to]() As Object, ByVal documentId As Integer, ByVal startTime As String, ByVal stopTime As String, ByVal repeatTotal As Integer, ByVal userState As Object)
            If (Me.sendFaxOperationCompleted Is Nothing) Then
                Me.sendFaxOperationCompleted = AddressOf Me.OnsendFaxOperationCompleted
            End If
            Me.InvokeAsync("sendFax", New Object() {clientId, clientSecret, uid, token, name, [to], documentId, startTime, stopTime, repeatTotal}, Me.sendFaxOperationCompleted, userState)
        End Sub
        
        Private Sub OnsendFaxOperationCompleted(ByVal arg As Object)
            If (Not (Me.sendFaxCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent sendFaxCompleted(Me, New sendFaxCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://www.zamanak.ir/api/soap-v4#getFaxStatus", RequestNamespace:="http://www.zamanak.ir/api/soap-v4", ResponseNamespace:="http://www.zamanak.ir/api/soap-v4")>  _
        Public Function getFaxStatus(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal campId As Integer, ByVal page As Integer) As <System.Xml.Serialization.SoapElementAttribute("return")> Object()
            Dim results() As Object = Me.Invoke("getFaxStatus", New Object() {clientId, clientSecret, uid, token, campId, page})
            Return CType(results(0),Object())
        End Function
        
        '''<remarks/>
        Public Overloads Sub getFaxStatusAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal campId As Integer, ByVal page As Integer)
            Me.getFaxStatusAsync(clientId, clientSecret, uid, token, campId, page, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getFaxStatusAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal campId As Integer, ByVal page As Integer, ByVal userState As Object)
            If (Me.getFaxStatusOperationCompleted Is Nothing) Then
                Me.getFaxStatusOperationCompleted = AddressOf Me.OngetFaxStatusOperationCompleted
            End If
            Me.InvokeAsync("getFaxStatus", New Object() {clientId, clientSecret, uid, token, campId, page}, Me.getFaxStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OngetFaxStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.getFaxStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getFaxStatusCompleted(Me, New getFaxStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://www.zamanak.ir/api/soap-v4#getPollStatus", RequestNamespace:="http://www.zamanak.ir/api/soap-v4", ResponseNamespace:="http://www.zamanak.ir/api/soap-v4")>  _
        Public Function getPollStatus(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal campId As Integer) As <System.Xml.Serialization.SoapElementAttribute("return")> Object()
            Dim results() As Object = Me.Invoke("getPollStatus", New Object() {clientId, clientSecret, uid, token, campId})
            Return CType(results(0),Object())
        End Function
        
        '''<remarks/>
        Public Overloads Sub getPollStatusAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal campId As Integer)
            Me.getPollStatusAsync(clientId, clientSecret, uid, token, campId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getPollStatusAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal campId As Integer, ByVal userState As Object)
            If (Me.getPollStatusOperationCompleted Is Nothing) Then
                Me.getPollStatusOperationCompleted = AddressOf Me.OngetPollStatusOperationCompleted
            End If
            Me.InvokeAsync("getPollStatus", New Object() {clientId, clientSecret, uid, token, campId}, Me.getPollStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OngetPollStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.getPollStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getPollStatusCompleted(Me, New getPollStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://www.zamanak.ir/api/soap-v4#getCampaignStatus", RequestNamespace:="http://www.zamanak.ir/api/soap-v4", ResponseNamespace:="http://www.zamanak.ir/api/soap-v4")>  _
        Public Function getCampaignStatus(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal campId As Integer) As <System.Xml.Serialization.SoapElementAttribute("return")> Object()
            Dim results() As Object = Me.Invoke("getCampaignStatus", New Object() {clientId, clientSecret, uid, token, campId})
            Return CType(results(0),Object())
        End Function
        
        '''<remarks/>
        Public Overloads Sub getCampaignStatusAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal campId As Integer)
            Me.getCampaignStatusAsync(clientId, clientSecret, uid, token, campId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getCampaignStatusAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal campId As Integer, ByVal userState As Object)
            If (Me.getCampaignStatusOperationCompleted Is Nothing) Then
                Me.getCampaignStatusOperationCompleted = AddressOf Me.OngetCampaignStatusOperationCompleted
            End If
            Me.InvokeAsync("getCampaignStatus", New Object() {clientId, clientSecret, uid, token, campId}, Me.getCampaignStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OngetCampaignStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.getCampaignStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getCampaignStatusCompleted(Me, New getCampaignStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://www.zamanak.ir/api/soap-v4#newMixCampaign", RequestNamespace:="http://www.zamanak.ir/api/soap-v4", ResponseNamespace:="http://www.zamanak.ir/api/soap-v4")>  _
        Public Function newMixCampaign(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal name As String, ByVal contact_count As Integer, ByVal recording_count As Integer, ByVal numbers_count As Integer, ByVal [to]() As Object, ByVal recordings() As Object, ByVal numbers() As Object, ByVal sayMethod As String, ByVal mixType As String, ByVal retry As Integer) As <System.Xml.Serialization.SoapElementAttribute("return")> String
            Dim results() As Object = Me.Invoke("newMixCampaign", New Object() {clientId, clientSecret, uid, token, name, contact_count, recording_count, numbers_count, [to], recordings, numbers, sayMethod, mixType, retry})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub newMixCampaignAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal name As String, ByVal contact_count As Integer, ByVal recording_count As Integer, ByVal numbers_count As Integer, ByVal [to]() As Object, ByVal recordings() As Object, ByVal numbers() As Object, ByVal sayMethod As String, ByVal mixType As String, ByVal retry As Integer)
            Me.newMixCampaignAsync(clientId, clientSecret, uid, token, name, contact_count, recording_count, numbers_count, [to], recordings, numbers, sayMethod, mixType, retry, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub newMixCampaignAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal name As String, ByVal contact_count As Integer, ByVal recording_count As Integer, ByVal numbers_count As Integer, ByVal [to]() As Object, ByVal recordings() As Object, ByVal numbers() As Object, ByVal sayMethod As String, ByVal mixType As String, ByVal retry As Integer, ByVal userState As Object)
            If (Me.newMixCampaignOperationCompleted Is Nothing) Then
                Me.newMixCampaignOperationCompleted = AddressOf Me.OnnewMixCampaignOperationCompleted
            End If
            Me.InvokeAsync("newMixCampaign", New Object() {clientId, clientSecret, uid, token, name, contact_count, recording_count, numbers_count, [to], recordings, numbers, sayMethod, mixType, retry}, Me.newMixCampaignOperationCompleted, userState)
        End Sub
        
        Private Sub OnnewMixCampaignOperationCompleted(ByVal arg As Object)
            If (Not (Me.newMixCampaignCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent newMixCampaignCompleted(Me, New newMixCampaignCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://www.zamanak.ir/api/soap-v4#newCampaignMinute", RequestNamespace:="http://www.zamanak.ir/api/soap-v4", ResponseNamespace:="http://www.zamanak.ir/api/soap-v4")>  _
        Public Function newCampaignMinute(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal name As String, ByVal numbers() As Object, ByVal recordingId As Integer, ByVal startTime As String, ByVal stopTime As String, ByVal repeatTotal As Integer) As <System.Xml.Serialization.SoapElementAttribute("return")> Object()
            Dim results() As Object = Me.Invoke("newCampaignMinute", New Object() {clientId, clientSecret, uid, token, name, numbers, recordingId, startTime, stopTime, repeatTotal})
            Return CType(results(0),Object())
        End Function
        
        '''<remarks/>
        Public Overloads Sub newCampaignMinuteAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal name As String, ByVal numbers() As Object, ByVal recordingId As Integer, ByVal startTime As String, ByVal stopTime As String, ByVal repeatTotal As Integer)
            Me.newCampaignMinuteAsync(clientId, clientSecret, uid, token, name, numbers, recordingId, startTime, stopTime, repeatTotal, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub newCampaignMinuteAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal name As String, ByVal numbers() As Object, ByVal recordingId As Integer, ByVal startTime As String, ByVal stopTime As String, ByVal repeatTotal As Integer, ByVal userState As Object)
            If (Me.newCampaignMinuteOperationCompleted Is Nothing) Then
                Me.newCampaignMinuteOperationCompleted = AddressOf Me.OnnewCampaignMinuteOperationCompleted
            End If
            Me.InvokeAsync("newCampaignMinute", New Object() {clientId, clientSecret, uid, token, name, numbers, recordingId, startTime, stopTime, repeatTotal}, Me.newCampaignMinuteOperationCompleted, userState)
        End Sub
        
        Private Sub OnnewCampaignMinuteOperationCompleted(ByVal arg As Object)
            If (Not (Me.newCampaignMinuteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent newCampaignMinuteCompleted(Me, New newCampaignMinuteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://www.zamanak.ir/api/soap-v4#newLiveCampaign", RequestNamespace:="http://www.zamanak.ir/api/soap-v4", ResponseNamespace:="http://www.zamanak.ir/api/soap-v4")>  _
        Public Function newLiveCampaign(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal name As String, ByVal recording_id As Integer, ByVal max_numbers As Integer, ByVal life_time As Integer, ByVal repeat_total As Integer, ByVal callback_url As String, ByVal minute As Boolean) As <System.Xml.Serialization.SoapElementAttribute("return")> Object()
            Dim results() As Object = Me.Invoke("newLiveCampaign", New Object() {clientId, clientSecret, uid, token, name, recording_id, max_numbers, life_time, repeat_total, callback_url, minute})
            Return CType(results(0),Object())
        End Function
        
        '''<remarks/>
        Public Overloads Sub newLiveCampaignAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal name As String, ByVal recording_id As Integer, ByVal max_numbers As Integer, ByVal life_time As Integer, ByVal repeat_total As Integer, ByVal callback_url As String, ByVal minute As Boolean)
            Me.newLiveCampaignAsync(clientId, clientSecret, uid, token, name, recording_id, max_numbers, life_time, repeat_total, callback_url, minute, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub newLiveCampaignAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal name As String, ByVal recording_id As Integer, ByVal max_numbers As Integer, ByVal life_time As Integer, ByVal repeat_total As Integer, ByVal callback_url As String, ByVal minute As Boolean, ByVal userState As Object)
            If (Me.newLiveCampaignOperationCompleted Is Nothing) Then
                Me.newLiveCampaignOperationCompleted = AddressOf Me.OnnewLiveCampaignOperationCompleted
            End If
            Me.InvokeAsync("newLiveCampaign", New Object() {clientId, clientSecret, uid, token, name, recording_id, max_numbers, life_time, repeat_total, callback_url, minute}, Me.newLiveCampaignOperationCompleted, userState)
        End Sub
        
        Private Sub OnnewLiveCampaignOperationCompleted(ByVal arg As Object)
            If (Not (Me.newLiveCampaignCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent newLiveCampaignCompleted(Me, New newLiveCampaignCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://www.zamanak.ir/api/soap-v4#newLivePollCampaign", RequestNamespace:="http://www.zamanak.ir/api/soap-v4", ResponseNamespace:="http://www.zamanak.ir/api/soap-v4")>  _
        Public Function newLivePollCampaign(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal name As String, ByVal recording_id As Integer, ByVal options() As Object, ByVal max_numbers As Integer, ByVal life_time As Integer, ByVal repeat_total As Integer, ByVal callback_url As String, ByVal minute As Boolean) As <System.Xml.Serialization.SoapElementAttribute("return")> Object()
            Dim results() As Object = Me.Invoke("newLivePollCampaign", New Object() {clientId, clientSecret, uid, token, name, recording_id, options, max_numbers, life_time, repeat_total, callback_url, minute})
            Return CType(results(0),Object())
        End Function
        
        '''<remarks/>
        Public Overloads Sub newLivePollCampaignAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal name As String, ByVal recording_id As Integer, ByVal options() As Object, ByVal max_numbers As Integer, ByVal life_time As Integer, ByVal repeat_total As Integer, ByVal callback_url As String, ByVal minute As Boolean)
            Me.newLivePollCampaignAsync(clientId, clientSecret, uid, token, name, recording_id, options, max_numbers, life_time, repeat_total, callback_url, minute, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub newLivePollCampaignAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal name As String, ByVal recording_id As Integer, ByVal options() As Object, ByVal max_numbers As Integer, ByVal life_time As Integer, ByVal repeat_total As Integer, ByVal callback_url As String, ByVal minute As Boolean, ByVal userState As Object)
            If (Me.newLivePollCampaignOperationCompleted Is Nothing) Then
                Me.newLivePollCampaignOperationCompleted = AddressOf Me.OnnewLivePollCampaignOperationCompleted
            End If
            Me.InvokeAsync("newLivePollCampaign", New Object() {clientId, clientSecret, uid, token, name, recording_id, options, max_numbers, life_time, repeat_total, callback_url, minute}, Me.newLivePollCampaignOperationCompleted, userState)
        End Sub
        
        Private Sub OnnewLivePollCampaignOperationCompleted(ByVal arg As Object)
            If (Not (Me.newLivePollCampaignCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent newLivePollCampaignCompleted(Me, New newLivePollCampaignCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://www.zamanak.ir/api/soap-v4#addLiveNumbers", RequestNamespace:="http://www.zamanak.ir/api/soap-v4", ResponseNamespace:="http://www.zamanak.ir/api/soap-v4")>  _
        Public Function addLiveNumbers(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal campid As Integer, ByVal numbers() As Object) As <System.Xml.Serialization.SoapElementAttribute("return")> Object()
            Dim results() As Object = Me.Invoke("addLiveNumbers", New Object() {clientId, clientSecret, uid, token, campid, numbers})
            Return CType(results(0),Object())
        End Function
        
        '''<remarks/>
        Public Overloads Sub addLiveNumbersAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal campid As Integer, ByVal numbers() As Object)
            Me.addLiveNumbersAsync(clientId, clientSecret, uid, token, campid, numbers, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub addLiveNumbersAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal campid As Integer, ByVal numbers() As Object, ByVal userState As Object)
            If (Me.addLiveNumbersOperationCompleted Is Nothing) Then
                Me.addLiveNumbersOperationCompleted = AddressOf Me.OnaddLiveNumbersOperationCompleted
            End If
            Me.InvokeAsync("addLiveNumbers", New Object() {clientId, clientSecret, uid, token, campid, numbers}, Me.addLiveNumbersOperationCompleted, userState)
        End Sub
        
        Private Sub OnaddLiveNumbersOperationCompleted(ByVal arg As Object)
            If (Not (Me.addLiveNumbersCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent addLiveNumbersCompleted(Me, New addLiveNumbersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://www.zamanak.ir/api/soap-v4#liveNumberStatus", RequestNamespace:="http://www.zamanak.ir/api/soap-v4", ResponseNamespace:="http://www.zamanak.ir/api/soap-v4")>  _
        Public Function liveNumberStatus(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal campid As Integer, ByVal phone() As Object) As <System.Xml.Serialization.SoapElementAttribute("return")> Object()
            Dim results() As Object = Me.Invoke("liveNumberStatus", New Object() {clientId, clientSecret, uid, token, campid, phone})
            Return CType(results(0),Object())
        End Function
        
        '''<remarks/>
        Public Overloads Sub liveNumberStatusAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal campid As Integer, ByVal phone() As Object)
            Me.liveNumberStatusAsync(clientId, clientSecret, uid, token, campid, phone, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub liveNumberStatusAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal campid As Integer, ByVal phone() As Object, ByVal userState As Object)
            If (Me.liveNumberStatusOperationCompleted Is Nothing) Then
                Me.liveNumberStatusOperationCompleted = AddressOf Me.OnliveNumberStatusOperationCompleted
            End If
            Me.InvokeAsync("liveNumberStatus", New Object() {clientId, clientSecret, uid, token, campid, phone}, Me.liveNumberStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OnliveNumberStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.liveNumberStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent liveNumberStatusCompleted(Me, New liveNumberStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://www.zamanak.ir/api/soap-v4#liveCampaignStatus", RequestNamespace:="http://www.zamanak.ir/api/soap-v4", ResponseNamespace:="http://www.zamanak.ir/api/soap-v4")>  _
        Public Function liveCampaignStatus(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal campid As Integer) As <System.Xml.Serialization.SoapElementAttribute("return")> Object()
            Dim results() As Object = Me.Invoke("liveCampaignStatus", New Object() {clientId, clientSecret, uid, token, campid})
            Return CType(results(0),Object())
        End Function
        
        '''<remarks/>
        Public Overloads Sub liveCampaignStatusAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal campid As Integer)
            Me.liveCampaignStatusAsync(clientId, clientSecret, uid, token, campid, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub liveCampaignStatusAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal campid As Integer, ByVal userState As Object)
            If (Me.liveCampaignStatusOperationCompleted Is Nothing) Then
                Me.liveCampaignStatusOperationCompleted = AddressOf Me.OnliveCampaignStatusOperationCompleted
            End If
            Me.InvokeAsync("liveCampaignStatus", New Object() {clientId, clientSecret, uid, token, campid}, Me.liveCampaignStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OnliveCampaignStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.liveCampaignStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent liveCampaignStatusCompleted(Me, New liveCampaignStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://www.zamanak.ir/api/soap-v4#newLivePollSmsCampaign", RequestNamespace:="http://www.zamanak.ir/api/soap-v4", ResponseNamespace:="http://www.zamanak.ir/api/soap-v4")>  _
        Public Function newLivePollSmsCampaign(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal sms() As Object, ByVal name As String, ByVal recording_id As Integer, ByVal options() As Object, ByVal smsOptions() As Object, ByVal max_numbers As Integer, ByVal life_time As Integer, ByVal repeat_total As Integer, ByVal minute As Boolean) As <System.Xml.Serialization.SoapElementAttribute("return")> Object()
            Dim results() As Object = Me.Invoke("newLivePollSmsCampaign", New Object() {clientId, clientSecret, uid, token, sms, name, recording_id, options, smsOptions, max_numbers, life_time, repeat_total, minute})
            Return CType(results(0),Object())
        End Function
        
        '''<remarks/>
        Public Overloads Sub newLivePollSmsCampaignAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal sms() As Object, ByVal name As String, ByVal recording_id As Integer, ByVal options() As Object, ByVal smsOptions() As Object, ByVal max_numbers As Integer, ByVal life_time As Integer, ByVal repeat_total As Integer, ByVal minute As Boolean)
            Me.newLivePollSmsCampaignAsync(clientId, clientSecret, uid, token, sms, name, recording_id, options, smsOptions, max_numbers, life_time, repeat_total, minute, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub newLivePollSmsCampaignAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal sms() As Object, ByVal name As String, ByVal recording_id As Integer, ByVal options() As Object, ByVal smsOptions() As Object, ByVal max_numbers As Integer, ByVal life_time As Integer, ByVal repeat_total As Integer, ByVal minute As Boolean, ByVal userState As Object)
            If (Me.newLivePollSmsCampaignOperationCompleted Is Nothing) Then
                Me.newLivePollSmsCampaignOperationCompleted = AddressOf Me.OnnewLivePollSmsCampaignOperationCompleted
            End If
            Me.InvokeAsync("newLivePollSmsCampaign", New Object() {clientId, clientSecret, uid, token, sms, name, recording_id, options, smsOptions, max_numbers, life_time, repeat_total, minute}, Me.newLivePollSmsCampaignOperationCompleted, userState)
        End Sub
        
        Private Sub OnnewLivePollSmsCampaignOperationCompleted(ByVal arg As Object)
            If (Not (Me.newLivePollSmsCampaignCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent newLivePollSmsCampaignCompleted(Me, New newLivePollSmsCampaignCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://www.zamanak.ir/api/soap-v4#sendSmsGroup", RequestNamespace:="http://www.zamanak.ir/api/soap-v4", ResponseNamespace:="http://www.zamanak.ir/api/soap-v4")>  _
        Public Function sendSmsGroup(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal name As String, ByVal group As String, ByVal message As String, ByVal username As String, ByVal password As String, ByVal company As String, ByVal sender As String) As <System.Xml.Serialization.SoapElementAttribute("return")> Object()
            Dim results() As Object = Me.Invoke("sendSmsGroup", New Object() {clientId, clientSecret, uid, token, name, group, message, username, password, company, sender})
            Return CType(results(0),Object())
        End Function
        
        '''<remarks/>
        Public Overloads Sub sendSmsGroupAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal name As String, ByVal group As String, ByVal message As String, ByVal username As String, ByVal password As String, ByVal company As String, ByVal sender As String)
            Me.sendSmsGroupAsync(clientId, clientSecret, uid, token, name, group, message, username, password, company, sender, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub sendSmsGroupAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal name As String, ByVal group As String, ByVal message As String, ByVal username As String, ByVal password As String, ByVal company As String, ByVal sender As String, ByVal userState As Object)
            If (Me.sendSmsGroupOperationCompleted Is Nothing) Then
                Me.sendSmsGroupOperationCompleted = AddressOf Me.OnsendSmsGroupOperationCompleted
            End If
            Me.InvokeAsync("sendSmsGroup", New Object() {clientId, clientSecret, uid, token, name, group, message, username, password, company, sender}, Me.sendSmsGroupOperationCompleted, userState)
        End Sub
        
        Private Sub OnsendSmsGroupOperationCompleted(ByVal arg As Object)
            If (Not (Me.sendSmsGroupCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent sendSmsGroupCompleted(Me, New sendSmsGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://www.zamanak.ir/api/soap-v4#sendSms", RequestNamespace:="http://www.zamanak.ir/api/soap-v4", ResponseNamespace:="http://www.zamanak.ir/api/soap-v4")>  _
        Public Function sendSms(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal name As String, ByVal [to]() As Object, ByVal message As String, ByVal username As String, ByVal password As String, ByVal company As String, ByVal sender As String) As <System.Xml.Serialization.SoapElementAttribute("return")> Object()
            Dim results() As Object = Me.Invoke("sendSms", New Object() {clientId, clientSecret, uid, token, name, [to], message, username, password, company, sender})
            Return CType(results(0),Object())
        End Function
        
        '''<remarks/>
        Public Overloads Sub sendSmsAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal name As String, ByVal [to]() As Object, ByVal message As String, ByVal username As String, ByVal password As String, ByVal company As String, ByVal sender As String)
            Me.sendSmsAsync(clientId, clientSecret, uid, token, name, [to], message, username, password, company, sender, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub sendSmsAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal name As String, ByVal [to]() As Object, ByVal message As String, ByVal username As String, ByVal password As String, ByVal company As String, ByVal sender As String, ByVal userState As Object)
            If (Me.sendSmsOperationCompleted Is Nothing) Then
                Me.sendSmsOperationCompleted = AddressOf Me.OnsendSmsOperationCompleted
            End If
            Me.InvokeAsync("sendSms", New Object() {clientId, clientSecret, uid, token, name, [to], message, username, password, company, sender}, Me.sendSmsOperationCompleted, userState)
        End Sub
        
        Private Sub OnsendSmsOperationCompleted(ByVal arg As Object)
            If (Not (Me.sendSmsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent sendSmsCompleted(Me, New sendSmsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://www.zamanak.ir/api/soap-v4#sendCaptchaSms", RequestNamespace:="http://www.zamanak.ir/api/soap-v4", ResponseNamespace:="http://www.zamanak.ir/api/soap-v4")>  _
        Public Function sendCaptchaSms(ByVal username As String, ByVal password As String, ByVal mobile As String, <System.Xml.Serialization.SoapElementAttribute("captcha")> ByVal captcha1 As Integer) As <System.Xml.Serialization.SoapElementAttribute("return")> Object()
            Dim results() As Object = Me.Invoke("sendCaptchaSms", New Object() {username, password, mobile, captcha1})
            Return CType(results(0),Object())
        End Function
        
        '''<remarks/>
        Public Overloads Sub sendCaptchaSmsAsync(ByVal username As String, ByVal password As String, ByVal mobile As String, ByVal captcha1 As Integer)
            Me.sendCaptchaSmsAsync(username, password, mobile, captcha1, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub sendCaptchaSmsAsync(ByVal username As String, ByVal password As String, ByVal mobile As String, ByVal captcha1 As Integer, ByVal userState As Object)
            If (Me.sendCaptchaSmsOperationCompleted Is Nothing) Then
                Me.sendCaptchaSmsOperationCompleted = AddressOf Me.OnsendCaptchaSmsOperationCompleted
            End If
            Me.InvokeAsync("sendCaptchaSms", New Object() {username, password, mobile, captcha1}, Me.sendCaptchaSmsOperationCompleted, userState)
        End Sub
        
        Private Sub OnsendCaptchaSmsOperationCompleted(ByVal arg As Object)
            If (Not (Me.sendCaptchaSmsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent sendCaptchaSmsCompleted(Me, New sendCaptchaSmsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://www.zamanak.ir/api/soap-v4#enqueue", RequestNamespace:="http://www.zamanak.ir/api/soap-v4", ResponseNamespace:="http://www.zamanak.ir/api/soap-v4")>  _
        Public Function enqueue(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal message() As Object, ByVal destinations() As Object, ByVal originators() As Object, ByVal udhs() As Object) As <System.Xml.Serialization.SoapElementAttribute("return")> String
            Dim results() As Object = Me.Invoke("enqueue", New Object() {clientId, clientSecret, uid, token, message, destinations, originators, udhs})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub enqueueAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal message() As Object, ByVal destinations() As Object, ByVal originators() As Object, ByVal udhs() As Object)
            Me.enqueueAsync(clientId, clientSecret, uid, token, message, destinations, originators, udhs, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub enqueueAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal message() As Object, ByVal destinations() As Object, ByVal originators() As Object, ByVal udhs() As Object, ByVal userState As Object)
            If (Me.enqueueOperationCompleted Is Nothing) Then
                Me.enqueueOperationCompleted = AddressOf Me.OnenqueueOperationCompleted
            End If
            Me.InvokeAsync("enqueue", New Object() {clientId, clientSecret, uid, token, message, destinations, originators, udhs}, Me.enqueueOperationCompleted, userState)
        End Sub
        
        Private Sub OnenqueueOperationCompleted(ByVal arg As Object)
            If (Not (Me.enqueueCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent enqueueCompleted(Me, New enqueueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://www.zamanak.ir/api/soap-v4#guaranty", RequestNamespace:="http://www.zamanak.ir/api/soap-v4", ResponseNamespace:="http://www.zamanak.ir/api/soap-v4")>  _
        Public Function guaranty(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal campId As String) As <System.Xml.Serialization.SoapElementAttribute("return")> Object()
            Dim results() As Object = Me.Invoke("guaranty", New Object() {clientId, clientSecret, uid, token, campId})
            Return CType(results(0),Object())
        End Function
        
        '''<remarks/>
        Public Overloads Sub guarantyAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal campId As String)
            Me.guarantyAsync(clientId, clientSecret, uid, token, campId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub guarantyAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal campId As String, ByVal userState As Object)
            If (Me.guarantyOperationCompleted Is Nothing) Then
                Me.guarantyOperationCompleted = AddressOf Me.OnguarantyOperationCompleted
            End If
            Me.InvokeAsync("guaranty", New Object() {clientId, clientSecret, uid, token, campId}, Me.guarantyOperationCompleted, userState)
        End Sub
        
        Private Sub OnguarantyOperationCompleted(ByVal arg As Object)
            If (Not (Me.guarantyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent guarantyCompleted(Me, New guarantyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://www.zamanak.ir/api/soap-v4#addDevAbzarak", RequestNamespace:="http://www.zamanak.ir/api/soap-v4", ResponseNamespace:="http://www.zamanak.ir/api/soap-v4")>  _
        Public Function addDevAbzarak(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal userId As String) As <System.Xml.Serialization.SoapElementAttribute("return")> Object()
            Dim results() As Object = Me.Invoke("addDevAbzarak", New Object() {clientId, clientSecret, uid, token, userId})
            Return CType(results(0),Object())
        End Function
        
        '''<remarks/>
        Public Overloads Sub addDevAbzarakAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal userId As String)
            Me.addDevAbzarakAsync(clientId, clientSecret, uid, token, userId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub addDevAbzarakAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal userId As String, ByVal userState As Object)
            If (Me.addDevAbzarakOperationCompleted Is Nothing) Then
                Me.addDevAbzarakOperationCompleted = AddressOf Me.OnaddDevAbzarakOperationCompleted
            End If
            Me.InvokeAsync("addDevAbzarak", New Object() {clientId, clientSecret, uid, token, userId}, Me.addDevAbzarakOperationCompleted, userState)
        End Sub
        
        Private Sub OnaddDevAbzarakOperationCompleted(ByVal arg As Object)
            If (Not (Me.addDevAbzarakCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent addDevAbzarakCompleted(Me, New addDevAbzarakCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://www.zamanak.ir/api/soap-v4#netmon", RequestNamespace:="http://www.zamanak.ir/api/soap-v4", ResponseNamespace:="http://www.zamanak.ir/api/soap-v4")>  _
        Public Function netmon(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String) As <System.Xml.Serialization.SoapElementAttribute("return")> Object()
            Dim results() As Object = Me.Invoke("netmon", New Object() {clientId, clientSecret, uid, token})
            Return CType(results(0),Object())
        End Function
        
        '''<remarks/>
        Public Overloads Sub netmonAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String)
            Me.netmonAsync(clientId, clientSecret, uid, token, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub netmonAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal userState As Object)
            If (Me.netmonOperationCompleted Is Nothing) Then
                Me.netmonOperationCompleted = AddressOf Me.OnnetmonOperationCompleted
            End If
            Me.InvokeAsync("netmon", New Object() {clientId, clientSecret, uid, token}, Me.netmonOperationCompleted, userState)
        End Sub
        
        Private Sub OnnetmonOperationCompleted(ByVal arg As Object)
            If (Not (Me.netmonCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent netmonCompleted(Me, New netmonCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://www.zamanak.ir/api/soap-v4#secretary", RequestNamespace:="http://www.zamanak.ir/api/soap-v4", ResponseNamespace:="http://www.zamanak.ir/api/soap-v4")>  _
        Public Function secretary(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal name As String, ByVal type As String, ByVal [to]() As Object, ByVal sourceNumber() As Object, ByVal recording_id As String, ByVal call_key As String, ByVal time_limit As String, ByVal retry As String, ByVal startAt As String, ByVal stopAt As String) As <System.Xml.Serialization.SoapElementAttribute("return")> String
            Dim results() As Object = Me.Invoke("secretary", New Object() {clientId, clientSecret, uid, token, name, type, [to], sourceNumber, recording_id, call_key, time_limit, retry, startAt, stopAt})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub secretaryAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal name As String, ByVal type As String, ByVal [to]() As Object, ByVal sourceNumber() As Object, ByVal recording_id As String, ByVal call_key As String, ByVal time_limit As String, ByVal retry As String, ByVal startAt As String, ByVal stopAt As String)
            Me.secretaryAsync(clientId, clientSecret, uid, token, name, type, [to], sourceNumber, recording_id, call_key, time_limit, retry, startAt, stopAt, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub secretaryAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal name As String, ByVal type As String, ByVal [to]() As Object, ByVal sourceNumber() As Object, ByVal recording_id As String, ByVal call_key As String, ByVal time_limit As String, ByVal retry As String, ByVal startAt As String, ByVal stopAt As String, ByVal userState As Object)
            If (Me.secretaryOperationCompleted Is Nothing) Then
                Me.secretaryOperationCompleted = AddressOf Me.OnsecretaryOperationCompleted
            End If
            Me.InvokeAsync("secretary", New Object() {clientId, clientSecret, uid, token, name, type, [to], sourceNumber, recording_id, call_key, time_limit, retry, startAt, stopAt}, Me.secretaryOperationCompleted, userState)
        End Sub
        
        Private Sub OnsecretaryOperationCompleted(ByVal arg As Object)
            If (Not (Me.secretaryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent secretaryCompleted(Me, New secretaryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://www.zamanak.ir/api/soap-v4#emailGroup", RequestNamespace:="http://www.zamanak.ir/api/soap-v4", ResponseNamespace:="http://www.zamanak.ir/api/soap-v4")>  _
        Public Function emailGroup(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal name As String, ByVal [to]() As Object, ByVal group As String, ByVal message As String) As <System.Xml.Serialization.SoapElementAttribute("return")> Object()
            Dim results() As Object = Me.Invoke("emailGroup", New Object() {clientId, clientSecret, uid, token, name, [to], group, message})
            Return CType(results(0),Object())
        End Function
        
        '''<remarks/>
        Public Overloads Sub emailGroupAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal name As String, ByVal [to]() As Object, ByVal group As String, ByVal message As String)
            Me.emailGroupAsync(clientId, clientSecret, uid, token, name, [to], group, message, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub emailGroupAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal name As String, ByVal [to]() As Object, ByVal group As String, ByVal message As String, ByVal userState As Object)
            If (Me.emailGroupOperationCompleted Is Nothing) Then
                Me.emailGroupOperationCompleted = AddressOf Me.OnemailGroupOperationCompleted
            End If
            Me.InvokeAsync("emailGroup", New Object() {clientId, clientSecret, uid, token, name, [to], group, message}, Me.emailGroupOperationCompleted, userState)
        End Sub
        
        Private Sub OnemailGroupOperationCompleted(ByVal arg As Object)
            If (Not (Me.emailGroupCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent emailGroupCompleted(Me, New emailGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://www.zamanak.ir/api/soap-v4#billPayment", RequestNamespace:="http://www.zamanak.ir/api/soap-v4", ResponseNamespace:="http://www.zamanak.ir/api/soap-v4")>  _
        Public Function billPayment(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal name As String, ByVal [to]() As Object, ByVal recordingIds() As Object, ByVal billType() As Object, ByVal billId() As Object, ByVal paymentId() As Object, ByVal amount() As Object, ByVal startTime As String, ByVal stopTime As String, ByVal repeatTotal As Integer) As <System.Xml.Serialization.SoapElementAttribute("return")> String
            Dim results() As Object = Me.Invoke("billPayment", New Object() {clientId, clientSecret, uid, token, name, [to], recordingIds, billType, billId, paymentId, amount, startTime, stopTime, repeatTotal})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub billPaymentAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal name As String, ByVal [to]() As Object, ByVal recordingIds() As Object, ByVal billType() As Object, ByVal billId() As Object, ByVal paymentId() As Object, ByVal amount() As Object, ByVal startTime As String, ByVal stopTime As String, ByVal repeatTotal As Integer)
            Me.billPaymentAsync(clientId, clientSecret, uid, token, name, [to], recordingIds, billType, billId, paymentId, amount, startTime, stopTime, repeatTotal, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub billPaymentAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal name As String, ByVal [to]() As Object, ByVal recordingIds() As Object, ByVal billType() As Object, ByVal billId() As Object, ByVal paymentId() As Object, ByVal amount() As Object, ByVal startTime As String, ByVal stopTime As String, ByVal repeatTotal As Integer, ByVal userState As Object)
            If (Me.billPaymentOperationCompleted Is Nothing) Then
                Me.billPaymentOperationCompleted = AddressOf Me.OnbillPaymentOperationCompleted
            End If
            Me.InvokeAsync("billPayment", New Object() {clientId, clientSecret, uid, token, name, [to], recordingIds, billType, billId, paymentId, amount, startTime, stopTime, repeatTotal}, Me.billPaymentOperationCompleted, userState)
        End Sub
        
        Private Sub OnbillPaymentOperationCompleted(ByVal arg As Object)
            If (Not (Me.billPaymentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent billPaymentCompleted(Me, New billPaymentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://www.zamanak.ir/api/soap-v4#buyCharge", RequestNamespace:="http://www.zamanak.ir/api/soap-v4", ResponseNamespace:="http://www.zamanak.ir/api/soap-v4")>  _
        Public Function buyCharge(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal [to] As String, ByVal amount() As Object, ByVal startTime As String, ByVal stopTime As String, ByVal repeatTotal As Integer) As <System.Xml.Serialization.SoapElementAttribute("return")> String
            Dim results() As Object = Me.Invoke("buyCharge", New Object() {clientId, clientSecret, uid, token, [to], amount, startTime, stopTime, repeatTotal})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub buyChargeAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal [to] As String, ByVal amount() As Object, ByVal startTime As String, ByVal stopTime As String, ByVal repeatTotal As Integer)
            Me.buyChargeAsync(clientId, clientSecret, uid, token, [to], amount, startTime, stopTime, repeatTotal, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub buyChargeAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal [to] As String, ByVal amount() As Object, ByVal startTime As String, ByVal stopTime As String, ByVal repeatTotal As Integer, ByVal userState As Object)
            If (Me.buyChargeOperationCompleted Is Nothing) Then
                Me.buyChargeOperationCompleted = AddressOf Me.OnbuyChargeOperationCompleted
            End If
            Me.InvokeAsync("buyCharge", New Object() {clientId, clientSecret, uid, token, [to], amount, startTime, stopTime, repeatTotal}, Me.buyChargeOperationCompleted, userState)
        End Sub
        
        Private Sub OnbuyChargeOperationCompleted(ByVal arg As Object)
            If (Not (Me.buyChargeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent buyChargeCompleted(Me, New buyChargeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://www.zamanak.ir/api/soap-v4#newCampaignbyText", RequestNamespace:="http://www.zamanak.ir/api/soap-v4", ResponseNamespace:="http://www.zamanak.ir/api/soap-v4")>  _
        Public Function newCampaignbyText(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal name As String, ByVal numbers() As Object, ByVal text As String, ByVal startTime As String, ByVal stopTime As String, ByVal repeatTotal As Integer) As <System.Xml.Serialization.SoapElementAttribute("return")> Object()
            Dim results() As Object = Me.Invoke("newCampaignbyText", New Object() {clientId, clientSecret, uid, token, name, numbers, text, startTime, stopTime, repeatTotal})
            Return CType(results(0),Object())
        End Function
        
        '''<remarks/>
        Public Overloads Sub newCampaignbyTextAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal name As String, ByVal numbers() As Object, ByVal text As String, ByVal startTime As String, ByVal stopTime As String, ByVal repeatTotal As Integer)
            Me.newCampaignbyTextAsync(clientId, clientSecret, uid, token, name, numbers, text, startTime, stopTime, repeatTotal, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub newCampaignbyTextAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal name As String, ByVal numbers() As Object, ByVal text As String, ByVal startTime As String, ByVal stopTime As String, ByVal repeatTotal As Integer, ByVal userState As Object)
            If (Me.newCampaignbyTextOperationCompleted Is Nothing) Then
                Me.newCampaignbyTextOperationCompleted = AddressOf Me.OnnewCampaignbyTextOperationCompleted
            End If
            Me.InvokeAsync("newCampaignbyText", New Object() {clientId, clientSecret, uid, token, name, numbers, text, startTime, stopTime, repeatTotal}, Me.newCampaignbyTextOperationCompleted, userState)
        End Sub
        
        Private Sub OnnewCampaignbyTextOperationCompleted(ByVal arg As Object)
            If (Not (Me.newCampaignbyTextCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent newCampaignbyTextCompleted(Me, New newCampaignbyTextCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://www.zamanak.ir/api/soap-v4#textToVoiceCalculator", RequestNamespace:="http://www.zamanak.ir/api/soap-v4", ResponseNamespace:="http://www.zamanak.ir/api/soap-v4")>  _
        Public Function textToVoiceCalculator(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal text As String) As <System.Xml.Serialization.SoapElementAttribute("return")> Integer
            Dim results() As Object = Me.Invoke("textToVoiceCalculator", New Object() {clientId, clientSecret, uid, token, text})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub textToVoiceCalculatorAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal text As String)
            Me.textToVoiceCalculatorAsync(clientId, clientSecret, uid, token, text, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub textToVoiceCalculatorAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal text As String, ByVal userState As Object)
            If (Me.textToVoiceCalculatorOperationCompleted Is Nothing) Then
                Me.textToVoiceCalculatorOperationCompleted = AddressOf Me.OntextToVoiceCalculatorOperationCompleted
            End If
            Me.InvokeAsync("textToVoiceCalculator", New Object() {clientId, clientSecret, uid, token, text}, Me.textToVoiceCalculatorOperationCompleted, userState)
        End Sub
        
        Private Sub OntextToVoiceCalculatorOperationCompleted(ByVal arg As Object)
            If (Not (Me.textToVoiceCalculatorCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent textToVoiceCalculatorCompleted(Me, New textToVoiceCalculatorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("http://www.zamanak.ir/api/soap-v4#smsBalance", RequestNamespace:="http://www.zamanak.ir/api/soap-v4", ResponseNamespace:="http://www.zamanak.ir/api/soap-v4")>  _
        Public Function smsBalance(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal username As String, ByVal password As String, ByVal company As String, ByVal sender As String) As <System.Xml.Serialization.SoapElementAttribute("return")> String
            Dim results() As Object = Me.Invoke("smsBalance", New Object() {clientId, clientSecret, uid, token, username, password, company, sender})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub smsBalanceAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal username As String, ByVal password As String, ByVal company As String, ByVal sender As String)
            Me.smsBalanceAsync(clientId, clientSecret, uid, token, username, password, company, sender, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub smsBalanceAsync(ByVal clientId As String, ByVal clientSecret As String, ByVal uid As Integer, ByVal token As String, ByVal username As String, ByVal password As String, ByVal company As String, ByVal sender As String, ByVal userState As Object)
            If (Me.smsBalanceOperationCompleted Is Nothing) Then
                Me.smsBalanceOperationCompleted = AddressOf Me.OnsmsBalanceOperationCompleted
            End If
            Me.InvokeAsync("smsBalance", New Object() {clientId, clientSecret, uid, token, username, password, company, sender}, Me.smsBalanceOperationCompleted, userState)
        End Sub
        
        Private Sub OnsmsBalanceOperationCompleted(ByVal arg As Object)
            If (Not (Me.smsBalanceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent smsBalanceCompleted(Me, New smsBalanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub signUpCompletedEventHandler(ByVal sender As Object, ByVal e As signUpCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class signUpCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub signUpAgencyCompletedEventHandler(ByVal sender As Object, ByVal e As signUpAgencyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class signUpAgencyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub signUpAgencyDiscountCompletedEventHandler(ByVal sender As Object, ByVal e As signUpAgencyDiscountCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class signUpAgencyDiscountCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub signUpAgencySocialCompletedEventHandler(ByVal sender As Object, ByVal e As signUpAgencySocialCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class signUpAgencySocialCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub myUsersCompletedEventHandler(ByVal sender As Object, ByVal e As myUsersCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class myUsersCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub transferCompletedEventHandler(ByVal sender As Object, ByVal e As transferCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class transferCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub captchaCompletedEventHandler(ByVal sender As Object, ByVal e As captchaCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class captchaCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub numberReaderCompletedEventHandler(ByVal sender As Object, ByVal e As numberReaderCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class numberReaderCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub addAbzarakCompletedEventHandler(ByVal sender As Object, ByVal e As addAbzarakCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class addAbzarakCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub uploadEncodedAudioCompletedEventHandler(ByVal sender As Object, ByVal e As uploadEncodedAudioCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class uploadEncodedAudioCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub authenticateCompletedEventHandler(ByVal sender As Object, ByVal e As authenticateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class authenticateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub receiveFaxCompletedEventHandler(ByVal sender As Object, ByVal e As receiveFaxCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class receiveFaxCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub getFaxesCompletedEventHandler(ByVal sender As Object, ByVal e As getFaxesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getFaxesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub getUnreadFaxesCompletedEventHandler(ByVal sender As Object, ByVal e As getUnreadFaxesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getUnreadFaxesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub getFaxesStringCompletedEventHandler(ByVal sender As Object, ByVal e As getFaxesStringCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getFaxesStringCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub getUnreadFaxesStringCompletedEventHandler(ByVal sender As Object, ByVal e As getUnreadFaxesStringCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getUnreadFaxesStringCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub sentFaxesByCampIdCompletedEventHandler(ByVal sender As Object, ByVal e As sentFaxesByCampIdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class sentFaxesByCampIdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub newCampaignCompletedEventHandler(ByVal sender As Object, ByVal e As newCampaignCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class newCampaignCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub newCampaignByEncodeRecCompletedEventHandler(ByVal sender As Object, ByVal e As newCampaignByEncodeRecCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class newCampaignByEncodeRecCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub newCampaignbyNumbersCompletedEventHandler(ByVal sender As Object, ByVal e As newCampaignbyNumbersCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class newCampaignbyNumbersCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub newPollCampaignCompletedEventHandler(ByVal sender As Object, ByVal e As newPollCampaignCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class newPollCampaignCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub newPollCampaignByNumbersCompletedEventHandler(ByVal sender As Object, ByVal e As newPollCampaignByNumbersCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class newPollCampaignByNumbersCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub getCampaignsCompletedEventHandler(ByVal sender As Object, ByVal e As getCampaignsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getCampaignsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub getAccountInfoCompletedEventHandler(ByVal sender As Object, ByVal e As getAccountInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getAccountInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub getContactGroupsCompletedEventHandler(ByVal sender As Object, ByVal e As getContactGroupsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getContactGroupsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub getRecordingsListCompletedEventHandler(ByVal sender As Object, ByVal e As getRecordingsListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getRecordingsListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub stopCampaignCompletedEventHandler(ByVal sender As Object, ByVal e As stopCampaignCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class stopCampaignCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub startCampaignCompletedEventHandler(ByVal sender As Object, ByVal e As startCampaignCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class startCampaignCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub cancelCampaignCompletedEventHandler(ByVal sender As Object, ByVal e As cancelCampaignCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class cancelCampaignCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub calculateCostCompletedEventHandler(ByVal sender As Object, ByVal e As calculateCostCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class calculateCostCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub calculateCostByNumberCompletedEventHandler(ByVal sender As Object, ByVal e As calculateCostByNumberCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class calculateCostByNumberCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub getCampaignLogsCompletedEventHandler(ByVal sender As Object, ByVal e As getCampaignLogsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getCampaignLogsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub getCampaignLogsExtendedCompletedEventHandler(ByVal sender As Object, ByVal e As getCampaignLogsExtendedCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getCampaignLogsExtendedCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub newContactCompletedEventHandler(ByVal sender As Object, ByVal e As newContactCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class newContactCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub newContactGroupCompletedEventHandler(ByVal sender As Object, ByVal e As newContactGroupCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class newContactGroupCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub getContactsCompletedEventHandler(ByVal sender As Object, ByVal e As getContactsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getContactsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub getContactsForLiteCompletedEventHandler(ByVal sender As Object, ByVal e As getContactsForLiteCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getContactsForLiteCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub getNotificationCompletedEventHandler(ByVal sender As Object, ByVal e As getNotificationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getNotificationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub chargeAccountCompletedEventHandler(ByVal sender As Object, ByVal e As chargeAccountCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class chargeAccountCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub sendFaxCompletedEventHandler(ByVal sender As Object, ByVal e As sendFaxCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class sendFaxCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub getFaxStatusCompletedEventHandler(ByVal sender As Object, ByVal e As getFaxStatusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getFaxStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub getPollStatusCompletedEventHandler(ByVal sender As Object, ByVal e As getPollStatusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getPollStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub getCampaignStatusCompletedEventHandler(ByVal sender As Object, ByVal e As getCampaignStatusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getCampaignStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub newMixCampaignCompletedEventHandler(ByVal sender As Object, ByVal e As newMixCampaignCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class newMixCampaignCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub newCampaignMinuteCompletedEventHandler(ByVal sender As Object, ByVal e As newCampaignMinuteCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class newCampaignMinuteCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub newLiveCampaignCompletedEventHandler(ByVal sender As Object, ByVal e As newLiveCampaignCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class newLiveCampaignCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub newLivePollCampaignCompletedEventHandler(ByVal sender As Object, ByVal e As newLivePollCampaignCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class newLivePollCampaignCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub addLiveNumbersCompletedEventHandler(ByVal sender As Object, ByVal e As addLiveNumbersCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class addLiveNumbersCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub liveNumberStatusCompletedEventHandler(ByVal sender As Object, ByVal e As liveNumberStatusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class liveNumberStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub liveCampaignStatusCompletedEventHandler(ByVal sender As Object, ByVal e As liveCampaignStatusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class liveCampaignStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub newLivePollSmsCampaignCompletedEventHandler(ByVal sender As Object, ByVal e As newLivePollSmsCampaignCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class newLivePollSmsCampaignCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub sendSmsGroupCompletedEventHandler(ByVal sender As Object, ByVal e As sendSmsGroupCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class sendSmsGroupCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub sendSmsCompletedEventHandler(ByVal sender As Object, ByVal e As sendSmsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class sendSmsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub sendCaptchaSmsCompletedEventHandler(ByVal sender As Object, ByVal e As sendCaptchaSmsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class sendCaptchaSmsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub enqueueCompletedEventHandler(ByVal sender As Object, ByVal e As enqueueCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class enqueueCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub guarantyCompletedEventHandler(ByVal sender As Object, ByVal e As guarantyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class guarantyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub addDevAbzarakCompletedEventHandler(ByVal sender As Object, ByVal e As addDevAbzarakCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class addDevAbzarakCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub netmonCompletedEventHandler(ByVal sender As Object, ByVal e As netmonCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class netmonCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub secretaryCompletedEventHandler(ByVal sender As Object, ByVal e As secretaryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class secretaryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub emailGroupCompletedEventHandler(ByVal sender As Object, ByVal e As emailGroupCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class emailGroupCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub billPaymentCompletedEventHandler(ByVal sender As Object, ByVal e As billPaymentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class billPaymentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub buyChargeCompletedEventHandler(ByVal sender As Object, ByVal e As buyChargeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class buyChargeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub newCampaignbyTextCompletedEventHandler(ByVal sender As Object, ByVal e As newCampaignbyTextCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class newCampaignbyTextCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub textToVoiceCalculatorCompletedEventHandler(ByVal sender As Object, ByVal e As textToVoiceCalculatorCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class textToVoiceCalculatorCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub smsBalanceCompletedEventHandler(ByVal sender As Object, ByVal e As smsBalanceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class smsBalanceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
End Namespace
